                                                      /* ��SDK��������湤������,�ù�����ȫ���! */

                                                      /* ����:BiliBili:���ߵĶ̽�è */

                                                      /* Link:https://space.bilibili.com/3671718 */

#pragma once

// DreadHunger-Win64-Shipping SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

#include "DreadHunger-Win64-Shipping_Engine_structs.hpp"

//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class Engine.GameInstance
// size:0x0180 (0x0028 - 0x01A8)
class UGameInstance : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TArray<class ULocalPlayer*>                        LocalPlayers;                                             // 0x0038(0x0010) (ZeroConstructor)
	class UOnlineSession*                              OnlineSession;                                            // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UObject*>                             ReferencedObjects;                                        // 0x0050(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0060(0x0018) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnPawnControllerChangedDelegates;                         // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x120];                                     // 0x0088(0x0120) MISSED OFFSET

	void ReceiveShutdown()//offset:0x13CEB30;
	void ReceiveInit()//offset:0x13CEB30;
	void HandleTravelError(TEnumAsByte<ETravelFailure> FailureType)//offset:0x13CEB30;
	void HandleNetworkError(TEnumAsByte<ENetworkFailure> FailureType, bool bIsServer)//offset:0x13CEB30;
	void DebugRemovePlayer(int ControllerId)//offset:0x2DE3BA0;
	void DebugCreatePlayer(int ControllerId)//offset:0x2DE3B10;
};


// Class Engine.Subsystem
// size:0x0008 (0x0028 - 0x0030)
class USubsystem : public UObject
{
public:
};


// Class Engine.GameInstanceSubsystem
// size:0x0000 (0x0030 - 0x0030)
class UGameInstanceSubsystem : public USubsystem
{
public:
};


// Class Engine.BlueprintFunctionLibrary
// size:0x0000 (0x0028 - 0x0028)
class UBlueprintFunctionLibrary : public UObject
{
public:
};


// Class Engine.Actor
// size:0x01F8 (0x0028 - 0x0220)
class AActor : public UObject
{
public:
	struct FActorTickFunction                          PrimaryActorTick;                                         // 0x0028(0x0030) (Edit, DisableEditOnInstance)
	unsigned char                                      bNetTemporary;                                            // 0x0058(0x0001)
	unsigned char                                      bNetStartup;                                              // 0x0058(0x0001)
	unsigned char                                      bOnlyRelevantToOwner;                                     // 0x0058(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bAlwaysRelevant;                                          // 0x0058(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      bReplicateMovement;                                       // 0x0058(0x0001) (Edit, Net, DisableEditOnInstance)
	unsigned char                                      bHidden;                                                  // 0x0058(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      bTearOff;                                                 // 0x0058(0x0001) (Net)
	unsigned char                                      bExchangedRoles;                                          // 0x0058(0x0001) (Transient)
	unsigned char                                      bNetLoadOnClient;                                         // 0x0059(0x0001) (Edit)
	unsigned char                                      bNetUseOwnerRelevancy;                                    // 0x0059(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      bRelevantForNetworkReplays;                               // 0x0059(0x0001)
	unsigned char                                      bRelevantForLevelBounds;                                  // 0x0059(0x0001) (Edit)
	unsigned char                                      bReplayRewindable;                                        // 0x0059(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bAllowTickBeforeBeginPlay;                                // 0x0059(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bAutoDestroyWhenFinished;                                 // 0x0059(0x0001) (BlueprintVisible)
	unsigned char                                      bCanBeDamaged;                                            // 0x0059(0x0001) (Edit, BlueprintVisible, Net, SaveGame)
	unsigned char                                      bBlockInput;                                              // 0x005A(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bCollideWhenPlacing;                                      // 0x005A(0x0001)
	unsigned char                                      bFindCameraComponentWhenViewTarget;                       // 0x005A(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bGenerateOverlapEventsDuringLevelStreaming;               // 0x005A(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoresOriginShifting;                                   // 0x005A(0x0001) (Edit)
	unsigned char                                      bEnableAutoLODGeneration;                                 // 0x005A(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsEditorOnlyActor;                                       // 0x005A(0x0001) (Edit)
	unsigned char                                      bActorSeamlessTraveled;                                   // 0x005A(0x0001)
	unsigned char                                      bReplicates;                                              // 0x005B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bCanBeInCluster;                                          // 0x005B(0x0001) (Edit)
	unsigned char                                      bAllowReceiveTickEventOnDedicatedServer;                  // 0x005B(0x0001)
	unsigned char                                      bActorEnableCollision;                                    // 0x005C(0x0001)
	unsigned char                                      bActorIsBeingDestroyed;                                   // 0x005C(0x0001) (Transient, DuplicateTransient)
	EActorUpdateOverlapsMethod                         UpdateOverlapsMethodDuringLevelStreaming;                 // 0x005D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EActorUpdateOverlapsMethod                         DefaultUpdateOverlapsMethodDuringLevelStreaming;          // 0x005E(0x0001) (Edit, ZeroConstructor, Config, EditConst, IsPlainOldData)
	TEnumAsByte<ENetRole>                              RemoteRole;                                               // 0x005F(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	struct FRepMovement                                ReplicatedMovement;                                       // 0x0060(0x0034) (Edit, Net, DisableEditOnInstance)
	float                                              InitialLifeSpan;                                          // 0x0094(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CustomTimeDilation;                                       // 0x0098(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	struct FRepAttachment                              AttachmentReplication;                                    // 0x00A0(0x0040) (Net, Transient)
	class AActor*                                      Owner;                                                    // 0x00E0(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	struct FName                                       NetDriverName;                                            // 0x00E8(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ENetRole>                              Role;                                                     // 0x00F0(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ENetDormancy>                          NetDormancy;                                              // 0x00F1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	ESpawnActorCollisionHandlingMethod                 SpawnCollisionHandlingMethod;                             // 0x00F2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAutoReceiveInput>                     AutoReceiveInput;                                         // 0x00F3(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                InputPriority;                                            // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UInputComponent*                             InputComponent;                                           // 0x00F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, DuplicateTransient, IsPlainOldData)
	float                                              NetCullDistanceSquared;                                   // 0x0100(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NetTag;                                                   // 0x0104(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              NetUpdateFrequency;                                       // 0x0108(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinNetUpdateFrequency;                                    // 0x010C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetPriority;                                              // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	class APawn*                                       Instigator;                                               // 0x0118(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	TArray<class AActor*>                              Children;                                                 // 0x0120(0x0010) (ZeroConstructor, Transient)
	class USceneComponent*                             RootComponent;                                            // 0x0130(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class AMatineeActor*>                       ControllingMatineeActors;                                 // 0x0138(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0148(0x0008) MISSED OFFSET
	TArray<struct FName>                               Layers;                                                   // 0x0150(0x0010) (ZeroConstructor)
	TWeakObjectPtr<class UChildActorComponent>         ParentComponent;                                          // 0x0160(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0168(0x0008) MISSED OFFSET
	TArray<struct FName>                               Tags;                                                     // 0x0170(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct MulticastSparseDelegate                     OnTakeAnyDamage;                                          // 0x0180(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnTakePointDamage;                                        // 0x0181(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnTakeRadialDamage;                                       // 0x0182(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnActorBeginOverlap;                                      // 0x0183(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnActorEndOverlap;                                        // 0x0184(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnBeginCursorOver;                                        // 0x0185(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnEndCursorOver;                                          // 0x0186(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnClicked;                                                // 0x0187(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnReleased;                                               // 0x0188(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnInputTouchBegin;                                        // 0x0189(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnInputTouchEnd;                                          // 0x018A(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnInputTouchEnter;                                        // 0x018B(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnInputTouchLeave;                                        // 0x018C(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnActorHit;                                               // 0x018D(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnDestroyed;                                              // 0x018E(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnEndPlay;                                                // 0x018F(0x0010) (InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x60];                                      // 0x0190(0x0060) MISSED OFFSET
	TArray<class UActorComponent*>                     InstanceComponents;                                       // 0x01F0(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UActorComponent*>                     BlueprintCreatedComponents;                               // 0x0200(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0210(0x0010) MISSED OFFSET

	bool WasRecentlyRendered(float Tolerance)//offset:0x2D87870;
	void UserConstructionScript()//offset:0x13CEB30;
	void TearOff()//offset:0xF54880;
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName)//offset:0x2D877A0;
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup)//offset:0x2D87690;
	void SetTickableWhenPaused(bool bTickableWhenPaused)//offset:0x2D87710;
	void SetReplicates(bool bInReplicates)//offset:0x2D87600;
	void SetReplicateMovement(bool bInReplicateMovement)//offset:0x2D87570;
	void SetOwner(class AActor* NewOwner)//offset:0x2D874E0;
	void SetNetDormancy(TEnumAsByte<ENetDormancy> NewDormancy)//offset:0x2D87460;
	void SetLifeSpan(float InLifespan)//offset:0x2D873D0;
	void SetAutoDestroyWhenFinished(bool bVal)//offset:0x2D87340;
	void SetActorTickInterval(float TickInterval)//offset:0x2D872C0;
	void SetActorTickEnabled(bool bEnabled)//offset:0x2D87230;
	void SetActorScale3D(const struct FVector& NewScale3D)//offset:0x2D871A0;
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale)//offset:0x2D87110;
	void SetActorHiddenInGame(bool bNewHidden)//offset:0x2D87080;
	void SetActorEnableCollision(bool bNewActorEnableCollision)//offset:0x2D86FF0;
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)//offset:0x2D86F60;
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor)//offset:0x2D86ED0;
	void ReceiveTick(float DeltaSeconds)//offset:0x13CEB30;
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser)//offset:0x13CEB30;
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo)//offset:0x13CEB30;
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit)//offset:0x13CEB30;
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason)//offset:0x13CEB30;
	void ReceiveDestroyed()//offset:0x13CEB30;
	void ReceiveBeginPlay()//offset:0x13CEB30;
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)//offset:0x13CEB30;
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased)//offset:0x13CEB30;
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex)//offset:0x13CEB30;
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex)//offset:0x13CEB30;
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex)//offset:0x13CEB30;
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex)//offset:0x13CEB30;
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed)//offset:0x13CEB30;
	void ReceiveActorEndOverlap(class AActor* OtherActor)//offset:0x13CEB30;
	void ReceiveActorEndCursorOver()//offset:0x13CEB30;
	void ReceiveActorBeginOverlap(class AActor* OtherActor)//offset:0x13CEB30;
	void ReceiveActorBeginCursorOver()//offset:0x13CEB30;
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups)//offset:0x2D86DB0;
	void OnRep_ReplicateMovement()//offset:0x1F582B0;
	void OnRep_ReplicatedMovement()//offset:0x2D86D90;
	void OnRep_Owner()//offset:0xF54860;
	void OnRep_Instigator()//offset:0x2D86D70;
	void OnRep_AttachmentReplication()//offset:0xF54690;
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag)//offset:0x2D86BD0;
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent)//offset:0x2D86B30;
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation)//offset:0x2D86A40;
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2D86830;
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics)//offset:0x2D86740;
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2D86530;
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2D86380;
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2D861D0;
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2D85FB0;
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2D85DF0;
	void K2_OnReset()//offset:0x13CEB30;
	void K2_OnEndViewTarget(class APlayerController* PC)//offset:0x13CEB30;
	void K2_OnBecomeViewTarget(class APlayerController* PC)//offset:0x13CEB30;
	class USceneComponent* K2_GetRootComponent()//offset:0x2D85DD0;
	TArray<class UActorComponent*> K2_GetComponentsByClass(class UActorComponent* ComponentClass)//offset:0x2D85CF0;
	struct FRotator K2_GetActorRotation()//offset:0x2D85C40;
	struct FVector K2_GetActorLocation()//offset:0x2D85BC0;
	void K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule)//offset:0x2D85AB0;
	void K2_DestroyComponent(class UActorComponent* Component)//offset:0x2D85A20;
	void K2_DestroyActor()//offset:0x2D85A00;
	void K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies)//offset:0x2D85830;
	void K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies)//offset:0x2D85660;
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies)//offset:0x2D85500;
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies)//offset:0x2D853A0;
	void K2_AddActorWorldTransformKeepScale(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2D85190;
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2D84F80;
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2D84DD0;
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2D84C20;
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2D84A10;
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2D84860;
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2D846B0;
	bool IsOverlappingActor(class AActor* Other)//offset:0x2D84610;
	bool IsChildActor()//offset:0x2D845E0;
	bool IsActorTickEnabled()//offset:0x2D845B0;
	bool IsActorBeingDestroyed()//offset:0x2D84580;
	bool HasAuthority()//offset:0x2D84550;
	float GetVerticalDistanceTo(class AActor* OtherActor)//offset:0x2D844B0;
	struct FVector GetVelocity()//offset:0x2D84470;
	struct FTransform GetTransform()//offset:0x2D84420;
	bool GetTickableWhenPaused()//offset:0x2D843F0;
	float GetSquaredDistanceTo(class AActor* OtherActor)//offset:0x2D84350;
	TEnumAsByte<ENetRole> GetRemoteRole()//offset:0x2D84330;
	class UChildActorComponent* GetParentComponent()//offset:0x2D84300;
	class AActor* GetParentActor()//offset:0x2D842D0;
	class AActor* GetOwner()//offset:0x2D842B0;
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents)//offset:0x2D84200;
	void GetOverlappingActors(TArray<class AActor*>* OverlappingActors, class AActor* ClassFilter)//offset:0x2D84100;
	TEnumAsByte<ENetRole> GetLocalRole()//offset:0x2D840E0;
	float GetLifeSpan()//offset:0x2D840A0;
	class AController* GetInstigatorController()//offset:0x2D84070;
	class APawn* GetInstigator()//offset:0x2D84040;
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey)//offset:0x2D83F30;
	float GetInputAxisValue(const struct FName& InputAxisName)//offset:0x2D83E90;
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey)//offset:0x2D83D90;
	float GetHorizontalDotProductTo(class AActor* OtherActor)//offset:0x2D83CF0;
	float GetHorizontalDistanceTo(class AActor* OtherActor)//offset:0x2D83C50;
	float GetGameTimeSinceCreation()//offset:0x2D83C20;
	float GetDotProductTo(class AActor* OtherActor)//offset:0x2D83B80;
	float GetDistanceTo(class AActor* OtherActor)//offset:0x2D83AE0;
	TArray<class UActorComponent*> GetComponentsByTag(class UActorComponent* ComponentClass, const struct FName& Tag)//offset:0x2D839D0;
	TArray<class UActorComponent*> GetComponentsByInterface(class UInterface* Interface)//offset:0x2D838F0;
	class UActorComponent* GetComponentByClass(class UActorComponent* ComponentClass)//offset:0x2D83850;
	struct FName GetAttachParentSocketName()//offset:0x2D83710;
	class AActor* GetAttachParentActor()//offset:0x2D836E0;
	void GetAttachedActors(TArray<class AActor*>* OutActors, bool bResetArray)//offset:0x2D83750;
	void GetAllChildActors(TArray<class AActor*>* ChildActors, bool bIncludeDescendants)//offset:0x2D835E0;
	struct FVector GetActorUpVector()//offset:0x2D83570;
	float GetActorTimeDilation()//offset:0x2D83540;
	float GetActorTickInterval()//offset:0x2D83510;
	struct FVector GetActorScale3D()//offset:0x2D834D0;
	struct FVector GetActorRightVector()//offset:0x2D83460;
	struct FVector GetActorRelativeScale3D()//offset:0x2D83420;
	struct FVector GetActorForwardVector()//offset:0x2D833B0;
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation)//offset:0x2D832C0;
	bool GetActorEnableCollision()//offset:0x2D83290;
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent, bool bIncludeFromChildActors)//offset:0x2D83100;
	void ForceNetUpdate()//offset:0x2D830E0;
	void FlushNetDormancy()//offset:0x2D830C0;
	void FinishAddComponent(class UActorComponent* Component, bool bManualAttachment, const struct FTransform& RelativeTransform)//offset:0x2D82F60;
	void EnableInput(class APlayerController* PlayerController)//offset:0x247ED90;
	void DisableInput(class APlayerController* PlayerController)//offset:0x2D82ED0;
	void DetachRootComponentFromParent(bool bMaintainWorldPosition)//offset:0x2D82E40;
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)//offset:0x2D82DB0;
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor)//offset:0x2D82D20;
	class UActorComponent* AddComponentByClass(class UActorComponent* Class, bool bManualAttachment, const struct FTransform& RelativeTransform, bool bDeferredFinish)//offset:0x2D82B60;
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext, bool bDeferredFinish)//offset:0x2D82950;
	bool ActorHasTag(const struct FName& Tag)//offset:0x2D828B0;
};


// Class Engine.ActorComponent
// size:0x0088 (0x0028 - 0x00B0)
class UActorComponent : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FActorComponentTickFunction                 PrimaryComponentTick;                                     // 0x0030(0x0030) (Edit, DisableEditOnInstance)
	TArray<struct FName>                               ComponentTags;                                            // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0070(0x0010) (Edit, ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0080(0x0004) MISSED OFFSET
	int                                                UCSSerializationIndex;                                    // 0x0084(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bNetAddressable;                                          // 0x0088(0x0001)
	unsigned char                                      bReplicates;                                              // 0x0088(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance)
	unsigned char                                      bAutoActivate;                                            // 0x0089(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIsActive;                                                // 0x008A(0x0001) (Net, Transient)
	unsigned char                                      bEditableWhenInherited;                                   // 0x008A(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bCanEverAffectNavigation;                                 // 0x008A(0x0001) (Edit, Config)
	unsigned char                                      bIsEditorOnly;                                            // 0x008A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x1];                                       // 0x008B(0x0001) MISSED OFFSET
	EComponentCreationMethod                           CreationMethod;                                           // 0x008C(0x0001) (ZeroConstructor, IsPlainOldData)
	struct MulticastSparseDelegate                     OnComponentActivated;                                     // 0x008D(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnComponentDeactivated;                                   // 0x008E(0x0010) (InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x1];                                       // 0x008F(0x0001) MISSED OFFSET
	TArray<struct FSimpleMemberReference>              UCSModifiedProperties;                                    // 0x0090(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData04[0x10];                                      // 0x00A0(0x0010) MISSED OFFSET

	void ToggleActive()//offset:0xF54860;
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup)//offset:0x2D8AEB0;
	void SetTickableWhenPaused(bool bTickableWhenPaused)//offset:0x2D8AF30;
	void SetIsReplicated(bool ShouldReplicate)//offset:0x2D8AE20;
	void SetComponentTickIntervalAndCooldown(float TickInterval)//offset:0x2D8ADA0;
	void SetComponentTickInterval(float TickInterval)//offset:0x2D8AD20;
	void SetComponentTickEnabled(bool bEnabled)//offset:0x2D8AC90;
	void SetAutoActivate(bool bNewAutoActivate)//offset:0x2D87570;
	void SetActive(bool bNewActive, bool bReset)//offset:0x2D8ABC0;
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)//offset:0x2D8AB30;
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor)//offset:0x2D8AAA0;
	void ReceiveTick(float DeltaSeconds)//offset:0x13CEB30;
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason)//offset:0x13CEB30;
	void ReceiveBeginPlay()//offset:0x13CEB30;
	void OnRep_IsActive()//offset:0x1F582B0;
	void K2_DestroyComponent(class UObject* Object)//offset:0x2D8A990;
	bool IsComponentTickEnabled()//offset:0x2D8A960;
	bool IsBeingDestroyed()//offset:0x2D8A930;
	bool IsActive()//offset:0x2D8A900;
	class AActor* GetOwner()//offset:0x2D8A8E0;
	float GetComponentTickInterval()//offset:0x2D8A8B0;
	void Deactivate()//offset:0x1F58050;
	bool ComponentHasTag(const struct FName& Tag)//offset:0x2D8A670;
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)//offset:0x2D8A510;
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor)//offset:0x2D8A480;
	void Activate(bool bReset)//offset:0x2497330;
};


// Class Engine.SceneComponent
// size:0x0150 (0x00B0 - 0x0200)
class USceneComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B0(0x0008) MISSED OFFSET
	TWeakObjectPtr<class APhysicsVolume>               PhysicsVolume;                                            // 0x00B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class USceneComponent*                             AttachParent;                                             // 0x00C0(0x0008) (ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FName                                       AttachSocketName;                                         // 0x00C8(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	TArray<class USceneComponent*>                     AttachChildren;                                           // 0x00D0(0x0010) (ExportObject, Net, ZeroConstructor, Transient)
	TArray<class USceneComponent*>                     ClientAttachedChildren;                                   // 0x00E0(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x2C];                                      // 0x00F0(0x002C) MISSED OFFSET
	struct FVector                                     RelativeLocation;                                         // 0x011C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x0128(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeScale3D;                                          // 0x0134(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ComponentVelocity;                                        // 0x0140(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bComponentToWorldUpdated;                                 // 0x014C(0x0001) (Transient)
	unsigned char                                      bAbsoluteLocation;                                        // 0x014C(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bAbsoluteRotation;                                        // 0x014C(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bAbsoluteScale;                                           // 0x014C(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bVisible;                                                 // 0x014C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      bShouldBeAttached;                                        // 0x014C(0x0001) (Net, Transient)
	unsigned char                                      bShouldSnapLocationWhenAttached;                          // 0x014C(0x0001) (Net, Transient)
	unsigned char                                      bShouldSnapRotationWhenAttached;                          // 0x014D(0x0001) (Net, Transient)
	unsigned char                                      bShouldUpdatePhysicsVolume;                               // 0x014D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHiddenInGame;                                            // 0x014D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bBoundsChangeTriggersStreamingDataRebuild;                // 0x014D(0x0001)
	unsigned char                                      bUseAttachParentBound;                                    // 0x014D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x1];                                       // 0x014E(0x0001) MISSED OFFSET
	TEnumAsByte<EComponentMobility>                    Mobility;                                                 // 0x014F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDetailMode>                           DetailMode;                                               // 0x0150(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct MulticastSparseDelegate                     PhysicsVolumeChangedDelegate;                             // 0x0151(0x0010) (InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0xAE];                                      // 0x0152(0x00AE) MISSED OFFSET

	void ToggleVisibility(bool bPropagateToChildren)//offset:0x2EC9990;
	bool SnapTo(class USceneComponent* InParent, const struct FName& InSocketName)//offset:0x2EC98C0;
	void SetWorldScale3D(const struct FVector& NewScale)//offset:0x2EC96D0;
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren)//offset:0x2EC9600;
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume)//offset:0x2EC9570;
	void SetRelativeScale3D(const struct FVector& NewScale3D)//offset:0x2EC94E0;
	void SetMobility(TEnumAsByte<EComponentMobility> NewMobility)//offset:0x2EC9460;
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren)//offset:0x2EC9390;
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale)//offset:0x2EC91D0;
	void ResetRelativeTransform()//offset:0x2EC91B0;
	void OnRep_Visibility(bool OldValue)//offset:0x2EC8FC0;
	void OnRep_Transform()//offset:0x2EC8FA0;
	void OnRep_AttachSocketName()//offset:0x2EC8F80;
	void OnRep_AttachParent()//offset:0x2EC8F80;
	void OnRep_AttachChildren()//offset:0x2EC8F60;
	void K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2EC8D50;
	void K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2EC8BA0;
	void K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2EC8990;
	void K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2EC87E0;
	void K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2EC85D0;
	void K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2EC8420;
	void K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2EC8210;
	void K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2EC8060;
	struct FTransform K2_GetComponentToWorld()//offset:0x2EC8000;
	struct FVector K2_GetComponentScale()//offset:0x2EC7FC0;
	struct FRotator K2_GetComponentRotation()//offset:0x2EC7F80;
	struct FVector K2_GetComponentLocation()//offset:0x2EC7F40;
	void K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify)//offset:0x2EC7DE0;
	bool K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies)//offset:0x2EC7C10;
	bool K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies)//offset:0x2EC7AB0;
	void K2_AddWorldTransformKeepScale(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2EC78A0;
	void K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2EC7690;
	void K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2EC74E0;
	void K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2EC7330;
	void K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2EC7180;
	void K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2EC6FD0;
	void K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2EC6DC0;
	void K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2EC6C10;
	void K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport)//offset:0x2EC6A60;
	bool IsVisible()//offset:0x2EC6A30;
	bool IsSimulatingPhysics(const struct FName& BoneName)//offset:0x2EC6990;
	bool IsAnySimulatingPhysics()//offset:0x2EC6960;
	struct FVector GetUpVector()//offset:0x2EC67C0;
	struct FTransform GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace)//offset:0x2EC66B0;
	struct FRotator GetSocketRotation(const struct FName& InSocketName)//offset:0x2EC6600;
	struct FQuat GetSocketQuaternion(const struct FName& InSocketName)//offset:0x2EC6550;
	struct FVector GetSocketLocation(const struct FName& InSocketName)//offset:0x2EC64A0;
	bool GetShouldUpdatePhysicsVolume()//offset:0x2EC6470;
	struct FVector GetRightVector()//offset:0x2EC6430;
	struct FTransform GetRelativeTransform()//offset:0x2EC63D0;
	class APhysicsVolume* GetPhysicsVolume()//offset:0x2EC63A0;
	void GetParentComponents(TArray<class USceneComponent*>* Parents)//offset:0x2EC62F0;
	int GetNumChildrenComponents()//offset:0x2EC62C0;
	struct FVector GetForwardVector()//offset:0x2EA1510;
	struct FVector GetComponentVelocity()//offset:0x2EC6280;
	void GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children)//offset:0x2EC6180;
	class USceneComponent* GetChildComponent(int ChildIndex)//offset:0x2EC60E0;
	struct FName GetAttachSocketName()//offset:0x998C50;
	class USceneComponent* GetAttachParent()//offset:0xF44A30;
	TArray<struct FName> GetAllSocketNames()//offset:0x2EC6060;
	bool DoesSocketExist(const struct FName& InSocketName)//offset:0x2EC5FC0;
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify)//offset:0x2EC5EF0;
};


// Class Engine.PrimitiveComponent
// size:0x0250 (0x0200 - 0x0450)
class UPrimitiveComponent : public USceneComponent
{
public:
	float                                              MinDrawDistance;                                          // 0x0200(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LDMaxDrawDistance;                                        // 0x0204(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CachedMaxDrawDistance;                                    // 0x0208(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<ESceneDepthPriorityGroup>              DepthPriorityGroup;                                       // 0x020C(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESceneDepthPriorityGroup>              ViewOwnerDepthPriorityGroup;                              // 0x020D(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EIndirectLightingCacheQuality>         IndirectLightingCacheQuality;                             // 0x020E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	ELightmapType                                      LightmapType;                                             // 0x020F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseMaxLODAsImposter;                                     // 0x0210(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bBatchImpostersAsInstances;                               // 0x0210(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNeverDistanceCull;                                       // 0x0210(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAlwaysCreatePhysicsState;                                // 0x0210(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bGenerateOverlapEvents;                                   // 0x0211(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bMultiBodyOverlap;                                        // 0x0211(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bTraceComplexOnMove;                                      // 0x0211(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bReturnMaterialOnMove;                                    // 0x0211(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseViewOwnerDepthPriorityGroup;                          // 0x0211(0x0001)
	unsigned char                                      bAllowCullDistanceVolume;                                 // 0x0211(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bHasMotionBlurVelocityMeshes;                             // 0x0211(0x0001)
	unsigned char                                      bVisibleInReflectionCaptures;                             // 0x0211(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bVisibleInRealTimeSkyCaptures;                            // 0x0212(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bVisibleInRayTracing;                                     // 0x0212(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRenderInMainPass;                                        // 0x0212(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRenderInDepthPass;                                       // 0x0212(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bReceivesDecals;                                          // 0x0212(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOwnerNoSee;                                              // 0x0212(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOnlyOwnerSee;                                            // 0x0212(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bTreatAsBackgroundForOcclusion;                           // 0x0212(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseAsOccluder;                                           // 0x0213(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSelectable;                                              // 0x0213(0x0001)
	unsigned char                                      bForceMipStreaming;                                       // 0x0213(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bHasPerInstanceHitProxies;                                // 0x0213(0x0001)
	unsigned char                                      CastShadow;                                               // 0x0213(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectDynamicIndirectLighting;                           // 0x0213(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectDistanceFieldLighting;                             // 0x0213(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastDynamicShadow;                                       // 0x0213(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastStaticShadow;                                        // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastVolumetricTranslucentShadow;                         // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastContactShadow;                                       // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSelfShadowOnly;                                          // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastFarShadow;                                           // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastInsetShadow;                                         // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastCinematicShadow;                                     // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastHiddenShadow;                                        // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastShadowAsTwoSided;                                    // 0x0215(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bLightAsIfStatic;                                         // 0x0215(0x0001) (Deprecated)
	unsigned char                                      bLightAttachmentsAsGroup;                                 // 0x0215(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bExcludeFromLightAttachmentGroup;                         // 0x0215(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bReceiveMobileCSMShadows;                                 // 0x0215(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSingleSampleShadowFromStationaryLights;                  // 0x0215(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIgnoreRadialImpulse;                                     // 0x0215(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreRadialForce;                                       // 0x0215(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bApplyImpulseOnDamage;                                    // 0x0216(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bReplicatePhysicsToAutonomousProxy;                       // 0x0216(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bFillCollisionUnderneathForNavmesh;                       // 0x0216(0x0001) (Edit)
	unsigned char                                      AlwaysLoadOnClient;                                       // 0x0216(0x0001)
	unsigned char                                      AlwaysLoadOnServer;                                       // 0x0216(0x0001)
	unsigned char                                      bUseEditorCompositing;                                    // 0x0216(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0217(0x0001) MISSED OFFSET
	struct FColor                                      CustomColorMask0;                                         // 0x0218(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      CustomColorMask1;                                         // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRenderCustomDepth;                                       // 0x0220(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	TEnumAsByte<EHasCustomNavigableGeometry>           bHasCustomNavigableGeometry;                              // 0x0221(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0222(0x0001) MISSED OFFSET
	TEnumAsByte<ECanBeCharacterBase>                   CanCharacterStepUpOn;                                     // 0x0223(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLightingChannels                           LightingChannels;                                         // 0x0224(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	ERendererStencilMask                               CustomDepthStencilWriteMask;                              // 0x0225(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0226(0x0002) MISSED OFFSET
	int                                                CustomDepthStencilValue;                                  // 0x0228(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x022C(0x0004) MISSED OFFSET
	struct FCustomPrimitiveData                        CustomPrimitiveData;                                      // 0x0230(0x0010) (Edit)
	struct FCustomPrimitiveData                        CustomPrimitiveDataInternal;                              // 0x0240(0x0010) (Transient)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0250(0x0008) MISSED OFFSET
	int                                                TranslucencySortPriority;                                 // 0x0258(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                VisibilityId;                                             // 0x025C(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<class URuntimeVirtualTexture*>              RuntimeVirtualTextures;                                   // 0x0260(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int8_t                                             VirtualTextureLodBias;                                    // 0x0270(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	int8_t                                             VirtualTextureCullMips;                                   // 0x0271(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	int8_t                                             VirtualTextureMinCoverage;                                // 0x0272(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	ERuntimeVirtualTextureMainPassType                 VirtualTextureRenderPassType;                             // 0x0273(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0274(0x0004) MISSED OFFSET
	float                                              LpvBiasMultiplier;                                        // 0x0278(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x8];                                       // 0x027C(0x0008) MISSED OFFSET
	float                                              BoundsScale;                                              // 0x0284(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x10];                                      // 0x0288(0x0010) MISSED OFFSET
	TArray<class AActor*>                              MoveIgnoreActors;                                         // 0x0298(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UPrimitiveComponent*>                 MoveIgnoreComponents;                                     // 0x02A8(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData08[0x10];                                      // 0x02B8(0x0010) MISSED OFFSET
	struct FBodyInstance                               BodyInstance;                                             // 0x02C8(0x0158) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct MulticastSparseDelegate                     OnComponentHit;                                           // 0x0420(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnComponentBeginOverlap;                                  // 0x0421(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnComponentEndOverlap;                                    // 0x0422(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnComponentWake;                                          // 0x0423(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnComponentSleep;                                         // 0x0424(0x0010) (InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData09[0x1];                                       // 0x0425(0x0001) MISSED OFFSET
	struct MulticastSparseDelegate                     OnBeginCursorOver;                                        // 0x0426(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnEndCursorOver;                                          // 0x0427(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnClicked;                                                // 0x0428(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnReleased;                                               // 0x0429(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnInputTouchBegin;                                        // 0x042A(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnInputTouchEnd;                                          // 0x042B(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnInputTouchEnter;                                        // 0x042C(0x0010) (InstancedReference, BlueprintAssignable)
	struct MulticastSparseDelegate                     OnInputTouchLeave;                                        // 0x042D(0x0010) (InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData10[0x1A];                                      // 0x042E(0x001A) MISSED OFFSET
	class UPrimitiveComponent*                         LODParentPrimitive;                                       // 0x0448(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	bool WasRecentlyRendered(float Tolerance)//offset:0x2EBB4F0;
	void WakeRigidBody(const struct FName& BoneName)//offset:0x2EBB460;
	void WakeAllRigidBodies()//offset:0x2EBB440;
	void SetWalkableSlopeOverride(const struct FWalkableSlopeOverride& NewOverride)//offset:0x2EBB390;
	void SetUseCCD(bool InUseCCD, const struct FName& BoneName)//offset:0x2EBB2C0;
	void SetTranslucentSortPriority(int NewTranslucentSortPriority)//offset:0x2EBB230;
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights)//offset:0x2EBB020;
	void SetSimulatePhysics(bool bSimulate)//offset:0x2EBAF90;
	void SetRenderInMainPass(bool bValue)//offset:0x2EBAF00;
	void SetRenderCustomDepth(bool bValue)//offset:0x2EBAE70;
	void SetReceivesDecals(bool bNewReceivesDecals)//offset:0x2EBADE0;
	void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial)//offset:0x2EBA6E0;
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName)//offset:0x2EBAC40;
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName)//offset:0x2EBAB20;
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName)//offset:0x2EBAB20;
	void SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const struct FName& BoneName)//offset:0x2EBA9F0;
	void SetPhysicsAngularVelocityInRadians(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName)//offset:0x2EBA8C0;
	void SetPhysicsAngularVelocityInDegrees(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName)//offset:0x2EBA770;
	void SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName)//offset:0x2EBA770;
	void SetOwnerNoSee(bool bNewOwnerNoSee)//offset:0x2EBA650;
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee)//offset:0x2EBA5C0;
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision)//offset:0x2EBA530;
	void SetMaterialByName(const struct FName& MaterialSlotName, class UMaterialInterface* Material)//offset:0x2EBA3D0;
	void SetMaterial(int ElementIndex, class UMaterialInterface* Material)//offset:0x2EBA300;
	void SetMassScale(const struct FName& BoneName, float InMassScale)//offset:0x2EBA220;
	void SetMassOverrideInKg(const struct FName& BoneName, float MassInKg, bool bOverrideMass)//offset:0x2EBA110;
	void SetLinearDamping(float InDamping)//offset:0x2DD3E20;
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2)//offset:0x2EB9FE0;
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup)//offset:0x2EB9E50;
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents)//offset:0x2EB9DC0;
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup)//offset:0x2EB9D30;
	void SetEnableGravity(bool bGravityEnabled)//offset:0x2EB9CA0;
	void SetDefaultCustomPrimitiveDataVector4(int DataIndex, const struct FVector4& Value)//offset:0x2EB9BC0;
	void SetDefaultCustomPrimitiveDataVector3(int DataIndex, const struct FVector& Value)//offset:0x2EB9AE0;
	void SetDefaultCustomPrimitiveDataVector2(int DataIndex, const struct FVector2D& Value)//offset:0x2EB9A10;
	void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value)//offset:0x2EB9940;
	void SetCustomPrimitiveDataVector4(int DataIndex, const struct FVector4& Value)//offset:0x2EB9860;
	void SetCustomPrimitiveDataVector3(int DataIndex, const struct FVector& Value)//offset:0x2EB9780;
	void SetCustomPrimitiveDataVector2(int DataIndex, const struct FVector2D& Value)//offset:0x2EB96B0;
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value)//offset:0x2EB95E0;
	void SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit)//offset:0x2EB9560;
	void SetCustomDepthStencilValue(int Value)//offset:0x2EB94D0;
	void SetCustomColorMask1(const struct FColor& Color)//offset:0x2EB9440;
	void SetCustomColorMask0(const struct FColor& Color)//offset:0x2EB93B0;
	void SetCullDistance(float NewCullDistance)//offset:0x2EB9330;
	void SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode)//offset:0x2EB92B0;
	void SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse)//offset:0x2EB91E0;
	void SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse)//offset:0x2EB9160;
	void SetCollisionProfileName(const struct FName& InCollisionProfileName, bool bUpdateOverlaps)//offset:0x2EB9090;
	void SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel)//offset:0x2EB9010;
	void SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType)//offset:0x2EB8F90;
	void SetCenterOfMass(const struct FVector& CenterOfMassOffset, const struct FName& BoneName)//offset:0x2EB8EB0;
	void SetCastShadow(bool NewCastShadow)//offset:0x2EB8E20;
	void SetCastInsetShadow(bool bInCastInsetShadow)//offset:0x2EB8D90;
	void SetBoundsScale(float NewBoundsScale)//offset:0x2EB8D10;
	void SetAngularDamping(float InDamping)//offset:0x2EB86E0;
	void SetAllUseCCD(bool InUseCCD)//offset:0x2EADDC0;
	void SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent)//offset:0x2EB8600;
	void SetAllPhysicsAngularVelocityInRadians(const struct FVector& NewAngVel, bool bAddToCurrent)//offset:0x2EB8510;
	void SetAllPhysicsAngularVelocityInDegrees(const struct FVector& NewAngVel, bool bAddToCurrent)//offset:0x2EB83F0;
	void SetAllMassScale(float InMassScale)//offset:0x2EB8360;
	struct FVector ScaleByMomentOfInertia(const struct FVector& InputVector, const struct FName& BoneName)//offset:0x2EB8260;
	void PutRigidBodyToSleep(const struct FName& BoneName)//offset:0x2EB8140;
	bool K2_SphereTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit)//offset:0x2EB7D90;
	bool K2_SphereOverlapComponent(const struct FVector& InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit)//offset:0x2EB7A30;
	bool K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit)//offset:0x2EB76D0;
	bool K2_IsQueryCollisionEnabled()//offset:0x2EB7690;
	bool K2_IsPhysicsCollisionEnabled()//offset:0x2EB7650;
	bool K2_IsCollisionEnabled()//offset:0x2EB7610;
	bool K2_BoxOverlapComponent(const struct FVector& InBoxCentre, const struct FBox& InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit)//offset:0x2EB72A0;
	bool IsOverlappingComponent(class UPrimitiveComponent* OtherComp)//offset:0x2EB7200;
	bool IsOverlappingActor(class AActor* Other)//offset:0x2EB7160;
	bool IsGravityEnabled()//offset:0x2EB7130;
	bool IsAnyRigidBodyAwake()//offset:0x2EB7100;
	void IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore)//offset:0x2EB6EC0;
	void IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore)//offset:0x2EB6DF0;
	struct FWalkableSlopeOverride GetWalkableSlopeOverride()//offset:0x2EB6DC0;
	struct FVector GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, const struct FName& BoneName)//offset:0x2EB6C40;
	struct FVector GetPhysicsLinearVelocity(const struct FName& BoneName)//offset:0x2EB6B90;
	struct FVector GetPhysicsAngularVelocityInRadians(const struct FName& BoneName)//offset:0x2EB6AE0;
	struct FVector GetPhysicsAngularVelocityInDegrees(const struct FName& BoneName)//offset:0x2EB6A10;
	struct FVector GetPhysicsAngularVelocity(const struct FName& BoneName)//offset:0x2EB6A10;
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OutOverlappingComponents)//offset:0x2EB6960;
	void GetOverlappingActors(TArray<class AActor*>* OverlappingActors, class AActor* ClassFilter)//offset:0x2EB6860;
	int GetNumMaterials()//offset:0x2DEC420;
	class UMaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, int* SectionIndex)//offset:0x2EB6780;
	class UMaterialInterface* GetMaterial(int ElementIndex)//offset:0x2EB66E0;
	float GetMassScale(const struct FName& BoneName)//offset:0x2EB6640;
	float GetMass()//offset:0x2EB6600;
	float GetLinearDamping()//offset:0x2EB65C0;
	struct FVector GetInertiaTensor(const struct FName& BoneName)//offset:0x2EB6510;
	bool GetGenerateOverlapEvents()//offset:0x2EB64E0;
	TEnumAsByte<ECollisionResponse> GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel)//offset:0x2EB6450;
	struct FName GetCollisionProfileName()//offset:0x2EB6410;
	TEnumAsByte<ECollisionChannel> GetCollisionObjectType()//offset:0x2EB63E0;
	TEnumAsByte<ECollisionEnabled> GetCollisionEnabled()//offset:0x2EB63B0;
	float GetClosestPointOnCollision(const struct FVector& Point, struct FVector* OutPointOnBody, const struct FName& BoneName)//offset:0x2EB6270;
	struct FVector GetCenterOfMass(const struct FName& BoneName)//offset:0x2EB61C0;
	float GetAngularDamping()//offset:0x2EB5DD0;
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, class UMaterialInterface* SourceMaterial, const struct FName& OptionalName)//offset:0x2EB5CB0;
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UMaterialInterface* Parent)//offset:0x2EB5BE0;
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex)//offset:0x2EB5B40;
	TArray<class UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents()//offset:0x2EB5A30;
	TArray<class AActor*> CopyArrayOfMoveIgnoreActors()//offset:0x2EB59B0;
	void ClearMoveIgnoreComponents()//offset:0x2EB5960;
	void ClearMoveIgnoreActors()//offset:0x2EB5940;
	bool CanCharacterStepUp(class APawn* Pawn)//offset:0x2EB58A0;
	void AddTorqueInRadians(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange)//offset:0x2EB5620;
	void AddTorqueInDegrees(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange)//offset:0x2EB5750;
	void AddTorque(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange)//offset:0x2EB5620;
	void AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange)//offset:0x2EB5440;
	void AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange)//offset:0x2EB5260;
	void AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName)//offset:0x2EB4E60;
	void AddImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange)//offset:0x2EB4D30;
	void AddForceAtLocationLocal(const struct FVector& Force, const struct FVector& Location, const struct FName& BoneName)//offset:0x2EB4BF0;
	void AddForceAtLocation(const struct FVector& Force, const struct FVector& Location, const struct FName& BoneName)//offset:0x2EB4AB0;
	void AddForce(const struct FVector& Force, const struct FName& BoneName, bool bAccelChange)//offset:0x2EB4980;
	void AddAngularImpulseInRadians(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange)//offset:0x2EB4850;
	void AddAngularImpulseInDegrees(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange)//offset:0x2EB4700;
	void AddAngularImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange)//offset:0x2EB45D0;
};


// Class Engine.MeshComponent
// size:0x0030 (0x0450 - 0x0480)
class UMeshComponent : public UPrimitiveComponent
{
public:
	TArray<class UMaterialInterface*>                  OverrideMaterials;                                        // 0x0450(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0460(0x0010) MISSED OFFSET
	unsigned char                                      bEnableMaterialParameterCaching;                          // 0x0470(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0471(0x000F) MISSED OFFSET

	void SetVectorParameterValueOnMaterials(const struct FName& ParameterName, const struct FVector& ParameterValue)//offset:0x2E862C0;
	void SetScalarParameterValueOnMaterials(const struct FName& ParameterName, float ParameterValue)//offset:0x2E86160;
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups)//offset:0x2E85CA0;
	bool IsMaterialSlotNameValid(const struct FName& MaterialSlotName)//offset:0x2E85680;
	TArray<struct FName> GetMaterialSlotNames()//offset:0x2E853D0;
	TArray<class UMaterialInterface*> GetMaterials()//offset:0x2E85450;
	int GetMaterialIndex(const struct FName& MaterialSlotName)//offset:0x2E85330;
};


// Class Engine.SkinnedMeshComponent
// size:0x0230 (0x0480 - 0x06B0)
class USkinnedMeshComponent : public UMeshComponent
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0480(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USkeletalMesh*                               DefaultSkeletalMesh;                                      // 0x0488(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class USkinnedMeshComponent>        MasterPoseComponent;                                      // 0x0490(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<ESkinCacheUsage>                            SkinCacheUsage;                                           // 0x0498(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FVertexOffsetUsage>                  VertexOffsetUsage;                                        // 0x04A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData00[0xF8];                                      // 0x04B8(0x00F8) MISSED OFFSET
	class UPhysicsAsset*                               PhysicsAssetOverride;                                     // 0x05B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                ForcedLodModel;                                           // 0x05B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MinLodModel;                                              // 0x05BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x05C0(0x0008) MISSED OFFSET
	float                                              StreamingDistanceMultiplier;                              // 0x05C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x05CC(0x000C) MISSED OFFSET
	TArray<struct FSkelMeshComponentLODInfo>           LODInfo;                                                  // 0x05D8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0x24];                                      // 0x05E8(0x0024) MISSED OFFSET
	EVisibilityBasedAnimTickOption                     VisibilityBasedAnimTickOption;                            // 0x060C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x060D(0x0001) MISSED OFFSET
	unsigned char                                      bOverrideMinLod;                                          // 0x060E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseBoundsFromMasterPoseComponent;                        // 0x060E(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceWireframe;                                          // 0x060E(0x0001)
	unsigned char                                      bDisplayBones;                                            // 0x060E(0x0001) (Deprecated)
	unsigned char                                      bDisableMorphTarget;                                      // 0x060E(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHideSkin;                                                // 0x060F(0x0001)
	unsigned char                                      bPerBoneMotionBlur;                                       // 0x060F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bComponentUseFixedSkelBounds;                             // 0x060F(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bConsiderAllBodiesForBounds;                              // 0x060F(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSyncAttachParentLOD;                                     // 0x060F(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanHighlightSelectedSections;                            // 0x060F(0x0001) (Transient)
	unsigned char                                      bRecentlyRendered;                                        // 0x060F(0x0001) (Transient)
	unsigned char                                      bCastCapsuleDirectShadow;                                 // 0x060F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastCapsuleIndirectShadow;                               // 0x0610(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCPUSkinning;                                             // 0x0610(0x0001) (Transient)
	unsigned char                                      bEnableUpdateRateOptimizations;                           // 0x0610(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisplayDebugUpdateRateOptimizations;                     // 0x0610(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bRenderStatic;                                            // 0x0610(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIgnoreMasterPoseComponentLOD;                            // 0x0610(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCachedLocalBoundsUpToDate;                               // 0x0611(0x0001) (Transient)
	unsigned char                                      bForceMeshObjectUpdate;                                   // 0x0611(0x0001) (Transient)
	unsigned char                                      UnknownData05[0x2];                                       // 0x0612(0x0002) MISSED OFFSET
	float                                              CapsuleIndirectShadowMinVisibility;                       // 0x0614(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x10];                                      // 0x0618(0x0010) MISSED OFFSET
	struct FBoxSphereBounds                            CachedWorldSpaceBounds;                                   // 0x0628(0x001C) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0xC];                                       // 0x0644(0x000C) MISSED OFFSET
	struct FMatrix                                     CachedWorldToLocalTransform;                              // 0x0650(0x0040) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x20];                                      // 0x0690(0x0020) MISSED OFFSET

	void UnloadSkinWeightProfile(const struct FName& InProfileName)//offset:0x2ED8880;
	void UnHideBoneByName(const struct FName& BoneName)//offset:0x2ED87F0;
	void TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation)//offset:0x2ED8620;
	void TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation)//offset:0x2ED8450;
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex)//offset:0x2ED8300;
	void ShowAllMaterialSections(int LODIndex)//offset:0x2ED8270;
	void SetVertexOffsetUsage(int LODIndex, int Usage)//offset:0x2ED81A0;
	void SetVertexColorOverride_LinearColor(int LODIndex, TArray<struct FLinearColor> VertexColors)//offset:0x2ED80B0;
	bool SetSkinWeightProfile(const struct FName& InProfileName)//offset:0x2ED8010;
	void SetSkinWeightOverride(int LODIndex, TArray<struct FSkelMeshSkinWeightInfo> SkinWeights)//offset:0x2ED7F20;
	void SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bReinitPose)//offset:0x2ED7E50;
	void SetRenderStatic(bool bNewValue)//offset:0x2ED7DC0;
	void SetPreSkinningOffsets(int LODIndex, TArray<struct FVector> Offsets)//offset:0x2ED7C90;
	void SetPostSkinningOffsets(int LODIndex, TArray<struct FVector> Offsets)//offset:0x2ED7B60;
	void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit)//offset:0x2ED7A90;
	void SetMinLOD(int InNewMinLOD)//offset:0x2ED7A00;
	void SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate)//offset:0x2ED7930;
	void SetForcedLOD(int InNewForcedLOD)//offset:0x2ED78A0;
	void SetCastCapsuleIndirectShadow(bool bNewValue)//offset:0x2ED7810;
	void SetCastCapsuleDirectShadow(bool bNewValue)//offset:0x2ED7780;
	void SetCapsuleIndirectShadowMinVisibility(float NewValue)//offset:0x2ED7700;
	bool IsUsingSkinWeightProfile()//offset:0x2ED76D0;
	bool IsMaterialSectionShown(int MaterialID, int LODIndex)//offset:0x2ED7600;
	bool IsBoneHiddenByName(const struct FName& BoneName)//offset:0x2ED7560;
	void HideBoneByName(const struct FName& BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption)//offset:0x2ED7360;
	int GetVertexOffsetUsage(int LODIndex)//offset:0x2ED72C0;
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(const struct FName& BoneName, float* OutTwistAngle, float* OutSwingAngle)//offset:0x2ED71A0;
	struct FName GetSocketBoneName(const struct FName& InSocketName)//offset:0x2ED7060;
	struct FVector GetRefPosePosition(int BoneIndex)//offset:0x2ED6FB0;
	struct FName GetParentBone(const struct FName& BoneName)//offset:0x2ED6F20;
	int GetNumLODs()//offset:0x2ED6EF0;
	int GetNumBones()//offset:0x2ED6EC0;
	int GetForcedLOD()//offset:0x2ED6E90;
	struct FTransform GetDeltaTransformFromRefPose(const struct FName& BoneName, const struct FName& BaseName)//offset:0x2ED6D90;
	struct FName GetCurrentSkinWeightProfileName()//offset:0x2ED6D70;
	struct FName GetBoneName(int BoneIndex)//offset:0x2ED6CE0;
	int GetBoneIndex(const struct FName& BoneName)//offset:0x2ED6C40;
	struct FName FindClosestBone_K2(const struct FVector& TestLocation, struct FVector* BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset)//offset:0x2ED6AA0;
	void ClearVertexColorOverride(int LODIndex)//offset:0x2ED6A10;
	void ClearSkinWeightProfile()//offset:0x2ED69F0;
	void ClearSkinWeightOverride(int LODIndex)//offset:0x2ED6960;
	bool BoneIsChildOf(const struct FName& BoneName, const struct FName& ParentBoneName)//offset:0x2ED6890;
};


// Class Engine.StreamableRenderAsset
// size:0x0038 (0x0028 - 0x0060)
class UStreamableRenderAsset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0028(0x0018) MISSED OFFSET
	double                                             ForceMipLevelsToBeResidentTimestamp;                      // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                NumCinematicMipLevels;                                    // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                StreamingIndex;                                           // 0x004C(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	int                                                CachedCombinedLODBias;                                    // 0x0050(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      NeverStream;                                              // 0x0054(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bGlobalForceMipLevelsToBeResident;                        // 0x0054(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bHasStreamingUpdatePending;                               // 0x0054(0x0001) (Transient)
	unsigned char                                      bForceMiplevelsToBeResident;                              // 0x0054(0x0001) (Transient)
	unsigned char                                      bIgnoreStreamingMipBias;                                  // 0x0054(0x0001) (Transient)
	unsigned char                                      bUseCinematicMipLevels;                                   // 0x0054(0x0001) (Transient)
	unsigned char                                      UnknownData01[0xB];                                       // 0x0055(0x000B) MISSED OFFSET
};


// Class Engine.SkeletalMesh
// size:0x0338 (0x0060 - 0x0398)
class USkeletalMesh : public UStreamableRenderAsset
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0060(0x0020) MISSED OFFSET
	class USkeleton*                                   Skeleton;                                                 // 0x0080(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FBoxSphereBounds                            ImportedBounds;                                           // 0x0088(0x001C) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	struct FBoxSphereBounds                            ExtendedBounds;                                           // 0x00A4(0x001C) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	struct FVector                                     PositiveBoundsExtension;                                  // 0x00C0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     NegativeBoundsExtension;                                  // 0x00CC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FSkeletalMaterial>                   Materials;                                                // 0x00D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FBoneMirrorInfo>                     SkelMirrorTable;                                          // 0x00E8(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TArray<struct FSkeletalMeshLODInfo>                LODInfo;                                                  // 0x00F8(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0108(0x0050) MISSED OFFSET
	struct FPerPlatformInt                             MinLOD;                                                   // 0x0158(0x0004) (Edit)
	struct FPerPlatformBool                            DisableBelowMinLodStripping;                              // 0x015C(0x0001) (Edit)
	TEnumAsByte<EAxis>                                 SkelMirrorAxis;                                           // 0x015D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAxis>                                 SkelMirrorFlipAxis;                                       // 0x015E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseFullPrecisionUVs;                                     // 0x015F(0x0001) (Deprecated)
	unsigned char                                      bUseHighPrecisionTangentBasis;                            // 0x015F(0x0001) (Deprecated)
	unsigned char                                      bHasBeenSimplified;                                       // 0x015F(0x0001)
	unsigned char                                      bHasVertexColors;                                         // 0x015F(0x0001)
	unsigned char                                      bEnablePerPolyCollision;                                  // 0x015F(0x0001) (Edit)
	class UBodySetup*                                  BodySetup;                                                // 0x0160(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UPhysicsAsset*                               PhysicsAsset;                                             // 0x0168(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UPhysicsAsset*                               ShadowPhysicsAsset;                                       // 0x0170(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UNodeMappingContainer*>               NodeMappingData;                                          // 0x0178(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UMorphTarget*>                        MorphTargets;                                             // 0x0188(0x0010) (BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData02[0x178];                                     // 0x0198(0x0178) MISSED OFFSET
	class UAnimInstance*                               PostProcessAnimBlueprint;                                 // 0x0310(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UClothingAssetBase*>                  MeshClothingAssets;                                       // 0x0318(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	struct FSkeletalMeshSamplingInfo                   SamplingInfo;                                             // 0x0328(0x0030) (Edit)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0358(0x0010) (Edit, ExportObject, ZeroConstructor)
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                  // 0x0368(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0378(0x0010) MISSED OFFSET
	TArray<struct FSkinWeightProfileInfo>              SkinWeightProfiles;                                       // 0x0388(0x0010) (Edit, EditFixedSize, ZeroConstructor)

	void SetLODSettings(class USkeletalMeshLODSettings* InLODSettings)//offset:0xF39610;
	void SetDefaultAnimatingRig()//offset:0x2ECD1C0;
	int NumSockets()//offset:0x2ECD190;
	TArray<class FString> K2_GetAllMorphTargetNames()//offset:0x2ECD0B0;
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections)//offset:0x2ECCFE0;
	class USkeletalMeshSocket* GetSocketByIndex(int Index)//offset:0x2ECCF40;
	class UNodeMappingContainer* GetNodeMappingContainer(class UBlueprint* SourceAsset)//offset:0x2ECCEA0;
	struct FBoxSphereBounds GetImportedBounds()//offset:0x2ECCE50;
	void GetDefaultAnimatingRig()//offset:0x2ECCDF0;
	struct FBoxSphereBounds GetBounds()//offset:0x2ECCDA0;
	class USkeletalMeshSocket* FindSocketInfo(const struct FName& InSocketName, struct FTransform* OutTransform, int* OutBoneIndex, int* OutIndex)//offset:0x2ECCBD0;
	class USkeletalMeshSocket* FindSocketAndIndex(const struct FName& InSocketName, int* OutIndex)//offset:0x2ECCAF0;
	class USkeletalMeshSocket* FindSocket(const struct FName& InSocketName)//offset:0x2ECCA50;
};


// Class Engine.Info
// size:0x0000 (0x0220 - 0x0220)
class AInfo : public AActor
{
public:
};


// Class Engine.BlueprintAsyncActionBase
// size:0x0008 (0x0028 - 0x0030)
class UBlueprintAsyncActionBase : public UObject
{
public:

	void Activate()//offset:0x1F582B0;
};


// Class Engine.OnlineBlueprintCallProxyBase
// size:0x0000 (0x0030 - 0x0030)
class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
{
public:
};


// Class Engine.Player
// size:0x0020 (0x0028 - 0x0048)
class UPlayer : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class APlayerController*                           PlayerController;                                         // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CurrentNetSpeed;                                          // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                ConfiguredInternetSpeed;                                  // 0x003C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                ConfiguredLanSpeed;                                       // 0x0040(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
};


// Class Engine.NetConnection
// size:0x1B10 (0x0048 - 0x1B58)
class UNetConnection : public UPlayer
{
public:
	TArray<class UChildConnection*>                    Children;                                                 // 0x0048(0x0010) (ZeroConstructor, Transient)
	class UNetDriver*                                  Driver;                                                   // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)
	class UPackageMap*                                 PackageMapClass;                                          // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
	class UPackageMap*                                 PackageMap;                                               // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UChannel*>                            OpenChannels;                                             // 0x0070(0x0010) (ZeroConstructor)
	TArray<class AActor*>                              SentTemporaries;                                          // 0x0080(0x0010) (ZeroConstructor)
	class AActor*                                      ViewTarget;                                               // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	class AActor*                                      OwningActor;                                              // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                MaxPacket;                                                // 0x00A0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      InternalAck;                                              // 0x00A4(0x0001)
	unsigned char                                      UnknownData00[0xBB];                                      // 0x00A5(0x00BB) MISSED OFFSET
	struct FUniqueNetIdRepl                            PlayerId;                                                 // 0x0160(0x0028)
	unsigned char                                      UnknownData01[0x48];                                      // 0x0188(0x0048) MISSED OFFSET
	double                                             LastReceiveTime;                                          // 0x01D0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1340];                                    // 0x01D8(0x1340) MISSED OFFSET
	TArray<class UChannel*>                            ChannelsToTick;                                           // 0x1518(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x630];                                     // 0x1528(0x0630) MISSED OFFSET
};


// Class Engine.NetDriver
// size:0x0728 (0x0028 - 0x0750)
class UNetDriver : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class FString                                      NetConnectionClassName;                                   // 0x0030(0x0010) (ZeroConstructor, Config)
	class FString                                      ReplicationDriverClassName;                               // 0x0040(0x0010) (ZeroConstructor, Config)
	int                                                MaxDownloadSize;                                          // 0x0050(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bClampListenServerTickRate;                               // 0x0054(0x0001) (Config)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	int                                                NetServerMaxTickRate;                                     // 0x0058(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxNetTickRate;                                           // 0x005C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxInternetClientRate;                                    // 0x0060(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxClientRate;                                            // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ServerTravelPause;                                        // 0x0068(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              SpawnPrioritySeconds;                                     // 0x006C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              RelevantTimeout;                                          // 0x0070(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              KeepAliveTime;                                            // 0x0074(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              InitialConnectTimeout;                                    // 0x0078(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ConnectionTimeout;                                        // 0x007C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              TimeoutMultiplierForUnoptimizedBuilds;                    // 0x0080(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bNoTimeouts;                                              // 0x0084(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bNeverApplyNetworkEmulationSettings;                      // 0x0085(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0086(0x0002) MISSED OFFSET
	class UNetConnection*                              ServerConnection;                                         // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UNetConnection*>                      ClientConnections;                                        // 0x0090(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x60];                                      // 0x00A0(0x0060) MISSED OFFSET
	int                                                RecentlyDisconnectedTrackingTime;                         // 0x0100(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3C];                                      // 0x0104(0x003C) MISSED OFFSET
	class UWorld*                                      World;                                                    // 0x0140(0x0008) (ZeroConstructor, IsPlainOldData)
	class UPackage*                                    WorldPackage;                                             // 0x0148(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x20];                                      // 0x0150(0x0020) MISSED OFFSET
	class UObject*                                     NetConnectionClass;                                       // 0x0170(0x0008) (ZeroConstructor, IsPlainOldData)
	class UObject*                                     ReplicationDriverClass;                                   // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x10];                                      // 0x0180(0x0010) MISSED OFFSET
	struct FName                                       NetDriverName;                                            // 0x0190(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FChannelDefinition>                  ChannelDefinitions;                                       // 0x0198(0x0010) (ZeroConstructor, Config)
	TMap<struct FName, struct FChannelDefinition>      ChannelDefinitionMap;                                     // 0x01A8(0x0050)
	TArray<class UChannel*>                            ActorChannelPool;                                         // 0x01F8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0208(0x0008) MISSED OFFSET
	float                                              Time;                                                     // 0x0210(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4DC];                                     // 0x0214(0x04DC) MISSED OFFSET
	class UReplicationDriver*                          ReplicationDriver;                                        // 0x06F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x58];                                      // 0x06F8(0x0058) MISSED OFFSET
};


// Class Engine.OnlineEngineInterface
// size:0x0000 (0x0028 - 0x0028)
class UOnlineEngineInterface : public UObject
{
public:
};


// Class Engine.OnlineSession
// size:0x0000 (0x0028 - 0x0028)
class UOnlineSession : public UObject
{
public:
};


// Class Engine.DataAsset
// size:0x0008 (0x0028 - 0x0030)
class UDataAsset : public UObject
{
public:
	class UDataAsset*                                  NativeClass;                                              // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.SkeletalMeshComponent
// size:0x0840 (0x06B0 - 0x0EF0)
class USkeletalMeshComponent : public USkinnedMeshComponent
{
public:
	class UObject*                                     AnimBlueprintGeneratedClass;                              // 0x06B0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimInstance*                               AnimClass;                                                // 0x06B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimInstance*                               AnimScriptInstance;                                       // 0x06C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAnimInstance*                               PostProcessAnimInstance;                                  // 0x06C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FSingleAnimationPlayData                    AnimationData;                                            // 0x06D0(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x10];                                      // 0x06E8(0x0010) MISSED OFFSET
	struct FVector                                     RootBoneTranslation;                                      // 0x06F8(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LineCheckBoundsScale;                                     // 0x0704(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0710(0x0030) MISSED OFFSET
	TArray<class UAnimInstance*>                       LinkedInstances;                                          // 0x0740(0x0010) (ZeroConstructor, Transient)
	TArray<struct FTransform>                          CachedBoneSpaceTransforms;                                // 0x0750(0x0010) (ZeroConstructor, Transient)
	TArray<struct FTransform>                          CachedComponentSpaceTransforms;                           // 0x0760(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x150];                                     // 0x0770(0x0150) MISSED OFFSET
	float                                              GlobalAnimRateScale;                                      // 0x08C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EKinematicBonesUpdateToPhysics>        KinematicBonesUpdateType;                                 // 0x08C4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EPhysicsTransformUpdateMode>           PhysicsTransformUpdateMode;                               // 0x08C5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x08C6(0x0001) MISSED OFFSET
	TEnumAsByte<EAnimationMode>                        AnimationMode;                                            // 0x08C7(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x08C8(0x0001) MISSED OFFSET
	unsigned char                                      bDisablePostProcessBlueprint;                             // 0x08C9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUpdateOverlapsOnAnimationFinalize;                       // 0x08C9(0x0001) (Edit)
	unsigned char                                      bHasValidBodies;                                          // 0x08C9(0x0001) (Transient)
	unsigned char                                      bBlendPhysics;                                            // 0x08C9(0x0001) (Transient)
	unsigned char                                      bEnablePhysicsOnDedicatedServer;                          // 0x08C9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUpdateJointsFromAnimation;                               // 0x08C9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableClothSimulation;                                  // 0x08CA(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData05[0x5];                                       // 0x08CB(0x0005) MISSED OFFSET
	unsigned char                                      bDisableRigidBodyAnimNode;                                // 0x08D0(0x0001) (Edit)
	unsigned char                                      bAllowAnimCurveEvaluation;                                // 0x08D0(0x0001) (Edit)
	unsigned char                                      bDisableAnimCurves;                                       // 0x08D0(0x0001) (Deprecated)
	unsigned char                                      bCollideWithEnvironment;                                  // 0x08D0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCollideWithAttachedChildren;                             // 0x08D1(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bLocalSpaceSimulation;                                    // 0x08D1(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bResetAfterTeleport;                                      // 0x08D1(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDeferKinematicBoneUpdate;                                // 0x08D1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bNoSkeletonUpdate;                                        // 0x08D1(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPauseAnims;                                              // 0x08D1(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseRefPoseOnInitAnim;                                    // 0x08D1(0x0001) (Edit)
	unsigned char                                      bEnablePerPolyCollision;                                  // 0x08D2(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForceRefpose;                                            // 0x08D2(0x0001)
	unsigned char                                      bOnlyAllowAutonomousTickPose;                             // 0x08D2(0x0001) (Transient)
	unsigned char                                      bIsAutonomousTickPose;                                    // 0x08D2(0x0001) (Transient)
	unsigned char                                      bOldForceRefPose;                                         // 0x08D2(0x0001)
	unsigned char                                      bShowPrePhysBones;                                        // 0x08D2(0x0001)
	unsigned char                                      bRequiredBonesUpToDate;                                   // 0x08D2(0x0001) (Transient)
	unsigned char                                      bAnimTreeInitialised;                                     // 0x08D2(0x0001) (Transient)
	unsigned char                                      bIncludeComponentLocationIntoBounds;                      // 0x08D3(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableLineCheckWithBounds;                               // 0x08D3(0x0001)
	unsigned char                                      bUseBendingElements;                                      // 0x08D3(0x0001) (Deprecated)
	unsigned char                                      bUseTetrahedralConstraints;                               // 0x08D3(0x0001) (Deprecated)
	unsigned char                                      bUseThinShellVolumeConstraints;                           // 0x08D3(0x0001) (Deprecated)
	unsigned char                                      bUseSelfCollisions;                                       // 0x08D3(0x0001) (Deprecated)
	unsigned char                                      bUseContinuousCollisionDetection;                         // 0x08D3(0x0001) (Deprecated)
	unsigned char                                      bPropagateCurvesToSlaves;                                 // 0x08D3(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSkipKinematicUpdateWhenInterpolating;                    // 0x08D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSkipBoundsUpdateWhenInterpolating;                       // 0x08D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNeedsQueuedAnimEventsDispatched;                         // 0x08D4(0x0001) (Transient)
	unsigned char                                      UnknownData06[0x1];                                       // 0x08D5(0x0001) MISSED OFFSET
	uint16_t                                           CachedAnimCurveUidVersion;                                // 0x08D6(0x0002) (ZeroConstructor, Transient, IsPlainOldData)
	EClothMassMode                                     MassMode;                                                 // 0x08D8(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x08D9(0x0003) MISSED OFFSET
	float                                              UniformMass;                                              // 0x08DC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              TotalMass;                                                // 0x08E0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              Density;                                                  // 0x08E4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              MinPerParticleMass;                                       // 0x08E8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              ClothBlendWeight;                                         // 0x08EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EdgeStiffness;                                            // 0x08F0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              BendingStiffness;                                         // 0x08F4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              AreaStiffness;                                            // 0x08F8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              VolumeStiffness;                                          // 0x08FC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              StrainLimitingStiffness;                                  // 0x0900(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              ShapeTargetStiffness;                                     // 0x0904(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               bWaitForParallelClothTask;                                // 0x0908(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x7];                                       // 0x0909(0x0007) MISSED OFFSET
	TArray<struct FName>                               DisallowedAnimCurves;                                     // 0x0910(0x0010) (ZeroConstructor, Transient)
	class UBodySetup*                                  BodySetup;                                                // 0x0920(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0928(0x0008) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnConstraintBroken;                                       // 0x0930(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UClothingSimulationFactory*                  ClothingSimulationFactory;                                // 0x0940(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0xD0];                                      // 0x0948(0x00D0) MISSED OFFSET
	float                                              TeleportDistanceThreshold;                                // 0x0A18(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TeleportRotationThreshold;                                // 0x0A1C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0A20(0x0008) MISSED OFFSET
	uint32_t                                           LastPoseTickFrame;                                        // 0x0A28(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x54];                                      // 0x0A2C(0x0054) MISSED OFFSET
	class UClothingSimulationInteractor*               ClothingInteractor;                                       // 0x0A80(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData13[0xC8];                                      // 0x0A88(0x00C8) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnAnimInitialized;                                        // 0x0B50(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData14[0x390];                                     // 0x0B60(0x0390) MISSED OFFSET

	void UnlinkAnimClassLayers(class UAnimInstance* InClass)//offset:0x2ED2F50;
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace)//offset:0x2ED2EC0;
	void ToggleDisablePostProcessBlueprint()//offset:0x2ED2EA0;
	void TermBodiesBelow(const struct FName& ParentBoneName)//offset:0x2ED2E10;
	void SuspendClothingSimulation()//offset:0x2ED2DF0;
	void Stop()//offset:0x2ED2DD0;
	void SnapshotPose(struct FPoseSnapshot* Snapshot)//offset:0x2ED2D00;
	void SetUpdateClothInEditor(bool NewUpdateState)//offset:0xF1FA70;
	void SetUpdateAnimationInEditor(bool NewUpdateState)//offset:0xF1FA70;
	void SetTeleportRotationThreshold(float Threshold)//offset:0x2ED2C80;
	void SetTeleportDistanceThreshold(float Threshold)//offset:0x2ED2C00;
	void SetPosition(float InPos, bool bFireNotifies)//offset:0x2ED2B20;
	void SetPlayRate(float Rate)//offset:0x2ED2AA0;
	void SetPhysicsBlendWeight(float PhysicsBlendWeight)//offset:0x2ED2A20;
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName, bool bIncludeSelf)//offset:0x2ED2900;
	void SetMorphTarget(const struct FName& MorphTargetName, float Value, bool bRemoveZeroWeight)//offset:0x2ED27E0;
	void SetEnablePhysicsBlending(bool bNewBlendPhysics)//offset:0x2ED2750;
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, const struct FName& BoneName, bool bIncludeSelf)//offset:0x2ED2640;
	void SetEnableBodyGravity(bool bEnableGravity, const struct FName& BoneName)//offset:0x2ED2570;
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess)//offset:0x2ED24E0;
	void SetDisableAnimCurves(bool bInDisableAnimCurves)//offset:0x2ED2450;
	void SetConstraintProfileForAll(const struct FName& ProfileName, bool bDefaultIfNotFound)//offset:0x2ED2380;
	void SetConstraintProfile(const struct FName& JointName, const struct FName& ProfileName, bool bDefaultIfNotFound)//offset:0x2ED2270;
	void SetClothMaxDistanceScale(float Scale)//offset:0x2ED21F0;
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName)//offset:0x2ED2120;
	void SetAnimClass(class UObject* NewClass)//offset:0x2ED1F80;
	void SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode)//offset:0x2ED20A0;
	void SetAnimation(class UAnimationAsset* NewAnimToPlay)//offset:0x2ED2010;
	void SetAngularLimits(const struct FName& InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle)//offset:0x2ED1E20;
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim)//offset:0x2ED1C50;
	void SetAllowedAnimCurvesEvaluation(TArray<struct FName> List, bool bAllow)//offset:0x2ED1D20;
	void SetAllowAnimCurveEvaluation(bool bInAllow)//offset:0x2ED1BC0;
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType)//offset:0x2ED1A90;
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType)//offset:0x2ED1960;
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType)//offset:0x2ED17F0;
	void SetAllBodiesSimulatePhysics(bool bNewSimulate)//offset:0x2ED1760;
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType)//offset:0x2ED1680;
	void SetAllBodiesBelowSimulatePhysics(const struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf)//offset:0x2ED1550;
	void SetAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf)//offset:0x2ED13D0;
	void ResumeClothingSimulation()//offset:0x2ED13B0;
	void ResetClothTeleportMode()//offset:0x2ED1390;
	void ResetAnimInstanceDynamics(ETeleportType InTeleportType)//offset:0x2ED1310;
	void ResetAllowedAnimCurveEvaluation()//offset:0x2ED12F0;
	void ResetAllBodiesSimulatePhysics()//offset:0x2ED12D0;
	void PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping)//offset:0x2ED1200;
	void Play(bool bLooping)//offset:0x2ED1170;
	void OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate)//offset:0x2ED0FB0;
	void LinkAnimGraphByTag(const struct FName& InTag, class UAnimInstance* InClass)//offset:0x2ED0EE0;
	void LinkAnimClassLayers(class UAnimInstance* InClass)//offset:0x2ED0E50;
	bool K2_GetClosestPointOnPhysicsAsset(const struct FVector& WorldPosition, struct FVector* ClosestWorldPosition, struct FVector* Normal, struct FName* BoneName, float* Distance)//offset:0x2ED0C50;
	bool IsPlaying()//offset:0x2ED0C20;
	bool IsClothingSimulationSuspended()//offset:0x2ED0BF0;
	bool IsBodyGravityEnabled(const struct FName& BoneName)//offset:0x2ED0B50;
	bool HasValidAnimationInstance()//offset:0x2ED0B20;
	float GetTeleportRotationThreshold()//offset:0x2ED0AF0;
	float GetTeleportDistanceThreshold()//offset:0x2ED0AF0;
	bool GetStringAttribute_Ref(const struct FName& BoneName, const struct FName& AttributeName, class FString* OutValue, ECustomBoneAttributeLookup LookupType)//offset:0x2ED0930;
	bool GetStringAttribute(const struct FName& BoneName, const struct FName& AttributeName, const class FString& DefaultValue, class FString* OutValue, ECustomBoneAttributeLookup LookupType)//offset:0x2ED0700;
	struct FVector GetSkeletalCenterOfMass()//offset:0x2ED06C0;
	class UAnimInstance* GetPostProcessInstance()//offset:0x2ED0690;
	float GetPosition()//offset:0x2ED0660;
	float GetPlayRate()//offset:0x2ED0630;
	float GetMorphTarget(const struct FName& MorphTargetName)//offset:0x2ED0590;
	class UAnimInstance* GetLinkedAnimLayerInstanceByGroup(const struct FName& InGroup)//offset:0x2ED04F0;
	class UAnimInstance* GetLinkedAnimLayerInstanceByClass(class UAnimInstance* InClass)//offset:0x2ED0450;
	void GetLinkedAnimGraphInstancesByTag(const struct FName& InTag, TArray<class UAnimInstance*>* OutLinkedInstances)//offset:0x2ED0360;
	class UAnimInstance* GetLinkedAnimGraphInstanceByTag(const struct FName& InTag)//offset:0x2ED02C0;
	bool GetIntegerAttribute_Ref(const struct FName& BoneName, const struct FName& AttributeName, int* OutValue, ECustomBoneAttributeLookup LookupType)//offset:0x2ED0120;
	bool GetIntegerAttribute(const struct FName& BoneName, const struct FName& AttributeName, int DefaultValue, int* OutValue, ECustomBoneAttributeLookup LookupType)//offset:0x2ECFF30;
	bool GetFloatAttribute_Ref(const struct FName& BoneName, const struct FName& AttributeName, float* OutValue, ECustomBoneAttributeLookup LookupType)//offset:0x2ECFD80;
	bool GetFloatAttribute(const struct FName& BoneName, const struct FName& AttributeName, float DefaultValue, float* OutValue, ECustomBoneAttributeLookup LookupType)//offset:0x2ECFB90;
	bool GetDisablePostProcessBlueprint()//offset:0x2ECFB60;
	bool GetDisableAnimCurves()//offset:0x2ECFB30;
	void GetCurrentJointAngles(const struct FName& InBoneName, float* Swing1Angle, float* TwistAngle, float* Swing2Angle)//offset:0x2ECF9B0;
	float GetClothMaxDistanceScale()//offset:0x2ECF950;
	class UClothingSimulationInteractor* GetClothingSimulationInteractor()//offset:0x2ECF980;
	float GetBoneMass(const struct FName& BoneName, bool bScaleMass)//offset:0x2ECF880;
	class UAnimInstance* GetAnimInstance()//offset:0x2ECF820;
	class UObject* GetAnimClass()//offset:0x2ECF7F0;
	TEnumAsByte<EAnimationMode> GetAnimationMode()//offset:0x2ECF850;
	bool GetAllowRigidBodyAnimNode()//offset:0x2ECF790;
	bool GetAllowedAnimCurveEvaluate()//offset:0x2ECF7C0;
	void ForceClothNextUpdateTeleportAndReset()//offset:0x2ECF770;
	void ForceClothNextUpdateTeleport()//offset:0x2ECF750;
	struct FName FindConstraintBoneName(int ConstraintIndex)//offset:0x2ECF6C0;
	void ClearMorphTargets()//offset:0x2ECF6A0;
	void BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, const struct FName& InBoneName)//offset:0x2ECF570;
	void BindClothToMasterPoseComponent()//offset:0x2ECF550;
	void AllowAnimCurveEvaluation(const struct FName& NameOfCurve, bool bAllow)//offset:0x2ECF480;
	void AddImpulseToAllBodiesBelow(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange, bool bIncludeSelf)//offset:0x2ECF300;
	void AddForceToAllBodiesBelow(const struct FVector& Force, const struct FName& BoneName, bool bAccelChange, bool bIncludeSelf)//offset:0x2ECF180;
	void AccumulateAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType)//offset:0x2ECF060;
};


// Class Engine.AnimInstance
// size:0x0298 (0x0028 - 0x02C0)
class UAnimInstance : public UObject
{
public:
	class USkeleton*                                   CurrentSkeleton;                                          // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<ERootMotionMode>                       RootMotionMode;                                           // 0x0030(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bUseMultiThreadedAnimationUpdate;                         // 0x0031(0x0001)
	unsigned char                                      bUsingCopyPoseFromMesh;                                   // 0x0031(0x0001)
	unsigned char                                      bReceiveNotifiesFromLinkedInstances;                      // 0x0031(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bPropagateNotifiesToLinkedInstances;                      // 0x0031(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bQueueMontageEvents;                                      // 0x0031(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0032(0x0006) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnMontageBlendingOut;                                     // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnMontageStarted;                                         // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnMontageEnded;                                           // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnAllMontageInstancesEnded;                               // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x88];                                      // 0x0078(0x0088) MISSED OFFSET
	struct FAnimNotifyQueue                            NotifyQueue;                                              // 0x0100(0x0070) (Transient)
	TArray<struct FAnimNotifyEvent>                    ActiveAnimNotifyState;                                    // 0x0170(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x140];                                     // 0x0180(0x0140) MISSED OFFSET

	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic)//offset:0x2D93AC0;
	void UnlinkAnimClassLayers(class UAnimInstance* InClass)//offset:0x2D93A30;
	class APawn* TryGetPawnOwner()//offset:0x2D93A00;
	void StopSlotAnimation(float InBlendOutTime, const struct FName& SlotNodeName)//offset:0x2D93930;
	void SnapshotPose(struct FPoseSnapshot* Snapshot)//offset:0x2D93860;
	void SetRootMotionMode(TEnumAsByte<ERootMotionMode> Value)//offset:0x2D87690;
	void SetReceiveNotifiesFromLinkedInstances(bool bSet)//offset:0x2D937D0;
	void SetPropagateNotifiesToLinkedInstances(bool bSet)//offset:0x2D93740;
	void SetMorphTarget(const struct FName& MorphTargetName, float Value)//offset:0x2D93670;
	void SavePoseSnapshot(const struct FName& SnapshotName)//offset:0x2D935E0;
	void ResetDynamics(ETeleportType InTeleportType)//offset:0x2D93560;
	class UAnimMontage* PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt)//offset:0x2D93300;
	float PlaySlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount)//offset:0x2D93130;
	void Montage_StopGroupByName(float InBlendOutTime, const struct FName& GroupName)//offset:0x2D93060;
	void Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage)//offset:0x2D92F90;
	void Montage_SetPosition(class UAnimMontage* Montage, float NewPosition)//offset:0x2D92EC0;
	void Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate)//offset:0x2D92DF0;
	void Montage_SetNextSection(const struct FName& SectionNameToChange, const struct FName& NextSection, class UAnimMontage* Montage)//offset:0x2D92CE0;
	void Montage_Resume(class UAnimMontage* Montage)//offset:0x2D92C50;
	float Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages)//offset:0x2D92AA0;
	void Montage_Pause(class UAnimMontage* Montage)//offset:0x2D92A10;
	void Montage_JumpToSectionsEnd(const struct FName& SectionName, class UAnimMontage* Montage)//offset:0x2D92940;
	void Montage_JumpToSection(const struct FName& SectionName, class UAnimMontage* Montage)//offset:0x2D92870;
	bool Montage_IsPlaying(class UAnimMontage* Montage)//offset:0x2D927D0;
	bool Montage_IsActive(class UAnimMontage* Montage)//offset:0x2D92730;
	float Montage_GetPosition(class UAnimMontage* Montage)//offset:0x2D92690;
	float Montage_GetPlayRate(class UAnimMontage* Montage)//offset:0x2D925F0;
	bool Montage_GetIsStopped(class UAnimMontage* Montage)//offset:0x2D92550;
	struct FName Montage_GetCurrentSection(class UAnimMontage* Montage)//offset:0x2D924C0;
	float Montage_GetBlendTime(class UAnimMontage* Montage)//offset:0x2D92420;
	void LockAIResources(bool bLockMovement, bool LockAILogic)//offset:0x2D92350;
	void LinkAnimGraphByTag(const struct FName& InTag, class UAnimInstance* InClass)//offset:0x2D92280;
	void LinkAnimClassLayers(class UAnimInstance* InClass)//offset:0x2D921F0;
	bool IsSyncGroupBetweenMarkers(const struct FName& InSyncGroupName, const struct FName& PreviousMarker, const struct FName& NextMarker, bool bRespectMarkerOrder)//offset:0x2D92090;
	bool IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName)//offset:0x2D91FC0;
	bool IsAnyMontagePlaying()//offset:0x2D91F90;
	bool HasMarkerBeenHitThisFrame(const struct FName& SyncGroup, const struct FName& MarkerName)//offset:0x2D91EC0;
	bool GetTimeToClosestMarker(const struct FName& SyncGroup, const struct FName& MarkerName, float* OutMarkerTime)//offset:0x2D91DA0;
	struct FMarkerSyncAnimPosition GetSyncGroupPosition(const struct FName& InSyncGroupName)//offset:0x2D91CF0;
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex)//offset:0x2D91C20;
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex)//offset:0x2D91B50;
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex)//offset:0x2D91A80;
	float GetRelevantAnimTime(int MachineIndex, int StateIndex)//offset:0x2D919B0;
	float GetRelevantAnimLength(int MachineIndex, int StateIndex)//offset:0x2D918E0;
	bool GetReceiveNotifiesFromLinkedInstances()//offset:0x2D918B0;
	bool GetPropagateNotifiesToLinkedInstances()//offset:0x2D91880;
	class USkeletalMeshComponent* GetOwningComponent()//offset:0x2D91850;
	class AActor* GetOwningActor()//offset:0x2D91820;
	void GetLinkedAnimLayerInstancesByGroup(const struct FName& InGroup, TArray<class UAnimInstance*>* OutLinkedInstances)//offset:0x2D91730;
	class UAnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(const struct FName& InGroup, class UAnimInstance* InClass)//offset:0x2D91660;
	class UAnimInstance* GetLinkedAnimLayerInstanceByGroup(const struct FName& InGroup)//offset:0x2D915C0;
	class UAnimInstance* GetLinkedAnimLayerInstanceByClass(class UAnimInstance* InClass)//offset:0x2D91520;
	void GetLinkedAnimGraphInstancesByTag(const struct FName& InTag, TArray<class UAnimInstance*>* OutLinkedInstances)//offset:0x2D91430;
	class UAnimInstance* GetLinkedAnimGraphInstanceByTag(const struct FName& InTag)//offset:0x2D91390;
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex)//offset:0x2D912C0;
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex)//offset:0x2D911F0;
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex)//offset:0x2D91120;
	float GetInstanceStateWeight(int MachineIndex, int StateIndex)//offset:0x2D91050;
	float GetInstanceMachineWeight(int MachineIndex)//offset:0x2D90FB0;
	float GetInstanceCurrentStateElapsedTime(int MachineIndex)//offset:0x2D90F10;
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex)//offset:0x2D90E70;
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex)//offset:0x2D90DD0;
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex)//offset:0x2D90D30;
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex)//offset:0x2D90C90;
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex)//offset:0x2D90BF0;
	float GetCurveValue(const struct FName& CurveName)//offset:0x2D90B50;
	struct FName GetCurrentStateName(int MachineIndex)//offset:0x2D90AC0;
	class UAnimMontage* GetCurrentActiveMontage()//offset:0x2D90A90;
	void GetAllCurveNames(TArray<struct FName>* OutNames)//offset:0x2D909E0;
	void GetActiveCurveNames(EAnimCurveType CurveType, TArray<struct FName>* OutNames)//offset:0x2D908F0;
	void ClearMorphTargets()//offset:0x2D908D0;
	float CalculateDirection(const struct FVector& Velocity, const struct FRotator& BaseRotation)//offset:0x2D907D0;
	void BlueprintUpdateAnimation(float DeltaTimeX)//offset:0x13CEB30;
	void BlueprintPostEvaluateAnimation()//offset:0x13CEB30;
	void BlueprintLinkedAnimationLayersInitialized()//offset:0x13CEB30;
	void BlueprintInitializeAnimation()//offset:0x13CEB30;
	void BlueprintBeginPlay()//offset:0x13CEB30;
};


// Class Engine.FXSystemComponent
// size:0x0000 (0x0450 - 0x0450)
class UFXSystemComponent : public UPrimitiveComponent
{
public:

	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)//offset:0x2E99810;
	void SetUseAutoManageAttachment(bool bAutoManage)//offset:0x2E99780;
	void SetIntParameter(const struct FName& ParameterName, int Param)//offset:0x2E993F0;
	void SetFloatParameter(const struct FName& ParameterName, float Param)//offset:0x2E99310;
	void SetEmitterEnable(const struct FName& EmitterName, bool bNewEnableState)//offset:0x2E99240;
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param)//offset:0x2E99160;
	void SetBoolParameter(const struct FName& ParameterName, bool Param)//offset:0x2E99090;
	void SetAutoAttachmentParameters(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule)//offset:0x2E98770;
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param)//offset:0x2E98570;
	void ReleaseToPool()//offset:0x2E98550;
	class UFXSystemAsset* GetFXSystemAsset()//offset:0x2E98450;
};


// Class Engine.FXSystemAsset
// size:0x0008 (0x0028 - 0x0030)
class UFXSystemAsset : public UObject
{
public:
	uint32_t                                           MaxPoolSize;                                              // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           PoolPrimeSize;                                            // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.AnimNotify
// size:0x0010 (0x0028 - 0x0038)
class UAnimNotify : public UObject
{
public:

	bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation)//offset:0x13CEB30;
	class FString GetNotifyName()//offset:0x25F5C50;
};


// Class Engine.AnimNotifyState
// size:0x0008 (0x0028 - 0x0030)
class UAnimNotifyState : public UObject
{
public:

	bool Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime)//offset:0x13CEB30;
	bool Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation)//offset:0x13CEB30;
	bool Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration)//offset:0x13CEB30;
	class FString GetNotifyName()//offset:0x25F5C50;
};


// Class Engine.SaveGame
// size:0x0000 (0x0028 - 0x0028)
class USaveGame : public UObject
{
public:
};


// Class Engine.GameModeBase
// size:0x00A0 (0x0220 - 0x02C0)
class AGameModeBase : public AInfo
{
public:
	class FString                                      OptionsString;                                            // 0x0220(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class AGameSession*                                GameSessionClass;                                         // 0x0230(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AGameStateBase*                              GameStateClass;                                           // 0x0238(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class APlayerController*                           PlayerControllerClass;                                    // 0x0240(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class APlayerState*                                PlayerStateClass;                                         // 0x0248(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class AHUD*                                        HUDClass;                                                 // 0x0250(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class APawn*                                       DefaultPawnClass;                                         // 0x0258(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ASpectatorPawn*                              SpectatorClass;                                           // 0x0260(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class APlayerController*                           ReplaySpectatorPlayerControllerClass;                     // 0x0268(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class AServerStatReplicator*                       ServerStatReplicatorClass;                                // 0x0270(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class AGameSession*                                GameSession;                                              // 0x0278(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AGameStateBase*                              GameState;                                                // 0x0280(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AServerStatReplicator*                       ServerStatReplicator;                                     // 0x0288(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FText                                       DefaultPlayerName;                                        // 0x0290(0x0028) (Edit)
	unsigned char                                      bUseSeamlessTravel;                                       // 0x02A8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bStartPlayersAsSpectators;                                // 0x02A8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bPauseable;                                               // 0x02A8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x17];                                      // 0x02A9(0x0017) MISSED OFFSET

	void StartPlay()//offset:0x939390;
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot)//offset:0x2DF1620;
	class APawn* SpawnDefaultPawnAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform)//offset:0x2DF1500;
	bool ShouldReset(class AActor* ActorToReset)//offset:0x2DF0FD0;
	void ReturnToMainMenuHost()//offset:0x8A1790;
	void RestartPlayerAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform)//offset:0x2DEFDF0;
	void RestartPlayerAtPlayerStart(class AController* NewPlayer, class AActor* StartSpot)//offset:0x2DEFD20;
	void RestartPlayer(class AController* NewPlayer)//offset:0xF548A0;
	void ResetLevel()//offset:0x2DEFCE0;
	bool PlayerCanRestart(class APlayerController* Player)//offset:0x2DEF5E0;
	bool MustSpectate(class APlayerController* NewPlayerController)//offset:0x2DEE390;
	void K2_PostLogin(class APlayerController* NewPlayer)//offset:0x13CEB30;
	void K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC)//offset:0x13CEB30;
	void K2_OnRestartPlayer(class AController* NewPlayer)//offset:0x13CEB30;
	void K2_OnLogout(class AController* ExitingController)//offset:0x13CEB30;
	void K2_OnChangeName(class AController* Other, const class FString& NewName, bool bNameChange)//offset:0x13CEB30;
	class AActor* K2_FindPlayerStart(class AController* Player, const class FString& IncomingName)//offset:0x2DED850;
	void InitStartSpot(class AActor* StartSpot, class AController* NewPlayer)//offset:0x2DED630;
	void InitializeHUDForPlayer(class APlayerController* NewPlayer)//offset:0x2DD7BC0;
	bool HasMatchStarted()//offset:0x2DCB350;
	bool HasMatchEnded()//offset:0x2DED4C0;
	void HandleStartingNewPlayer(class APlayerController* NewPlayer)//offset:0x2DED390;
	int GetNumSpectators()//offset:0x2DEC420;
	int GetNumPlayers()//offset:0x2DEC3F0;
	class UObject* GetDefaultPawnClassForController(class AController* InController)//offset:0x2DEBD30;
	class AActor* FindPlayerStart(class AController* Player, const class FString& IncomingName)//offset:0x2DEAD80;
	class AActor* ChoosePlayerStart(class AController* Player)//offset:0x2DEA110;
	void ChangeName(class AController* Controller, const class FString& NewName, bool bNameChange)//offset:0x2DE9FE0;
	bool CanSpectate(class APlayerController* Viewer, class APlayerState* ViewTarget)//offset:0x2DE9EF0;
};


// Class Engine.GameMode
// size:0x0048 (0x02C0 - 0x0308)
class AGameMode : public AGameModeBase
{
public:
	struct FName                                       MatchState;                                               // 0x02C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bDelayedStart;                                            // 0x02C8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02C9(0x0003) MISSED OFFSET
	int                                                NumSpectators;                                            // 0x02CC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                NumPlayers;                                               // 0x02D0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                NumBots;                                                  // 0x02D4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinRespawnDelay;                                          // 0x02D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                NumTravellingPlayers;                                     // 0x02DC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ULocalMessage*                               EngineMessageClass;                                       // 0x02E0(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class APlayerState*>                        InactivePlayerArray;                                      // 0x02E8(0x0010) (ZeroConstructor)
	float                                              InactivePlayerStateLifeSpan;                              // 0x02F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxInactivePlayers;                                       // 0x02FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHandleDedicatedServerReplays;                            // 0x0300(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0301(0x0007) MISSED OFFSET

	void StartMatch()//offset:0x2DF3640;
	void SetBandwidthLimit(float AsyncIOBandwidthLimit)//offset:0x2DF00D0;
	void Say(const class FString& Msg)//offset:0x2DF0030;
	void RestartGame()//offset:0x2DEFD00;
	bool ReadyToStartMatch()//offset:0x2DEFA10;
	bool ReadyToEndMatch()//offset:0x2DEF9E0;
	void K2_OnSetMatchState(const struct FName& NewState)//offset:0x13CEB30;
	bool IsMatchInProgress()//offset:0x2DED790;
	struct FName GetMatchState()//offset:0x2DEC340;
	void EndMatch()//offset:0x2DEABE0;
	void AbortMatch()//offset:0x2DE7400;
};


// Class Engine.GameStateBase
// size:0x0050 (0x0220 - 0x0270)
class AGameStateBase : public AInfo
{
public:
	class AGameModeBase*                               GameModeClass;                                            // 0x0220(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	class AGameModeBase*                               AuthorityGameMode;                                        // 0x0228(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class ASpectatorPawn*                              SpectatorClass;                                           // 0x0230(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	TArray<class APlayerState*>                        PlayerArray;                                              // 0x0238(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	bool                                               bReplicatedHasBegunPlay;                                  // 0x0248(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0249(0x0003) MISSED OFFSET
	float                                              ReplicatedWorldTimeSeconds;                               // 0x024C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerWorldTimeSecondsDelta;                              // 0x0250(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerWorldTimeSecondsUpdateFrequency;                    // 0x0254(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0258(0x0018) MISSED OFFSET

	void OnRep_SpectatorClass()//offset:0x2DCB5E0;
	void OnRep_ReplicatedWorldTimeSeconds()//offset:0x939390;
	void OnRep_ReplicatedHasBegunPlay()//offset:0x8A1770;
	void OnRep_GameModeClass()//offset:0x2DCB5C0;
	bool HasMatchStarted()//offset:0x2DF65E0;
	bool HasMatchEnded()//offset:0xF44610;
	bool HasBegunPlay()//offset:0x2DF65B0;
	float GetServerWorldTimeSeconds()//offset:0x2DF6450;
	float GetPlayerStartTime(class AController* Controller)//offset:0x2DF5F60;
	float GetPlayerRespawnDelay(class AController* Controller)//offset:0x2DF5EC0;
};


// Class Engine.GameState
// size:0x0020 (0x0270 - 0x0290)
class AGameState : public AGameStateBase
{
public:
	struct FName                                       MatchState;                                               // 0x0270(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FName                                       PreviousMatchState;                                       // 0x0278(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                ElapsedTime;                                              // 0x0280(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0284(0x000C) MISSED OFFSET

	void OnRep_MatchState()//offset:0x2DF67F0;
	void OnRep_ElapsedTime()//offset:0x2DEFCE0;
};


// Class Engine.Controller
// size:0x0078 (0x0220 - 0x0298)
class AController : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0220(0x0008) MISSED OFFSET
	class APlayerState*                                PlayerState;                                              // 0x0228(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0230(0x0008) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnInstigatedAnyDamage;                                    // 0x0238(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FName                                       StateName;                                                // 0x0248(0x0008) (ZeroConstructor, IsPlainOldData)
	class APawn*                                       Pawn;                                                     // 0x0250(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0258(0x0008) MISSED OFFSET
	class ACharacter*                                  Character;                                                // 0x0260(0x0008) (ZeroConstructor, IsPlainOldData)
	class USceneComponent*                             TransformComponent;                                       // 0x0268(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0270(0x0018) MISSED OFFSET
	struct FRotator                                    ControlRotation;                                          // 0x0288(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAttachToPawn;                                            // 0x0294(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0295(0x0003) MISSED OFFSET

	void UnPossess()//offset:0x2DCB990;
	void StopMovement()//offset:0x2DC3AC0;
	void SetInitialLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation)//offset:0x2DCB8A0;
	void SetIgnoreMoveInput(bool bNewMoveInput)//offset:0x2DCB810;
	void SetIgnoreLookInput(bool bNewLookInput)//offset:0x2DCB780;
	void SetControlRotation(const struct FRotator& NewRotation)//offset:0x2DCB6F0;
	void ResetIgnoreMoveInput()//offset:0x2DCB6D0;
	void ResetIgnoreLookInput()//offset:0x2DCB6B0;
	void ResetIgnoreInputFlags()//offset:0x2DCB690;
	void ReceiveUnPossess(class APawn* UnpossessedPawn)//offset:0x13CEB30;
	void ReceivePossess(class APawn* PossessedPawn)//offset:0x13CEB30;
	void ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser)//offset:0x13CEB30;
	void Possess(class APawn* InPawn)//offset:0x2DCB600;
	void OnRep_PlayerState()//offset:0x2DCB5E0;
	void OnRep_Pawn()//offset:0x2DCB5C0;
	bool LineOfSightTo(class AActor* Other, const struct FVector& ViewPoint, bool bAlternateChecks)//offset:0x2DCB490;
	class APawn* K2_GetPawn()//offset:0x2DCB460;
	bool IsPlayerController()//offset:0x2DCB430;
	bool IsMoveInputIgnored()//offset:0x2DCB400;
	bool IsLookInputIgnored()//offset:0x2DCB3D0;
	bool IsLocalPlayerController()//offset:0x2DCB380;
	bool IsLocalController()//offset:0x2DCB350;
	class AActor* GetViewTarget()//offset:0x2DCB320;
	struct FRotator GetDesiredRotation()//offset:0x2DCB080;
	struct FRotator GetControlRotation()//offset:0x2DCB040;
	void ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera)//offset:0x2DCAF10;
	void ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation)//offset:0x2DCADD0;
	class APlayerController* CastToPlayerController()//offset:0x2DCADA0;
};


// Class Engine.PlayerController
// size:0x02D8 (0x0298 - 0x0570)
class APlayerController : public AController
{
public:
	class UPlayer*                                     Player;                                                   // 0x0298(0x0008) (ZeroConstructor, IsPlainOldData)
	class APawn*                                       AcknowledgedPawn;                                         // 0x02A0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                                  // 0x02A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AHUD*                                        MyHUD;                                                    // 0x02B0(0x0008) (ZeroConstructor, IsPlainOldData)
	class APlayerCameraManager*                        PlayerCameraManager;                                      // 0x02B8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class APlayerCameraManager*                        PlayerCameraManagerClass;                                 // 0x02C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoManageActiveCameraTarget;                            // 0x02C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02C9(0x0003) MISSED OFFSET
	struct FRotator                                    TargetViewRotation;                                       // 0x02CC(0x000C) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x02D8(0x000C) MISSED OFFSET
	float                                              SmoothTargetViewRotationSpeed;                            // 0x02E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x02E8(0x0008) MISSED OFFSET
	TArray<class AActor*>                              HiddenActors;                                             // 0x02F0(0x0010) (ZeroConstructor)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>>  HiddenPrimitiveComponents;                                // 0x0300(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0310(0x0004) MISSED OFFSET
	float                                              LastSpectatorStateSynchTime;                              // 0x0314(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     LastSpectatorSyncLocation;                                // 0x0318(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    LastSpectatorSyncRotation;                                // 0x0324(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                ClientCap;                                                // 0x0330(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0334(0x0004) MISSED OFFSET
	class UCheatManager*                               CheatManager;                                             // 0x0338(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UCheatManager*                               CheatClass;                                               // 0x0340(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UPlayerInput*                                PlayerInput;                                              // 0x0348(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FActiveForceFeedbackEffect>          ActiveForceFeedbackEffects;                               // 0x0350(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData05[0x70];                                      // 0x0360(0x0070) MISSED OFFSET
	unsigned char                                      bPlayerIsWaiting;                                         // 0x03D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      UnknownData06[0x3];                                       // 0x03D1(0x0003) MISSED OFFSET
	unsigned char                                      NetPlayerIndex;                                           // 0x03D4(0x0001) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3B];                                      // 0x03D5(0x003B) MISSED OFFSET
	class UNetConnection*                              PendingSwapConnection;                                    // 0x0410(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	class UNetConnection*                              NetConnection;                                            // 0x0418(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData08[0xC];                                       // 0x0420(0x000C) MISSED OFFSET
	float                                              InputYawScale;                                            // 0x042C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              InputPitchScale;                                          // 0x0430(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              InputRollScale;                                           // 0x0434(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bShowMouseCursor;                                         // 0x0438(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableClickEvents;                                       // 0x0438(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableTouchEvents;                                       // 0x0438(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableMouseOverEvents;                                   // 0x0438(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableTouchOverEvents;                                   // 0x0438(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceFeedbackEnabled;                                    // 0x0438(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0439(0x0003) MISSED OFFSET
	float                                              ForceFeedbackScale;                                       // 0x043C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FKey>                                ClickEventKeys;                                           // 0x0440(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TEnumAsByte<EMouseCursor>                          DefaultMouseCursor;                                       // 0x0450(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMouseCursor>                          CurrentMouseCursor;                                       // 0x0451(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     DefaultClickTraceChannel;                                 // 0x0452(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     CurrentClickTraceChannel;                                 // 0x0453(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HitResultTraceDistance;                                   // 0x0454(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	uint16_t                                           SeamlessTravelCount;                                      // 0x0458(0x0002) (ZeroConstructor, IsPlainOldData)
	uint16_t                                           LastCompletedSeamlessTravelCount;                         // 0x045A(0x0002) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x74];                                      // 0x045C(0x0074) MISSED OFFSET
	class UInputComponent*                             InactiveStateInputComponent;                              // 0x04D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      bShouldPerformFullTickWhenPaused;                         // 0x04D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData11[0x17];                                      // 0x04D9(0x0017) MISSED OFFSET
	class UTouchInterface*                             CurrentTouchInterface;                                    // 0x04F0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x50];                                      // 0x04F8(0x0050) MISSED OFFSET
	class ASpectatorPawn*                              SpectatorPawn;                                            // 0x0548(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x0550(0x0004) MISSED OFFSET
	bool                                               bIsLocalPlayerController;                                 // 0x0554(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0555(0x0003) MISSED OFFSET
	struct FVector                                     SpawnLocation;                                            // 0x0558(0x000C) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0xC];                                       // 0x0564(0x000C) MISSED OFFSET

	bool WasInputKeyJustReleased(const struct FKey& Key)//offset:0x2EAE7B0;
	bool WasInputKeyJustPressed(const struct FKey& Key)//offset:0x2EAE6C0;
	void ToggleSpeaking(bool bInSpeaking)//offset:0x2EAE630;
	void TestServerLevelVisibilityChange(const struct FName& PackageName, const struct FName& Filename)//offset:0x2EAE560;
	void SwitchLevel(const class FString& URL)//offset:0x2EAE4C0;
	void StopHapticEffect(EControllerHand Hand)//offset:0x2EAE420;
	void StartFire(unsigned char FireModeNum)//offset:0x2EAD9D0;
	void SetVirtualJoystickVisibility(bool bVisible)//offset:0x2EAD3E0;
	void SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing)//offset:0x2EAD240;
	void SetName(const class FString& S)//offset:0x2EAD1A0;
	void SetMouseLocation(int X, int Y)//offset:0x2EAD0D0;
	void SetMouseCursorWidget(TEnumAsByte<EMouseCursor> Cursor, class UUserWidget* CursorWidget)//offset:0x2EAD000;
	void SetHapticsByValue(float Frequency, float Amplitude, EControllerHand Hand)//offset:0x2EACDC0;
	void SetDisableHaptics(bool bNewDisabled)//offset:0x2EACD10;
	void SetControllerLightColor(const struct FColor& Color)//offset:0x2EACC90;
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning)//offset:0x2EACAB0;
	void SetAudioListenerOverride(class USceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation)//offset:0x2EAC980;
	void SetAudioListenerAttenuationOverride(class USceneComponent* AttachToComponent, const struct FVector& AttenuationLocationOVerride)//offset:0x2EAC8A0;
	void ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams)//offset:0x2EAC7B0;
	void ServerViewPrevPlayer()//offset:0x2EAC760;
	void ServerViewNextPlayer()//offset:0x2EAC710;
	void ServerVerifyViewTarget()//offset:0x2EAC6C0;
	void ServerUpdateMultipleLevelsVisibility(TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities)//offset:0x2EAC600;
	void ServerUpdateLevelVisibility(const struct FUpdateLevelVisibilityLevelInfo& LevelVisibility)//offset:0x2EAC540;
	void ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int CamPitchAndYaw)//offset:0x2EAC410;
	void ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId)//offset:0x2EAC2B0;
	void ServerToggleAILogging()//offset:0x2EAC260;
	void ServerShortTimeout()//offset:0x2EAC210;
	void ServerSetSpectatorWaiting(bool bWaiting)//offset:0x2EAC150;
	void ServerSetSpectatorLocation(const struct FVector& NewLoc, const struct FRotator& NewRot)//offset:0x2EAC010;
	void ServerRestartPlayer()//offset:0x2EABFC0;
	void ServerPause()//offset:0x2EABF70;
	void ServerNotifyLoadedWorld(const struct FName& WorldPackageName)//offset:0x2EABEB0;
	void ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerId)//offset:0x2EABD50;
	void ServerExecRPC(const class FString& Msg)//offset:0x2EABC90;
	void ServerExec(const class FString& Msg)//offset:0xF1F1B0;
	void ServerCheckClientPossessionReliable()//offset:0x2EABC40;
	void ServerCheckClientPossession()//offset:0x2EABBF0;
	void ServerChangeName(const class FString& S)//offset:0x2EABB30;
	void ServerCamera(const struct FName& NewMode)//offset:0x2EABA70;
	void ServerAcknowledgePossession(class APawn* P)//offset:0x2EAB9B0;
	void SendToConsole(const class FString& Command)//offset:0x2EAB910;
	void RestartLevel()//offset:0x2EAB8F0;
	void ResetControllerLightColor()//offset:0x2EAB8D0;
	bool ProjectWorldLocationToScreen(const struct FVector& WorldLocation, struct FVector2D* ScreenLocation, bool bPlayerViewportRelative)//offset:0x2EAB660;
	void PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, EControllerHand Hand, float Scale, bool bLoop)//offset:0x2EAB500;
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, const struct FLatentActionInfo& LatentInfo)//offset:0x2EAB250;
	void Pause()//offset:0x2EAAD90;
	void OnServerStartedVisualLogger(bool bIsLogging)//offset:0x2EAAD00;
	void LocalTravel(const class FString& URL)//offset:0x2EAAC60;
	void K2_ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused)//offset:0x2EAAAA0;
	bool IsInputKeyDown(const struct FKey& Key)//offset:0x2EAA9B0;
	void GetViewportSize(int* SizeX, int* SizeY)//offset:0x2EAA8D0;
	class ASpectatorPawn* GetSpectatorPawn()//offset:0x2EAA8B0;
	bool GetMousePosition(float* LocationX, float* LocationY)//offset:0x2EAA790;
	struct FVector GetInputVectorKeyState(const struct FKey& Key)//offset:0x2EAA680;
	void GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed)//offset:0x2EAA4F0;
	void GetInputMouseDelta(float* DeltaX, float* DeltaY)//offset:0x2EAA410;
	void GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration)//offset:0x2EAA280;
	float GetInputKeyTimeDown(const struct FKey& Key)//offset:0x2EAA180;
	void GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY)//offset:0x2EAA050;
	float GetInputAnalogKeyState(const struct FKey& Key)//offset:0x2EA9F50;
	class AHUD* GetHUD()//offset:0x2EA9520;
	bool GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult)//offset:0x2EA9D80;
	bool GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)//offset:0x2EA9BD0;
	bool GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)//offset:0x2EA9A20;
	bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult)//offset:0x2EA9890;
	bool GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)//offset:0x2EA96F0;
	bool GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)//offset:0x2EA9550;
	struct FVector GetFocalLocation()//offset:0x2EA94E0;
	void FOV(float NewFOV)//offset:0x2EA9330;
	void EnableCheats()//offset:0x2EA9310;
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection)//offset:0x2EA9180;
	bool DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection)//offset:0x2EA9080;
	void ConsoleKey(const struct FKey& Key)//offset:0x2EA8F90;
	void ClientWasKicked(const struct FText& KickReason)//offset:0x2EA8ED0;
	void ClientVoiceHandshakeComplete()//offset:0x2EA8EB0;
	void ClientUpdateMultipleLevelsStreamingStatus(TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses)//offset:0x2EA8E10;
	void ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex)//offset:0x2EA8C50;
	void ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId)//offset:0x2EA8B30;
	void ClientTravelInternal(const class FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid)//offset:0x2EA89B0;
	void ClientTravel(const class FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid)//offset:0x2EA8830;
	void ClientTeamMessage(class APlayerState* SenderPlayerState, const class FString& S, const struct FName& Type, float MsgLifeTime)//offset:0x2EA86C0;
	void ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag)//offset:0x2EA85F0;
	void ClientStopCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately)//offset:0x2EA8520;
	void ClientStopCameraShake(class UCameraShakeBase* Shake, bool bImmediately)//offset:0x2EA8450;
	void ClientStopCameraAnim(class UCameraAnim* AnimToStop)//offset:0x2EA83C0;
	void ClientStartOnlineSession()//offset:0x2EA83A0;
	void ClientStartCameraShakeFromSource(class UCameraShakeBase* Shake, class UCameraShakeSourceComponent* SourceComponent)//offset:0x2EA82D0;
	void ClientStartCameraShake(class UCameraShakeBase* Shake, float Scale, ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot)//offset:0x2EA8160;
	void ClientSpawnCameraLensEffect(class AEmitterCameraLensEffectBase* LensEffectEmitterClass)//offset:0x2EA80D0;
	void ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams)//offset:0x2EA7FD0;
	void ClientSetSpectatorWaiting(bool bWaiting)//offset:0x2EA7F40;
	void ClientSetHUD(class AHUD* NewHUDClass)//offset:0x2EA7EB0;
	void ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups)//offset:0x2EA7DA0;
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD)//offset:0x2EA7C20;
	void ClientSetCameraMode(const struct FName& NewCamMode)//offset:0x2EA7B90;
	void ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished)//offset:0x2EA7980;
	void ClientSetBlockOnAsyncLoading()//offset:0x2EA7960;
	void ClientReturnToMainMenuWithTextReason(const struct FText& ReturnReason)//offset:0x2EA78A0;
	void ClientReturnToMainMenu(const class FString& ReturnReason)//offset:0x2EA7800;
	void ClientRetryClientRestart(class APawn* NewPawn)//offset:0x2EA7770;
	void ClientRestart(class APawn* NewPawn)//offset:0x2EA76E0;
	void ClientReset()//offset:0x2EA76C0;
	void ClientRepObjRef(class UObject* Object)//offset:0x2EA7630;
	void ClientReceiveLocalizedMessage(class ULocalMessage* Message, int Switch, class APlayerState* RelatedPlayerState, class APlayerState* RelatedPlayerState02, class UObject* OptionalObject)//offset:0x2EA7490;
	void ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups)//offset:0x2EA7330;
	void ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast)//offset:0x2EA7210;
	void ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier)//offset:0x2EA70A0;
	void ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier)//offset:0x2EA6F90;
	void ClientPlayForceFeedback_Internal(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FForceFeedbackParameters& Params)//offset:0x2EA6EA0;
	void ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, ECameraShakePlaySpace Space, const struct FRotator& CustomPlaySpace)//offset:0x2EA6BD0;
	void ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerId)//offset:0x2EA6AB0;
	void ClientMessage(const class FString& S, const struct FName& Type, float MsgLifeTime)//offset:0x2EA6980;
	void ClientIgnoreMoveInput(bool bIgnore)//offset:0x2EA68F0;
	void ClientIgnoreLookInput(bool bIgnore)//offset:0x2EA6860;
	void ClientGotoState(const struct FName& NewState)//offset:0x2EA67D0;
	void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner)//offset:0x2EA6700;
	void ClientForceGarbageCollection()//offset:0x2EA66E0;
	void ClientFlushLevelStreaming()//offset:0x2EA66C0;
	void ClientEndOnlineSession()//offset:0x2EA66A0;
	void ClientEnableNetworkVoice(bool bEnable)//offset:0x2EA6610;
	void ClientCommitMapChange()//offset:0x2EA65F0;
	void ClientClearCameraLensEffects()//offset:0x2EA65D0;
	void ClientCapBandwidth(int Cap)//offset:0x2EA6540;
	void ClientCancelPendingMapChange()//offset:0xF1B540;
	void ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation)//offset:0x2EA6410;
	void ClearAudioListenerOverride()//offset:0x2EA63D0;
	void ClearAudioListenerAttenuationOverride()//offset:0x2EA63B0;
	bool CanRestartPlayer()//offset:0x2EA6380;
	void Camera(const struct FName& NewMode)//offset:0x2EA62F0;
	void AddYawInput(float Val)//offset:0x2EA6260;
	void AddRollInput(float Val)//offset:0x2EA61D0;
	void AddPitchInput(float Val)//offset:0x2EA6140;
	void ActivateTouchInterface(class UTouchInterface* NewTouchInterface)//offset:0x2EA5F70;
};


// Class Engine.DynamicSubsystem
// size:0x0000 (0x0030 - 0x0030)
class UDynamicSubsystem : public USubsystem
{
public:
};


// Class Engine.EngineSubsystem
// size:0x0000 (0x0030 - 0x0030)
class UEngineSubsystem : public UDynamicSubsystem
{
public:
};


// Class Engine.SoundEffectPreset
// size:0x0040 (0x0028 - 0x0068)
class USoundEffectPreset : public UObject
{
public:
};


// Class Engine.SoundEffectSourcePreset
// size:0x0000 (0x0068 - 0x0068)
class USoundEffectSourcePreset : public USoundEffectPreset
{
public:
};


// Class Engine.SoundEffectSubmixPreset
// size:0x0000 (0x0068 - 0x0068)
class USoundEffectSubmixPreset : public USoundEffectPreset
{
public:
};


// Class Engine.Brush
// size:0x0038 (0x0220 - 0x0258)
class ABrush : public AActor
{
public:
	TEnumAsByte<EBrushType>                            BrushType;                                                // 0x0220(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0221(0x0003) MISSED OFFSET
	struct FColor                                      BrushColor;                                               // 0x0224(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                PolyFlags;                                                // 0x0228(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bColored;                                                 // 0x022C(0x0001)
	unsigned char                                      bSolidWhenSelected;                                       // 0x022C(0x0001)
	unsigned char                                      bPlaceableFromClassBrowser;                               // 0x022C(0x0001)
	unsigned char                                      bNotForClientOrServer;                                    // 0x022C(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x022D(0x0003) MISSED OFFSET
	class UModel*                                      Brush;                                                    // 0x0230(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBrushComponent*                             BrushComponent;                                           // 0x0238(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bInManipulation;                                          // 0x0240(0x0001)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0241(0x0007) MISSED OFFSET
	TArray<struct FGeomSelection>                      SavedSelections;                                          // 0x0248(0x0010) (ZeroConstructor)
};


// Class Engine.Volume
// size:0x0000 (0x0258 - 0x0258)
class AVolume : public ABrush
{
public:
};


// Class Engine.AmbientSound
// size:0x0008 (0x0220 - 0x0228)
class AAmbientSound : public AActor
{
public:
	class UAudioComponent*                             AudioComponent;                                           // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	void Stop()//offset:0x2D8AFC0;
	void Play(float StartTime)//offset:0x2D8AA20;
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel)//offset:0x2D8A7E0;
	void FadeIn(float FadeInDuration, float FadeVolumeLevel)//offset:0x2D8A710;
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel)//offset:0x2D8A5A0;
};


// Class Engine.Pawn
// size:0x0060 (0x0220 - 0x0280)
class APawn : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0220(0x0008) MISSED OFFSET
	unsigned char                                      bUseControllerRotationPitch;                              // 0x0228(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseControllerRotationYaw;                                // 0x0228(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseControllerRotationRoll;                               // 0x0228(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanAffectNavigationGeneration;                           // 0x0228(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0229(0x0003) MISSED OFFSET
	float                                              BaseEyeHeight;                                            // 0x022C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAutoReceiveInput>                     AutoPossessPlayer;                                        // 0x0230(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EAutoPossessAI                                     AutoPossessAI;                                            // 0x0231(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      RemoteViewPitch;                                          // 0x0232(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x5];                                       // 0x0233(0x0005) MISSED OFFSET
	class AController*                                 AIControllerClass;                                        // 0x0238(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class APlayerState*                                PlayerState;                                              // 0x0240(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0248(0x0008) MISSED OFFSET
	class AController*                                 LastHitBy;                                                // 0x0250(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class AController*                                 Controller;                                               // 0x0258(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0260(0x0004) MISSED OFFSET
	struct FVector                                     ControlInputVector;                                       // 0x0264(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LastControlInputVector;                                   // 0x0270(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x027C(0x0004) MISSED OFFSET

	void SpawnDefaultController()//offset:0x2E9F160;
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate)//offset:0x2E9E130;
	void ReceiveUnpossessed(class AController* OldController)//offset:0x13CEB30;
	void ReceivePossessed(class AController* NewController)//offset:0x13CEB30;
	void PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker)//offset:0x2E9D6A0;
	void OnRep_PlayerState()//offset:0x2E9D680;
	void OnRep_Controller()//offset:0x9393B0;
	void LaunchPawn(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)//offset:0x2E9D440;
	struct FVector K2_GetMovementInputVector()//offset:0x2E9D2B0;
	bool IsPlayerControlled()//offset:0x2DED4C0;
	bool IsPawnControlled()//offset:0x2E9D410;
	bool IsMoveInputIgnored()//offset:0x2E9D3B0;
	bool IsLocallyPlayerControlled()//offset:0x2E9D380;
	bool IsLocallyControlled()//offset:0x2DCB350;
	bool IsControlled()//offset:0x2E9D350;
	bool IsBotControlled()//offset:0x2E9D2F0;
	struct FVector GetPendingMovementInputVector()//offset:0x2E9D2B0;
	struct FVector GetNavAgentLocation()//offset:0x2E9D1F0;
	class UPawnMovementComponent* GetMovementComponent()//offset:0xF6E360;
	static class AActor* GetMovementBaseActor(class APawn* Pawn)//offset:0x2E9D160;
	struct FVector GetLastMovementInputVector()//offset:0x2E9D120;
	struct FRotator GetControlRotation()//offset:0x2E9CFF0;
	class AController* GetController()//offset:0x2E9D030;
	struct FRotator GetBaseAimRotation()//offset:0x2E9CE10;
	void DetachFromControllerPendingDestroy()//offset:0x2E9CDF0;
	struct FVector ConsumeMovementInputVector()//offset:0x2E9CDB0;
	void AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce)//offset:0x2E9C890;
	void AddControllerYawInput(float Val)//offset:0x2E9C720;
	void AddControllerRollInput(float Val)//offset:0x2E9C690;
	void AddControllerPitchInput(float Val)//offset:0x2E9C600;
};


// Class Engine.Character
// size:0x0240 (0x0280 - 0x04C0)
class ACharacter : public APawn
{
public:
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x0280(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCharacterMovementComponent*                 CharacterMovement;                                        // 0x0288(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x0290(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	struct FBasedMovementInfo                          BasedMovement;                                            // 0x0298(0x0030)
	struct FBasedMovementInfo                          ReplicatedBasedMovement;                                  // 0x02C8(0x0030) (Net)
	float                                              AnimRootMotionTranslationScale;                           // 0x02F8(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	struct FVector                                     BaseTranslationOffset;                                    // 0x02FC(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0308(0x0008) MISSED OFFSET
	struct FQuat                                       BaseRotationOffset;                                       // 0x0310(0x0010) (IsPlainOldData)
	float                                              ReplicatedServerLastTransformUpdateTimeStamp;             // 0x0320(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              ReplayLastTransformUpdateTimeStamp;                       // 0x0324(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      ReplicatedMovementMode;                                   // 0x0328(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bInBaseReplication;                                       // 0x0329(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x032A(0x0002) MISSED OFFSET
	float                                              CrouchedEyeHeight;                                        // 0x032C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsCrouched;                                              // 0x0330(0x0001) (BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      bProxyIsJumpForceApplied;                                 // 0x0330(0x0001) (Net, Transient)
	unsigned char                                      bPressedJump;                                             // 0x0330(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bClientUpdating;                                          // 0x0330(0x0001) (Transient)
	unsigned char                                      bClientWasFalling;                                        // 0x0330(0x0001) (Transient)
	unsigned char                                      bClientResimulateRootMotion;                              // 0x0330(0x0001) (Transient)
	unsigned char                                      bClientResimulateRootMotionSources;                       // 0x0330(0x0001) (Transient)
	unsigned char                                      bSimGravityDisabled;                                      // 0x0330(0x0001)
	unsigned char                                      bClientCheckEncroachmentOnNetUpdate;                      // 0x0331(0x0001) (Transient)
	unsigned char                                      bServerMoveIgnoreRootMotion;                              // 0x0331(0x0001) (Transient)
	unsigned char                                      bWasJumping;                                              // 0x0331(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0332(0x0002) MISSED OFFSET
	float                                              JumpKeyHoldTime;                                          // 0x0334(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              JumpForceTimeRemaining;                                   // 0x0338(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              ProxyJumpForceStartedTime;                                // 0x033C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              JumpMaxHoldTime;                                          // 0x0340(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	int                                                JumpMaxCount;                                             // 0x0344(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	int                                                JumpCurrentCount;                                         // 0x0348(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                JumpCurrentCountPreJump;                                  // 0x034C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0350(0x0008) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnReachedJumpApex;                                        // 0x0358(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0368(0x0010) MISSED OFFSET
	struct UEMulticastInlineDelegate                   MovementModeChangedDelegate;                              // 0x0378(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnCharacterMovementUpdated;                               // 0x0388(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FRootMotionSourceGroup                      SavedRootMotion;                                          // 0x0398(0x0038) (Transient)
	struct FRootMotionMovementParams                   ClientRootMotionParams;                                   // 0x03D0(0x0040) (Transient)
	TArray<struct FSimulatedRootMotionReplicatedMove>  RootMotionRepMoves;                                       // 0x0410(0x0010) (ZeroConstructor, Transient)
	struct FRepRootMotionMontage                       RepRootMotion;                                            // 0x0420(0x0098) (Net)
	unsigned char                                      UnknownData05[0x8];                                       // 0x04B8(0x0008) MISSED OFFSET

	void UnCrouch(bool bClientSimulation)//offset:0x2DC26C0;
	void StopJumping()//offset:0x2DC26A0;
	void StopAnimMontage(class UAnimMontage* AnimMontage)//offset:0x2DC2610;
	void ServerMovePacked(const struct FCharacterServerMovePackedBits& PackedBits)//offset:0x2DC2240;
	void ServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize10& OldAccel, unsigned char OldMoveFlags)//offset:0x2DC20D0;
	void ServerMoveNoBase(float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, unsigned char ClientMovementMode)//offset:0x2DC1E30;
	void ServerMoveDualNoBase(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, unsigned char ClientMovementMode)//offset:0x2DC1A30;
	void ServerMoveDualHybridRootMotion(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode)//offset:0x2DC15A0;
	void ServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode)//offset:0x2DC1110;
	void ServerMove(float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode)//offset:0x2DC0DD0;
	void RootMotionDebugClientPrintOnScreen(const class FString& inString)//offset:0x2DC0D30;
	float PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName)//offset:0x2DC0C10;
	void OnWalkingOffLedge(const struct FVector& PreviousFloorImpactNormal, const struct FVector& PreviousFloorContactNormal, const struct FVector& PreviousLocation, float TimeDelta)//offset:0x2DC0A70;
	void OnRep_RootMotion()//offset:0x2DC0A50;
	void OnRep_ReplicatedBasedMovement()//offset:0x2DC0A30;
	void OnRep_ReplayLastTransformUpdateTimeStamp()//offset:0x2DC0A10;
	void OnRep_IsCrouched()//offset:0xF537D0;
	void OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)//offset:0x13CEB30;
	void OnLanded(const struct FHitResult& Hit)//offset:0x13CEB30;
	void OnJumped()//offset:0x2DC09F0;
	void LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)//offset:0x2DC08C0;
	void K2_UpdateCustomMovement(float DeltaTime)//offset:0x13CEB30;
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)//offset:0x13CEB30;
	void K2_OnMovementModeChanged(TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode)//offset:0x13CEB30;
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)//offset:0x13CEB30;
	void Jump()//offset:0x2DC08A0;
	bool IsPlayingRootMotion()//offset:0x2DC0870;
	bool IsPlayingNetworkedRootMotionMontage()//offset:0x2DC0840;
	bool IsJumpProvidingForce()//offset:0x2DC0810;
	bool HasAnyRootMotion()//offset:0x2DC07E0;
	class UAnimMontage* GetCurrentMontage()//offset:0x2DC0150;
	struct FVector GetBaseTranslationOffset()//offset:0x2DC0120;
	struct FRotator GetBaseRotationOffsetRotator()//offset:0x2DC00D0;
	float GetAnimRootMotionTranslationScale()//offset:0x2DC00A0;
	void Crouch(bool bClientSimulation)//offset:0x2DC0010;
	void ClientVeryShortAdjustPosition(float Timestamp, const struct FVector& NewLoc, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)//offset:0x2DBFC90;
	void ClientMoveResponsePacked(const struct FCharacterMoveResponsePackedBits& PackedBits)//offset:0x2DBFBA0;
	void ClientCheatWalk()//offset:0x2DBFB80;
	void ClientCheatGhost()//offset:0x2DBFB60;
	void ClientCheatFly()//offset:0x2DBFB40;
	void ClientAdjustRootMotionSourcePosition(float Timestamp, const struct FRootMotionSourceGroup& ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)//offset:0x2DBF660;
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)//offset:0x2DBF330;
	void ClientAdjustPosition(float Timestamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)//offset:0x2DBF0A0;
	void ClientAckGoodMove(float Timestamp)//offset:0x2DBF020;
	bool CanJumpInternal()//offset:0x2DBEFF0;
	bool CanJump()//offset:0x2DBEFC0;
	bool CanCrouch()//offset:0x2DBEF90;
	void CacheInitialMeshOffset(const struct FVector& MeshRelativeLocation, const struct FRotator& MeshRelativeRotation)//offset:0x2DBEEA0;
};


// Class Engine.StaticMeshComponent
// size:0x0070 (0x0480 - 0x04F0)
class UStaticMeshComponent : public UMeshComponent
{
public:
	int                                                MinLOD;                                                   // 0x0480(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SubDivisionStepSize;                                      // 0x0484(0x0004) (ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 StaticMesh;                                               // 0x0488(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 DefaultStaticMesh;                                        // 0x0490(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FColor                                      WireframeColorOverride;                                   // 0x0498(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEvaluateWorldPositionOffset;                             // 0x049C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideWireframeColor;                                  // 0x049C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOverrideMinLod;                                          // 0x049C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOverrideNavigationExport;                                // 0x049C(0x0001) (Transient)
	unsigned char                                      bForceNavigationObstacle;                                 // 0x049C(0x0001) (Transient)
	unsigned char                                      bDisallowMeshPaintPerInstance;                            // 0x049C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreInstanceForTextureStreaming;                       // 0x049C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideLightMapRes;                                     // 0x049C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastDistanceFieldIndirectShadow;                         // 0x049D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOverrideDistanceFieldSelfShadowBias;                     // 0x049D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseSubDivisions;                                         // 0x049D(0x0001)
	unsigned char                                      bUseDefaultCollision;                                     // 0x049D(0x0001) (Edit)
	unsigned char                                      bReverseCulling;                                          // 0x049D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x2];                                       // 0x049E(0x0002) MISSED OFFSET
	int                                                OverriddenLightMapRes;                                    // 0x04A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFieldIndirectShadowMinVisibility;                 // 0x04A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFieldSelfShadowBias;                              // 0x04A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StreamingDistanceMultiplier;                              // 0x04AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FStaticMeshComponentLODInfo>         LODData;                                                  // 0x04B0(0x0010) (ZeroConstructor, Transient)
	TArray<struct FStreamingTextureBuildInfo>          StreamingTextureData;                                     // 0x04C0(0x0010) (ZeroConstructor)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x04D0(0x0018) (Edit)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04E8(0x0008) MISSED OFFSET

	bool SetStaticMesh(class UStaticMesh* NewMesh)//offset:0x2EF2620;
	void SetReverseCulling(bool ReverseCulling)//offset:0x2EF23D0;
	void SetForcedLodModel(int NewForcedLodModel)//offset:0x2EF1F90;
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue)//offset:0x2EF1F00;
	void SetDistanceFieldSelfShadowBias(float NewValue)//offset:0x2EF1C80;
	void OnRep_StaticMesh(class UStaticMesh* OldStaticMesh)//offset:0x2EF1BF0;
	void GetLocalBounds(struct FVector* Min, struct FVector* Max)//offset:0x2EF1A50;
};


// Class Engine.AssetManager
// size:0x0430 (0x0028 - 0x0458)
class UAssetManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x298];                                     // 0x0028(0x0298) MISSED OFFSET
	TArray<class UObject*>                             ObjectReferenceList;                                      // 0x02C0(0x0010) (ZeroConstructor)
	bool                                               bIsGlobalAsyncScanEnvironment;                            // 0x02D0(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bShouldGuessTypeAndName;                                  // 0x02D1(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bShouldUseSynchronousLoad;                                // 0x02D2(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsLoadingFromPakFiles;                                   // 0x02D3(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bShouldAcquireMissingChunksOnLoad;                        // 0x02D4(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bOnlyCookProductionAssets;                                // 0x02D5(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsBulkScanning;                                          // 0x02D6(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsPrimaryAssetDirectoryCurrent;                          // 0x02D7(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsManagementDatabaseCurrent;                             // 0x02D8(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bUpdateManagementDatabaseAfterScan;                       // 0x02D9(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIncludeOnlyOnDiskAssets;                                 // 0x02DA(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bHasCompletedInitialScan;                                 // 0x02DB(0x0001) (ZeroConstructor, IsPlainOldData)
	int                                                NumberOfSpawnedNotifications;                             // 0x02DC(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x178];                                     // 0x02E0(0x0178) MISSED OFFSET
};


// Class Engine.AudioVolume
// size:0x0070 (0x0258 - 0x02C8)
class AAudioVolume : public AVolume
{
public:
	float                                              Priority;                                                 // 0x0258(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled;                                                 // 0x025C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x025D(0x0003) MISSED OFFSET
	struct FReverbSettings                             Settings;                                                 // 0x0260(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FInteriorSettings                           AmbientZoneSettings;                                      // 0x0280(0x0024) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02A4(0x0004) MISSED OFFSET
	TArray<struct FAudioVolumeSubmixSendSettings>      SubmixSendSettings;                                       // 0x02A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FAudioVolumeSubmixOverrideSettings>  SubmixOverrideSettings;                                   // 0x02B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	void SetSubmixSendSettings(TArray<struct FAudioVolumeSubmixSendSettings> NewSubmixSendSettings)//offset:0x2DA9570;
	void SetSubmixOverrideSettings(TArray<struct FAudioVolumeSubmixOverrideSettings> NewSubmixOverrideSettings)//offset:0x2DA94A0;
	void SetReverbSettings(const struct FReverbSettings& NewReverbSettings)//offset:0x2DA9260;
	void SetPriority(float NewPriority)//offset:0x2DA91E0;
	void SetInteriorSettings(const struct FInteriorSettings& NewInteriorSettings)//offset:0x2DA9140;
	void SetEnabled(bool bNewEnabled)//offset:0x2DA90B0;
	void OnRep_bEnabled()//offset:0x2DA8FC0;
};


// Class Engine.SceneCaptureComponent
// size:0x00B0 (0x0200 - 0x02B0)
class USceneCaptureComponent : public USceneComponent
{
public:
	TArray<TWeakObjectPtr<class UPrimitiveComponent>>  HiddenComponents;                                         // 0x0200(0x0010) (ExportObject, ZeroConstructor)
	TArray<class AActor*>                              HiddenActors;                                             // 0x0210(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>>  ShowOnlyComponents;                                       // 0x0220(0x0010) (ExportObject, ZeroConstructor)
	TArray<class AActor*>                              ShowOnlyActors;                                           // 0x0230(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	float                                              LODDistanceFactor;                                        // 0x0240(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxViewDistanceOverride;                                  // 0x0244(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                CaptureSortPriority;                                      // 0x0248(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseRayTracingIfEnabled;                                  // 0x024C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x024D(0x0003) MISSED OFFSET
	TArray<struct FEngineShowFlagsSetting>             ShowFlagSettings;                                         // 0x0250(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0260(0x0030) MISSED OFFSET
	class FString                                      ProfilingEventName;                                       // 0x0290(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData02[0x10];                                      // 0x02A0(0x0010) MISSED OFFSET

	void ShowOnlyComponent(class UPrimitiveComponent* InComponent)//offset:0x2EC9830;
	void ShowOnlyActorComponents(class AActor* InActor, bool bIncludeFromChildActors)//offset:0x2EC9760;
	void SetCaptureSortPriority(int NewCaptureSortPriority)//offset:0x2EC9300;
	void RemoveShowOnlyComponent(class UPrimitiveComponent* InComponent)//offset:0x2EC9120;
	void RemoveShowOnlyActorComponents(class AActor* InActor, bool bIncludeFromChildActors)//offset:0x2EC9050;
	void HideComponent(class UPrimitiveComponent* InComponent)//offset:0x2EC68D0;
	void HideActorComponents(class AActor* InActor, bool bIncludeFromChildActors)//offset:0x2EC6800;
	void ClearShowOnlyComponents()//offset:0x2EC5ED0;
	void ClearHiddenComponents()//offset:0x2EC5EB0;
};


// Class Engine.SceneCaptureComponent2D
// size:0x0600 (0x02B0 - 0x08B0)
class USceneCaptureComponent2D : public USceneCaptureComponent
{
public:
	TEnumAsByte<ECameraProjectionMode>                 ProjectionType;                                           // 0x02B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02B1(0x0003) MISSED OFFSET
	float                                              FOVAngle;                                                 // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OrthoWidth;                                               // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02BC(0x0004) MISSED OFFSET
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x02C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESceneCaptureCompositeMode>            CompositeMode;                                            // 0x02C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x02C9(0x0007) MISSED OFFSET
	struct FPostProcessSettings                        PostProcessSettings;                                      // 0x02D0(0x0550) (Edit, BlueprintVisible)
	float                                              PostProcessBlendWeight;                                   // 0x0820(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOverride_CustomNearClippingPlane;                        // 0x0824(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0825(0x0003) MISSED OFFSET
	float                                              CustomNearClippingPlane;                                  // 0x0828(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCustomProjectionMatrix;                               // 0x082C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x082D(0x0003) MISSED OFFSET
	struct FMatrix                                     CustomProjectionMatrix;                                   // 0x0830(0x0040) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableClipPlane;                                         // 0x0870(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0871(0x0003) MISSED OFFSET
	struct FVector                                     ClipPlaneBase;                                            // 0x0874(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ClipPlaneNormal;                                          // 0x0880(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCameraCutThisFrame;                                      // 0x088C(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bConsiderUnrenderedOpaquePixelAsFullyTranslucent;         // 0x088C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData06[0x3];                                       // 0x088D(0x0003) MISSED OFFSET
	bool                                               bDisableFlipCopyGLES;                                     // 0x0890(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x1F];                                      // 0x0891(0x001F) MISSED OFFSET

	void CaptureScene()//offset:0x2EC5E90;
	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)//offset:0x2EC5D30;
};


// Class Engine.NavigationObjectBase
// size:0x0028 (0x0220 - 0x0248)
class ANavigationObjectBase : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0220(0x0008) MISSED OFFSET
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x0228(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBillboardComponent*                         GoodSprite;                                               // 0x0230(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBillboardComponent*                         BadSprite;                                                // 0x0238(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      bIsPIEPlayerStart;                                        // 0x0240(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0241(0x0007) MISSED OFFSET
};


// Class Engine.PlayerStart
// size:0x0008 (0x0248 - 0x0250)
class APlayerStart : public ANavigationObjectBase
{
public:
	struct FName                                       PlayerStartTag;                                           // 0x0248(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MovementComponent
// size:0x0040 (0x00B0 - 0x00F0)
class UMovementComponent : public UActorComponent
{
public:
	class USceneComponent*                             UpdatedComponent;                                         // 0x00B0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	class UPrimitiveComponent*                         UpdatedPrimitive;                                         // 0x00B8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C0(0x0004) MISSED OFFSET
	struct FVector                                     Velocity;                                                 // 0x00C4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PlaneConstraintNormal;                                    // 0x00D0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PlaneConstraintOrigin;                                    // 0x00DC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUpdateOnlyIfRendered;                                    // 0x00E8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAutoUpdateTickRegistration;                              // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bTickBeforeOwner;                                         // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAutoRegisterUpdatedComponent;                            // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bConstrainToPlane;                                        // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSnapToPlaneAtStart;                                      // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAutoRegisterPhysicsVolumeUpdates;                        // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bComponentShouldUpdatePhysicsVolume;                      // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x2];                                       // 0x00E9(0x0002) MISSED OFFSET
	EPlaneConstraintAxisSetting                        PlaneConstraintAxisSetting;                               // 0x00EB(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET

	void StopMovementImmediately()//offset:0x2E863C0;
	void SnapUpdatedComponentToPlane()//offset:0x2E863A0;
	void SetUpdatedComponent(class USceneComponent* NewUpdatedComponent)//offset:0x2E86230;
	void SetPlaneConstraintOrigin(const struct FVector& PlaneOrigin)//offset:0x2E860D0;
	void SetPlaneConstraintNormal(const struct FVector& PlaneNormal)//offset:0x2E86040;
	void SetPlaneConstraintFromVectors(const struct FVector& Forward, const struct FVector& Up)//offset:0x2E85F50;
	void SetPlaneConstraintEnabled(bool bEnabled)//offset:0x2E85EC0;
	void SetPlaneConstraintAxisSetting(EPlaneConstraintAxisSetting NewAxisSetting)//offset:0x2E85E40;
	void PhysicsVolumeChanged(class APhysicsVolume* NewVolume)//offset:0x2D874E0;
	bool K2_MoveUpdatedComponent(const struct FVector& Delta, const struct FRotator& NewRotation, struct FHitResult* OutHit, bool bSweep, bool bTeleport)//offset:0x2E857A0;
	float K2_GetModifiedMaxSpeed()//offset:0x2E85760;
	float K2_GetMaxSpeedModifier()//offset:0x2E85720;
	bool IsExceedingMaxSpeed(float MaxSpeed)//offset:0x2E855E0;
	struct FVector GetPlaneConstraintOrigin()//offset:0x2E855A0;
	struct FVector GetPlaneConstraintNormal()//offset:0x2E85560;
	EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting()//offset:0x2E85540;
	class APhysicsVolume* GetPhysicsVolume()//offset:0x2E85510;
	float GetMaxSpeed()//offset:0x2E854D0;
	float GetGravityZ()//offset:0x2E852F0;
	struct FVector ConstrainNormalToPlane(const struct FVector& Normal)//offset:0x2E85240;
	struct FVector ConstrainLocationToPlane(const struct FVector& Location)//offset:0x2E85190;
	struct FVector ConstrainDirectionToPlane(const struct FVector& Direction)//offset:0x2E850E0;
};


// Class Engine.NavMovementComponent
// size:0x0040 (0x00F0 - 0x0130)
class UNavMovementComponent : public UMovementComponent
{
public:
	struct FNavAgentProperties                         NavAgentProps;                                            // 0x00F0(0x0030) (Edit, BlueprintVisible)
	float                                              FixedPathBrakingDistance;                                 // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUpdateNavAgentWithOwnersCollision;                       // 0x0124(0x0001) (Edit)
	unsigned char                                      bUseAccelerationForPaths;                                 // 0x0124(0x0001) (Edit, Config, GlobalConfig)
	unsigned char                                      bUseFixedBrakingDistanceForPaths;                         // 0x0124(0x0001) (Edit)
	struct FMovementProperties                         MovementState;                                            // 0x0125(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0126(0x0002) MISSED OFFSET
	class UObject*                                     PathFollowingComp;                                        // 0x0128(0x0008) (ZeroConstructor, IsPlainOldData)

	void StopMovementKeepPathing()//offset:0x2E88E40;
	void StopActiveMovement()//offset:0x106C3D0;
	bool IsSwimming()//offset:0x2E88E10;
	bool IsMovingOnGround()//offset:0x2DC3F40;
	bool IsFlying()//offset:0x2E88DE0;
	bool IsFalling()//offset:0x2DA45E0;
	bool IsCrouching()//offset:0x2E88DB0;
};


// Class Engine.PawnMovementComponent
// size:0x0008 (0x0130 - 0x0138)
class UPawnMovementComponent : public UNavMovementComponent
{
public:
	class APawn*                                       PawnOwner;                                                // 0x0130(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)

	struct FVector K2_GetInputVector()//offset:0x2E9D270;
	bool IsMoveInputIgnored()//offset:0x2E9D3E0;
	struct FVector GetPendingInputVector()//offset:0x2E9D270;
	class APawn* GetPawnOwner()//offset:0x2E9D240;
	struct FVector GetLastInputVector()//offset:0x2E9D0E0;
	struct FVector ConsumeInputVector()//offset:0x2E9CD70;
	void AddInputVector(const struct FVector& WorldVector, bool bForce)//offset:0x2E9C7B0;
};


// Class Engine.CharacterMovementComponent
// size:0x09C8 (0x0138 - 0x0B00)
class UCharacterMovementComponent : public UPawnMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0138(0x0010) MISSED OFFSET
	class ACharacter*                                  CharacterOwner;                                           // 0x0148(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	float                                              GravityScale;                                             // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxStepHeight;                                            // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpZVelocity;                                            // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpOffJumpZFactor;                                       // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WalkableFloorAngle;                                       // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WalkableFloorZ;                                           // 0x0164(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         MovementMode;                                             // 0x0168(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      CustomMovementMode;                                       // 0x0169(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	ENetworkSmoothingMode                              NetworkSmoothingMode;                                     // 0x016A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x016B(0x0001) MISSED OFFSET
	float                                              GroundFriction;                                           // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1C];                                      // 0x0170(0x001C) MISSED OFFSET
	float                                              MaxWalkSpeed;                                             // 0x018C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxWalkSpeedCrouched;                                     // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSwimSpeed;                                             // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxFlySpeed;                                              // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxCustomMovementSpeed;                                   // 0x019C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxAcceleration;                                          // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinAnalogWalkSpeed;                                       // 0x01A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingFrictionFactor;                                    // 0x01A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingFriction;                                          // 0x01AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingSubStepTime;                                       // 0x01B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationWalking;                               // 0x01B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationFalling;                               // 0x01B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationSwimming;                              // 0x01BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationFlying;                                // 0x01C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AirControl;                                               // 0x01C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AirControlBoostMultiplier;                                // 0x01C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AirControlBoostVelocityThreshold;                         // 0x01CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FallingLateralFriction;                                   // 0x01D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CrouchedHalfHeight;                                       // 0x01D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Buoyancy;                                                 // 0x01D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PerchRadiusThreshold;                                     // 0x01DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PerchAdditionalHeight;                                    // 0x01E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RotationRate;                                             // 0x01E4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseSeparateBrakingFriction;                              // 0x01F0(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      bApplyGravityWhileJumping;                                // 0x01F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseControllerDesiredRotation;                            // 0x01F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOrientRotationToMovement;                                // 0x01F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSweepWhileNavWalking;                                    // 0x01F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bMovementInProgress;                                      // 0x01F0(0x0001)
	unsigned char                                      bEnableScopedMovementUpdates;                             // 0x01F0(0x0001) (Edit)
	unsigned char                                      bEnableServerDualMoveScopedMovementUpdates;               // 0x01F1(0x0001) (Edit)
	unsigned char                                      bForceMaxAccel;                                           // 0x01F1(0x0001)
	unsigned char                                      bRunPhysicsWithNoController;                              // 0x01F1(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceNextFloorCheck;                                     // 0x01F1(0x0001) (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst)
	unsigned char                                      bShrinkProxyCapsule;                                      // 0x01F1(0x0001)
	unsigned char                                      bCanWalkOffLedges;                                        // 0x01F1(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanWalkOffLedgesWhenCrouching;                           // 0x01F1(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNetworkSkipProxyPredictionOnNetUpdate;                   // 0x01F2(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bNetworkAlwaysReplicateTransformUpdateTimestamp;          // 0x01F2(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bDeferUpdateMoveComponent;                                // 0x01F2(0x0001)
	unsigned char                                      bEnablePhysicsInteraction;                                // 0x01F2(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bTouchForceScaledToMass;                                  // 0x01F2(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPushForceScaledToMass;                                   // 0x01F2(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPushForceUsingZOffset;                                   // 0x01F2(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bScalePushForceToVelocity;                                // 0x01F3(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData03[0x4];                                       // 0x01F4(0x0004) MISSED OFFSET
	class USceneComponent*                             DeferredUpdatedMoveComponent;                             // 0x01F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              MaxOutOfWaterStepHeight;                                  // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OutofWaterZ;                                              // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Mass;                                                     // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StandingDownwardForceScale;                               // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InitialPushForceFactor;                                   // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PushForceFactor;                                          // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PushForcePointZOffsetFactor;                              // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TouchForceFactor;                                         // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinTouchForce;                                            // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxTouchForce;                                            // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RepulsionForce;                                           // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     Acceleration;                                             // 0x022C(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0238(0x0008) MISSED OFFSET
	struct FQuat                                       LastUpdateRotation;                                       // 0x0240(0x0010) (IsPlainOldData)
	struct FVector                                     LastUpdateLocation;                                       // 0x0250(0x000C) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     LastUpdateVelocity;                                       // 0x025C(0x000C) (ZeroConstructor, IsPlainOldData)
	float                                              ServerLastTransformUpdateTimeStamp;                       // 0x0268(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerLastClientGoodMoveAckTime;                          // 0x026C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerLastClientAdjustmentTime;                           // 0x0270(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     PendingImpulseToApply;                                    // 0x0274(0x000C) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     PendingForceToApply;                                      // 0x0280(0x000C) (ZeroConstructor, IsPlainOldData)
	float                                              AnalogInputModifier;                                      // 0x028C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0xC];                                       // 0x0290(0x000C) MISSED OFFSET
	float                                              MaxSimulationTimeStep;                                    // 0x029C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x02A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxJumpApexAttemptsPerSimulation;                         // 0x02A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithGeometry;                             // 0x02A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithGeometryAsProxy;                      // 0x02AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithPawn;                                 // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithPawnAsProxy;                          // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NetworkSimulatedSmoothLocationTime;                       // 0x02B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkSimulatedSmoothRotationTime;                       // 0x02BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ListenServerNetworkSimulatedSmoothLocationTime;           // 0x02C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ListenServerNetworkSimulatedSmoothRotationTime;           // 0x02C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetProxyShrinkRadius;                                     // 0x02C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetProxyShrinkHalfHeight;                                 // 0x02CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkMaxSmoothUpdateDistance;                           // 0x02D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkNoSmoothUpdateDistance;                            // 0x02D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkMinTimeBetweenClientAckGoodMoves;                  // 0x02D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkMinTimeBetweenClientAdjustments;                   // 0x02DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;    // 0x02E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkLargeClientCorrectionDistance;                     // 0x02E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LedgeCheckThreshold;                                      // 0x02E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpOutOfWaterPitch;                                      // 0x02EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FFindFloorResult                            CurrentFloor;                                             // 0x02F0(0x0098) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	TEnumAsByte<EMovementMode>                         DefaultLandMovementMode;                                  // 0x0388(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         DefaultWaterMovementMode;                                 // 0x0389(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         GroundMovementMode;                                       // 0x038A(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bMaintainHorizontalGroundVelocity;                        // 0x038B(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityX;                                     // 0x038B(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityY;                                     // 0x038B(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityZ;                                     // 0x038B(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseAngularVelocity;                               // 0x038B(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bJustTeleported;                                          // 0x038B(0x0001) (Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst)
	unsigned char                                      bNetworkUpdateReceived;                                   // 0x038B(0x0001) (Transient)
	unsigned char                                      bNetworkMovementModeChanged;                              // 0x038B(0x0001) (Transient)
	unsigned char                                      bIgnoreClientMovementErrorChecksAndCorrection;            // 0x038C(0x0001) (Edit, BlueprintVisible, Transient)
	unsigned char                                      bServerAcceptClientAuthoritativePosition;                 // 0x038C(0x0001) (Edit, BlueprintVisible, Transient)
	unsigned char                                      bNotifyApex;                                              // 0x038C(0x0001) (Edit, BlueprintVisible, EditConst)
	unsigned char                                      bCheatFlying;                                             // 0x038C(0x0001)
	unsigned char                                      bWantsToCrouch;                                           // 0x038C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      bCrouchMaintainsBaseLocation;                             // 0x038C(0x0001) (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst)
	unsigned char                                      bIgnoreBaseRotation;                                      // 0x038C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bFastAttachedMove;                                        // 0x038C(0x0001)
	unsigned char                                      bAlwaysCheckFloor;                                        // 0x038D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseFlatBaseForFloorChecks;                               // 0x038D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPerformingJumpOff;                                       // 0x038D(0x0001)
	unsigned char                                      bWantsToLeaveNavWalking;                                  // 0x038D(0x0001)
	unsigned char                                      bUseRVOAvoidance;                                         // 0x038D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRequestedMoveUseAcceleration;                            // 0x038D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bWasSimulatingRootMotion;                                 // 0x038D(0x0001) (Transient)
	unsigned char                                      bAllowPhysicsRotationDuringAnimRootMotion;                // 0x038E(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHasRequestedVelocity;                                    // 0x038E(0x0001) (Transient)
	unsigned char                                      bRequestedMoveWithMaxSpeed;                               // 0x038E(0x0001) (Transient)
	unsigned char                                      bWasAvoidanceUpdated;                                     // 0x038E(0x0001) (Transient)
	unsigned char                                      bProjectNavMeshWalking;                                   // 0x038E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bProjectNavMeshOnBothWorldChannels;                       // 0x038E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData06[0x11];                                      // 0x038F(0x0011) MISSED OFFSET
	float                                              AvoidanceConsiderationRadius;                             // 0x03A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RequestedVelocity;                                        // 0x03A4(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                AvoidanceUID;                                             // 0x03B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FNavAvoidanceMask                           AvoidanceGroup;                                           // 0x03B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FNavAvoidanceMask                           GroupsToAvoid;                                            // 0x03B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FNavAvoidanceMask                           GroupsToIgnore;                                           // 0x03BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AvoidanceWeight;                                          // 0x03C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PendingLaunchVelocity;                                    // 0x03C4(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0xA4];                                      // 0x03D0(0x00A4) MISSED OFFSET
	float                                              NavMeshProjectionInterval;                                // 0x0474(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavMeshProjectionTimer;                                   // 0x0478(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              NavMeshProjectionInterpSpeed;                             // 0x047C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavMeshProjectionHeightScaleUp;                           // 0x0480(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavMeshProjectionHeightScaleDown;                         // 0x0484(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavWalkingFloorDistTolerance;                             // 0x0488(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x048C(0x0004) MISSED OFFSET
	struct FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;                                  // 0x0490(0x0030)
	unsigned char                                      UnknownData09[0x18];                                      // 0x04C0(0x0018) MISSED OFFSET
	float                                              MinTimeBetweenTimeStampResets;                            // 0x04D8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4AC];                                     // 0x04DC(0x04AC) MISSED OFFSET
	struct FRootMotionSourceGroup                      CurrentRootMotion;                                        // 0x0988(0x0038) (Transient)
	struct FRootMotionSourceGroup                      ServerCorrectionRootMotion;                               // 0x09C0(0x0038) (Transient)
	unsigned char                                      UnknownData11[0x98];                                      // 0x09F8(0x0098) MISSED OFFSET
	struct FRootMotionMovementParams                   RootMotionParams;                                         // 0x0A90(0x0040) (Transient)
	struct FVector                                     AnimRootMotionVelocity;                                   // 0x0AD0(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x24];                                      // 0x0ADC(0x0024) MISSED OFFSET

	void SetWalkableFloorZ(float InWalkableFloorZ)//offset:0x2DC48C0;
	void SetWalkableFloorAngle(float InWalkableFloorAngle)//offset:0x2DC4840;
	void SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, unsigned char NewCustomMode)//offset:0x2DC4770;
	void SetGroupsToIgnoreMask(const struct FNavAvoidanceMask& GroupMask)//offset:0x2DC46E0;
	void SetGroupsToIgnore(int GroupFlags)//offset:0x2DC4650;
	void SetGroupsToAvoidMask(const struct FNavAvoidanceMask& GroupMask)//offset:0x2DC45C0;
	void SetGroupsToAvoid(int GroupFlags)//offset:0x2DC4530;
	void SetAvoidanceGroupMask(const struct FNavAvoidanceMask& GroupMask)//offset:0x2DC44A0;
	void SetAvoidanceGroup(int GroupFlags)//offset:0x2DC4410;
	void SetAvoidanceEnabled(bool bEnable)//offset:0x2DC4380;
	float K2_GetWalkableFloorZ()//offset:0x2DC4350;
	float K2_GetWalkableFloorAngle()//offset:0x2DC4320;
	float K2_GetModifiedMaxAcceleration()//offset:0x2DC42E0;
	void K2_FindFloor(const struct FVector& CapsuleLocation, struct FFindFloorResult* FloorResult)//offset:0x2DC4190;
	void K2_ComputeFloorDist(const struct FVector& CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult* FloorResult)//offset:0x2DC3F70;
	bool IsWalking()//offset:0x2DC3F40;
	bool IsWalkable(const struct FHitResult& Hit)//offset:0x2DC3E50;
	float GetValidPerchRadius()//offset:0x2DC3E20;
	float GetPerchRadiusThreshold()//offset:0x2DC3DF0;
	class UPrimitiveComponent* GetMovementBase()//offset:0x2DC3DC0;
	float GetMinAnalogSpeed()//offset:0x2DC3D80;
	float GetMaxJumpHeightWithJumpTime()//offset:0x2DC3D40;
	float GetMaxJumpHeight()//offset:0x2DC3D00;
	float GetMaxBrakingDeceleration()//offset:0x2DC3CC0;
	float GetMaxAcceleration()//offset:0x2DC3C80;
	struct FVector GetLastUpdateVelocity()//offset:0x2DC3C50;
	struct FRotator GetLastUpdateRotation()//offset:0x2DC3C00;
	struct FVector GetLastUpdateLocation()//offset:0x2DC3BD0;
	struct FVector GetImpartedMovementBaseVelocity()//offset:0x2DC3B90;
	struct FVector GetCurrentAcceleration()//offset:0x2DC3B50;
	class ACharacter* GetCharacterOwner()//offset:0x2DC3B30;
	float GetAnalogInputModifier()//offset:0x2DC3B00;
	void DisableMovement()//offset:0x2DC3AE0;
	void ClearAccumulatedForces()//offset:0x2DC3AC0;
	void CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)//offset:0x2DC38A0;
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration)//offset:0x2DC3730;
	void AddImpulse(const struct FVector& Impulse, bool bVelocityChange)//offset:0x2DC3650;
	void AddForce(const struct FVector& Force)//offset:0x2DC35C0;
};


// Class Engine.CheatManager
// size:0x0050 (0x0028 - 0x0078)
class UCheatManager : public UObject
{
public:
	class ADebugCameraController*                      DebugCameraControllerRef;                                 // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class ADebugCameraController*                      DebugCameraControllerClass;                               // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x40];                                      // 0x0038(0x0040) MISSED OFFSET

	void Walk()//offset:0xF54690;
	void ViewSelf()//offset:0x2DC8CA0;
	void ViewPlayer(const class FString& S)//offset:0x2DC8C00;
	void ViewClass(class AActor* DesiredClass)//offset:0x2DC8B70;
	void ViewActor(const struct FName& ActorName)//offset:0x2DC8AE0;
	void UpdateSafeArea()//offset:0x2DC8AC0;
	void ToggleServerStatReplicatorUpdateStatNet()//offset:0x2DC8AA0;
	void ToggleServerStatReplicatorClientOverwrite()//offset:0x2DC8A80;
	void ToggleDebugCamera()//offset:0x2DC8A60;
	void ToggleAILogging()//offset:0x2DC8A40;
	void TestCollisionDistance()//offset:0x2DC8A20;
	void Teleport()//offset:0x2DC8A00;
	void Summon(const class FString& ClassName)//offset:0x2DC8960;
	void StreamLevelOut(const struct FName& PackageName)//offset:0x2DC88D0;
	void StreamLevelIn(const struct FName& PackageName)//offset:0x2DC8840;
	void SpawnServerStatReplicator()//offset:0x2DC8820;
	void Slomo(float NewTimeDilation)//offset:0x2DC8790;
	void SetWorldOrigin()//offset:0x2DC8770;
	void SetMouseSensitivityToDefault()//offset:0x2DC8750;
	void ServerToggleAILogging()//offset:0x2DC8670;
	void ReceiveInitCheatManager()//offset:0x13CEB30;
	void ReceiveEndPlay()//offset:0x13CEB30;
	void PlayersOnly()//offset:0x2DC8650;
	void OnlyLoadLevel(const struct FName& PackageName)//offset:0x2DC85C0;
	void LogLoc()//offset:0x2DC85A0;
	void InvertMouse()//offset:0x2DC8580;
	void God()//offset:0x2DC8560;
	void Ghost()//offset:0x2DB9C50;
	void FreezeFrame(float Delay)//offset:0x2DC84D0;
	void Fly()//offset:0x25CEB10;
	void FlushLog()//offset:0x2DC84B0;
	void EnableDebugCamera()//offset:0xF4EE00;
	void DumpVoiceMutingState()//offset:0x2DC8490;
	void DumpPartyState()//offset:0x2DC8470;
	void DumpOnlineSessionState()//offset:0x2DC8450;
	void DumpChatState()//offset:0x2DC8430;
	void DisableDebugCamera()//offset:0xF38D40;
	void DestroyTarget()//offset:0x2DC8410;
	void DestroyServerStatReplicator()//offset:0x2DC83F0;
	void DestroyPawns(class APawn* aClass)//offset:0x2492D80;
	void DestroyAllPawnsExceptTarget()//offset:0x2DC83D0;
	void DestroyAll(class AActor* aClass)//offset:0x2DC8340;
	void DebugCapsuleSweepSize(float HalfHeight, float Radius)//offset:0x2DC8270;
	void DebugCapsuleSweepPawn()//offset:0x2DC8250;
	void DebugCapsuleSweepComplex(bool bTraceComplex)//offset:0x2DC81C0;
	void DebugCapsuleSweepClear()//offset:0x2DC81A0;
	void DebugCapsuleSweepChannel(TEnumAsByte<ECollisionChannel> Channel)//offset:0x2DC8120;
	void DebugCapsuleSweepCapture()//offset:0x8B54C0;
	void DebugCapsuleSweep()//offset:0x2DC8100;
	void DamageTarget(float DamageAmount)//offset:0x2DC8070;
	void CheatScript(const class FString& ScriptName)//offset:0x2DC7F80;
	void ChangeSize(float F)//offset:0x2DC7EF0;
	void BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, class FString* GoString, class FString* LocString)//offset:0x2DC7D30;
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll)//offset:0x2DC7B40;
	void BugIt(const class FString& ScreenShotDescription)//offset:0x2DC7AA0;
};


// Class Engine.PrimaryDataAsset
// size:0x0000 (0x0030 - 0x0030)
class UPrimaryDataAsset : public UDataAsset
{
public:
};


// Class Engine.BillboardComponent
// size:0x0020 (0x0450 - 0x0470)
class UBillboardComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  Sprite;                                                   // 0x0450(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsScreenSizeScaled;                                      // 0x0458(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0459(0x0003) MISSED OFFSET
	float                                              ScreenSize;                                               // 0x045C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              U;                                                        // 0x0460(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UL;                                                       // 0x0464(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              V;                                                        // 0x0468(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VL;                                                       // 0x046C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	void SetUV(int NewU, int NewUL, int NewV, int NewVL)//offset:0x2DA9640;
	void SetSpriteAndUV(class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL)//offset:0x2DA9310;
	void SetSprite(class UTexture2D* NewSprite)//offset:0x1F58220;
};


// Class Engine.SplineComponent
// size:0x0100 (0x0450 - 0x0550)
class USplineComponent : public UPrimitiveComponent
{
public:
	struct FSplineCurves                               SplineCurves;                                             // 0x0450(0x0070) (Edit)
	struct FInterpCurveVector                          SplineInfo;                                               // 0x04C0(0x0018) (ZeroConstructor, Deprecated)
	struct FInterpCurveQuat                            SplineRotInfo;                                            // 0x04D8(0x0018) (ZeroConstructor, Deprecated)
	struct FInterpCurveVector                          SplineScaleInfo;                                          // 0x04F0(0x0018) (ZeroConstructor, Deprecated)
	struct FInterpCurveFloat                           SplineReparamTable;                                       // 0x0508(0x0018) (ZeroConstructor, Deprecated)
	bool                                               bAllowSplineEditingPerInstance;                           // 0x0520(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0521(0x0003) MISSED OFFSET
	int                                                ReparamStepsPerSegment;                                   // 0x0524(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Duration;                                                 // 0x0528(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bStationaryEndpoints;                                     // 0x052C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bSplineHasBeenEdited;                                     // 0x052D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bModifiedByConstructionScript;                            // 0x052E(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bInputSplinePointsToConstructionScript;                   // 0x052F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDrawDebug;                                               // 0x0530(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bClosedLoop;                                              // 0x0531(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bLoopPositionOverride;                                    // 0x0532(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0533(0x0001) MISSED OFFSET
	float                                              LoopPosition;                                             // 0x0534(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DefaultUpVector;                                          // 0x0538(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0544(0x000C) MISSED OFFSET

	void UpdateSpline()//offset:0x2EEAA80;
	void SetWorldLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation)//offset:0x2EEA9A0;
	void SetUpVectorAtSplinePoint(int PointIndex, const struct FVector& InUpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)//offset:0x2EEA830;
	void SetUnselectedSplineSegmentColor(const struct FLinearColor& SegmentColor)//offset:0x2EE9FE0;
	void SetTangentsAtSplinePoint(int PointIndex, const struct FVector& InArriveTangent, const struct FVector& InLeaveTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)//offset:0x2EEA660;
	void SetTangentColor(const struct FLinearColor& TangentColor)//offset:0x2EE9FE0;
	void SetTangentAtSplinePoint(int PointIndex, const struct FVector& InTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)//offset:0x2EEA4F0;
	void SetSplineWorldPoints(TArray<struct FVector> Points)//offset:0x2EEA440;
	void SetSplinePointType(int PointIndex, TEnumAsByte<ESplinePointType> Type, bool bUpdateSpline)//offset:0x2EEA200;
	void SetSplinePoints(TArray<struct FVector> Points, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)//offset:0x2EEA310;
	void SetSplineLocalPoints(TArray<struct FVector> Points)//offset:0x2EEA150;
	void SetSelectedSplineSegmentColor(const struct FLinearColor& SegmentColor)//offset:0x2EE9FE0;
	void SetScaleAtSplinePoint(int PointIndex, const struct FVector& InScaleVector, bool bUpdateSpline)//offset:0x2EE9ED0;
	void SetRotationAtSplinePoint(int PointIndex, const struct FRotator& InRotation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)//offset:0x2EE9D60;
	void SetLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)//offset:0x2EE9BF0;
	void SetDrawDebug(bool bShow)//offset:0x2EE9B60;
	void SetDefaultUpVector(const struct FVector& UpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE9A80;
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline)//offset:0x2EE9960;
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline)//offset:0x2EE9890;
	void RemoveSplinePoint(int Index, bool bUpdateSpline)//offset:0x2EE97C0;
	bool IsClosedLoop()//offset:0x2EE9790;
	struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance)//offset:0x2EE96E0;
	struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity)//offset:0x2EE95F0;
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance)//offset:0x2EE9540;
	struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity)//offset:0x2EE9450;
	struct FVector GetWorldLocationAtSplinePoint(int PointIndex)//offset:0x2EE93A0;
	struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance)//offset:0x2EE92F0;
	struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity)//offset:0x2EE9200;
	struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance)//offset:0x2EE9150;
	struct FVector GetVectorPropertyAtSplinePoint(int Index, const struct FName& PropertyName)//offset:0x2EE9070;
	struct FVector GetVectorPropertyAtSplineInputKey(float InKey, const struct FName& PropertyName)//offset:0x2EE8F90;
	struct FVector GetUpVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)//offset:0x2EE8E60;
	struct FVector GetUpVectorAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE8D80;
	struct FVector GetUpVectorAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE8C90;
	struct FVector GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE8BA0;
	struct FTransform GetTransformAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale)//offset:0x2EE8A00;
	struct FTransform GetTransformAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale)//offset:0x2EE88B0;
	struct FTransform GetTransformAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale)//offset:0x2EE8750;
	struct FTransform GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale)//offset:0x2EE85F0;
	struct FVector GetTangentAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)//offset:0x2EE84C0;
	struct FVector GetTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE6B30;
	struct FVector GetTangentAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE83D0;
	struct FVector GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE82E0;
	TEnumAsByte<ESplinePointType> GetSplinePointType(int PointIndex)//offset:0x2EE8240;
	float GetSplineLength()//offset:0x2EE8210;
	struct FVector GetScaleAtTime(float Time, bool bUseConstantVelocity)//offset:0x2EE8090;
	struct FVector GetScaleAtSplinePoint(int PointIndex)//offset:0x2EE7FE0;
	struct FVector GetScaleAtSplineInputKey(float InKey)//offset:0x2EE7F40;
	struct FVector GetScaleAtDistanceAlongSpline(float Distance)//offset:0x2EE7EA0;
	struct FRotator GetRotationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)//offset:0x2EE7D70;
	struct FRotator GetRotationAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE7C90;
	struct FRotator GetRotationAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE7BA0;
	struct FRotator GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE7AB0;
	float GetRollAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)//offset:0x2EE7990;
	float GetRollAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE78C0;
	float GetRollAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE77E0;
	float GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE7700;
	struct FVector GetRightVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)//offset:0x2EE75D0;
	struct FVector GetRightVectorAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE74F0;
	struct FVector GetRightVectorAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE7400;
	struct FVector GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE7310;
	int GetNumberOfSplineSegments()//offset:0x2EE72E0;
	int GetNumberOfSplinePoints()//offset:0x2EE72B0;
	struct FVector GetLocationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)//offset:0x2EE7180;
	struct FVector GetLocationAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE70A0;
	struct FVector GetLocationAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE6FB0;
	struct FVector GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE6EC0;
	void GetLocationAndTangentAtSplinePoint(int PointIndex, struct FVector* Location, struct FVector* Tangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE6D40;
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, struct FVector* LocalLocation, struct FVector* LocalTangent)//offset:0x2EE6C10;
	struct FVector GetLeaveTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE6B30;
	float GetInputKeyAtDistanceAlongSpline(float Distance)//offset:0x2EE6A90;
	float GetFloatPropertyAtSplinePoint(int Index, const struct FName& PropertyName)//offset:0x2EE69C0;
	float GetFloatPropertyAtSplineInputKey(float InKey, const struct FName& PropertyName)//offset:0x2EE68F0;
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex)//offset:0x2EE6850;
	float GetDistanceAlongSplineAtSplineInputKey(float InKey)//offset:0x2EE67B0;
	struct FVector GetDirectionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)//offset:0x2EE6680;
	struct FVector GetDirectionAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE65A0;
	struct FVector GetDirectionAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE64B0;
	struct FVector GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE63C0;
	struct FVector GetDefaultUpVector(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE6320;
	struct FVector GetArriveTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE6240;
	struct FVector FindUpVectorClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE6150;
	struct FTransform FindTransformClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale)//offset:0x2EE5FF0;
	struct FVector FindTangentClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE5F00;
	struct FVector FindScaleClosestToWorldLocation(const struct FVector& WorldLocation)//offset:0x2EE5E50;
	struct FRotator FindRotationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE5D60;
	float FindRollClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE5C80;
	struct FVector FindRightVectorClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE5B90;
	struct FVector FindLocationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE5AA0;
	float FindInputKeyClosestToWorldLocation(const struct FVector& WorldLocation)//offset:0x2EE5A00;
	struct FVector FindDirectionClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)//offset:0x2EE5910;
	void ClearSplinePoints(bool bUpdateSpline)//offset:0x2EE5880;
	void AddSplineWorldPoint(const struct FVector& Position)//offset:0x2EE57E0;
	void AddSplinePointAtIndex(const struct FVector& Position, int Index, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)//offset:0x2EE5670;
	void AddSplinePoint(const struct FVector& Position, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)//offset:0x2EE5550;
	void AddSplineLocalPoint(const struct FVector& Position)//offset:0x2EE54C0;
	void AddPoints(TArray<struct FSplinePoint> Points, bool bUpdateSpline)//offset:0x2EE53C0;
	void AddPoint(const struct FSplinePoint& Point, bool bUpdateSpline)//offset:0x2EE52B0;
};


// Class Engine.DamageType
// size:0x0018 (0x0028 - 0x0040)
class UDamageType : public UObject
{
public:
	unsigned char                                      bCausedByWorld;                                           // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bScaleMomentumByMass;                                     // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRadialDamageVelChange;                                   // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              DamageImpulse;                                            // 0x002C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DestructibleImpulse;                                      // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DestructibleDamageSpreadScale;                            // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DamageFalloff;                                            // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
};


// Class Engine.GameSession
// size:0x0018 (0x0220 - 0x0238)
class AGameSession : public AInfo
{
public:
	int                                                MaxSpectators;                                            // 0x0220(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MaxPlayers;                                               // 0x0224(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MaxPartySize;                                             // 0x0228(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      MaxSplitscreensPerConnection;                             // 0x022C(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bRequiresPushToTalk;                                      // 0x022D(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x022E(0x0002) MISSED OFFSET
	struct FName                                       SessionName;                                              // 0x0230(0x0008) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.Engine
// size:0x0DB8 (0x0028 - 0x0DE0)
class UEngine : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class UFont*                                       TinyFont;                                                 // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             TinyFontName;                                             // 0x0038(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UFont*                                       SmallFont;                                                // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             SmallFontName;                                            // 0x0058(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UFont*                                       MediumFont;                                               // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             MediumFontName;                                           // 0x0078(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UFont*                                       LargeFont;                                                // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             LargeFontName;                                            // 0x0098(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UFont*                                       SubtitleFont;                                             // 0x00B0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             SubtitleFontName;                                         // 0x00B8(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	TArray<class UFont*>                               AdditionalFonts;                                          // 0x00D0(0x0010) (ZeroConstructor)
	TArray<class FString>                              AdditionalFontNames;                                      // 0x00E0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UConsole*                                    ConsoleClass;                                             // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              ConsoleClassName;                                         // 0x00F8(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UGameViewportClient*                         GameViewportClientClass;                                  // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              GameViewportClientClassName;                              // 0x0118(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class ULocalPlayer*                                LocalPlayerClass;                                         // 0x0130(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              LocalPlayerClassName;                                     // 0x0138(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class AWorldSettings*                              WorldSettingsClass;                                       // 0x0150(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              WorldSettingsClassName;                                   // 0x0158(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FSoftClassPath                              NavigationSystemClassName;                                // 0x0170(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UNavigationSystemBase*                       NavigationSystemClass;                                    // 0x0188(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              NavigationSystemConfigClassName;                          // 0x0190(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UNavigationSystemConfig*                     NavigationSystemConfigClass;                              // 0x01A8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              AvoidanceManagerClassName;                                // 0x01B0(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UAvoidanceManager*                           AvoidanceManagerClass;                                    // 0x01C8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              AIControllerClassName;                                    // 0x01D0(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UPhysicsCollisionHandler*                    PhysicsCollisionHandlerClass;                             // 0x01E8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              PhysicsCollisionHandlerClassName;                         // 0x01F0(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FSoftClassPath                              GameUserSettingsClassName;                                // 0x0208(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UGameUserSettings*                           GameUserSettingsClass;                                    // 0x0220(0x0008) (ZeroConstructor, IsPlainOldData)
	class UGameUserSettings*                           GameUserSettings;                                         // 0x0228(0x0008) (ZeroConstructor, IsPlainOldData)
	class ALevelScriptActor*                           LevelScriptActorClass;                                    // 0x0230(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              LevelScriptActorClassName;                                // 0x0238(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FSoftClassPath                              DefaultBlueprintBaseClassName;                            // 0x0250(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FSoftClassPath                              GameSingletonClassName;                                   // 0x0268(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UObject*                                     GameSingleton;                                            // 0x0280(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              AssetManagerClassName;                                    // 0x0288(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UAssetManager*                               AssetManager;                                             // 0x02A0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  DefaultTexture;                                           // 0x02A8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultTextureName;                                       // 0x02B0(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture*                                    DefaultDiffuseTexture;                                    // 0x02C8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultDiffuseTextureName;                                // 0x02D0(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  DefaultBSPVertexTexture;                                  // 0x02E8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultBSPVertexTextureName;                              // 0x02F0(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  HighFrequencyNoiseTexture;                                // 0x0308(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             HighFrequencyNoiseTextureName;                            // 0x0310(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  DefaultBokehTexture;                                      // 0x0328(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultBokehTextureName;                                  // 0x0330(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  DefaultBloomKernelTexture;                                // 0x0348(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultBloomKernelTextureName;                            // 0x0350(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   WireframeMaterial;                                        // 0x0368(0x0008) (ZeroConstructor, IsPlainOldData)
	class FString                                      WireframeMaterialName;                                    // 0x0370(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   DebugMeshMaterial;                                        // 0x0380(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DebugMeshMaterialName;                                    // 0x0388(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   EmissiveMeshMaterial;                                     // 0x03A0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             EmissiveMeshMaterialName;                                 // 0x03A8(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   LevelColorationLitMaterial;                               // 0x03C0(0x0008) (ZeroConstructor, IsPlainOldData)
	class FString                                      LevelColorationLitMaterialName;                           // 0x03C8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   LevelColorationUnlitMaterial;                             // 0x03D8(0x0008) (ZeroConstructor, IsPlainOldData)
	class FString                                      LevelColorationUnlitMaterialName;                         // 0x03E0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   LightingTexelDensityMaterial;                             // 0x03F0(0x0008) (ZeroConstructor, IsPlainOldData)
	class FString                                      LightingTexelDensityName;                                 // 0x03F8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   ShadedLevelColorationLitMaterial;                         // 0x0408(0x0008) (ZeroConstructor, IsPlainOldData)
	class FString                                      ShadedLevelColorationLitMaterialName;                     // 0x0410(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;                       // 0x0420(0x0008) (ZeroConstructor, IsPlainOldData)
	class FString                                      ShadedLevelColorationUnlitMaterialName;                   // 0x0428(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   RemoveSurfaceMaterial;                                    // 0x0438(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             RemoveSurfaceMaterialName;                                // 0x0440(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorMaterial;                                      // 0x0458(0x0008) (ZeroConstructor, IsPlainOldData)
	class FString                                      VertexColorMaterialName;                                  // 0x0460(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;                    // 0x0470(0x0008) (ZeroConstructor, IsPlainOldData)
	class FString                                      VertexColorViewModeMaterialName_ColorOnly;                // 0x0478(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;                 // 0x0488(0x0008) (ZeroConstructor, IsPlainOldData)
	class FString                                      VertexColorViewModeMaterialName_AlphaAsColor;             // 0x0490(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;                      // 0x04A0(0x0008) (ZeroConstructor, IsPlainOldData)
	class FString                                      VertexColorViewModeMaterialName_RedOnly;                  // 0x04A8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;                    // 0x04B8(0x0008) (ZeroConstructor, IsPlainOldData)
	class FString                                      VertexColorViewModeMaterialName_GreenOnly;                // 0x04C0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;                     // 0x04D0(0x0008) (ZeroConstructor, IsPlainOldData)
	class FString                                      VertexColorViewModeMaterialName_BlueOnly;                 // 0x04D8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	struct FSoftObjectPath                             DebugEditorMaterialName;                                  // 0x04E8(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   ConstraintLimitMaterial;                                  // 0x0500(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialX;                                 // 0x0508(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialXAxis;                             // 0x0510(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialY;                                 // 0x0518(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialYAxis;                             // 0x0520(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZ;                                 // 0x0528(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZAxis;                             // 0x0530(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialPrismatic;                         // 0x0538(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterial*                                   InvalidLightmapSettingsMaterial;                          // 0x0540(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             InvalidLightmapSettingsMaterialName;                      // 0x0548(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   PreviewShadowsIndicatorMaterial;                          // 0x0560(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             PreviewShadowsIndicatorMaterialName;                      // 0x0568(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   ArrowMaterial;                                            // 0x0580(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ArrowMaterialYellow;                                      // 0x0588(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             ArrowMaterialName;                                        // 0x0590(0x0018) (ZeroConstructor, Config, GlobalConfig)
	struct FLinearColor                                LightingOnlyBrightness;                                   // 0x05A8(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	TArray<struct FLinearColor>                        ShaderComplexityColors;                                   // 0x05B8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        QuadComplexityColors;                                     // 0x05C8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        LightComplexityColors;                                    // 0x05D8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        StationaryLightOverlapColors;                             // 0x05E8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        LODColorationColors;                                      // 0x05F8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        HLODColorationColors;                                     // 0x0608(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        StreamingAccuracyColors;                                  // 0x0618(0x0010) (ZeroConstructor, Config, GlobalConfig)
	float                                              MaxPixelShaderAdditiveComplexityCount;                    // 0x0628(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxES3PixelShaderAdditiveComplexityCount;                 // 0x062C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MinLightMapDensity;                                       // 0x0630(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              IdealLightMapDensity;                                     // 0x0634(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxLightMapDensity;                                       // 0x0638(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      bRenderLightMapDensityGrayscale;                          // 0x063C(0x0001) (Config, GlobalConfig)
	unsigned char                                      UnknownData01[0x3];                                       // 0x063D(0x0003) MISSED OFFSET
	float                                              RenderLightMapDensityGrayscaleScale;                      // 0x0640(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              RenderLightMapDensityColorScale;                          // 0x0644(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	struct FLinearColor                                LightMapDensityVertexMappedColor;                         // 0x0648(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	struct FLinearColor                                LightMapDensitySelectedColor;                             // 0x0658(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	TArray<struct FStatColorMapping>                   StatColorMappings;                                        // 0x0668(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UPhysicalMaterial*                           DefaultPhysMaterial;                                      // 0x0678(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultPhysMaterialName;                                  // 0x0680(0x0018) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FGameNameRedirect>                   ActiveGameNameRedirects;                                  // 0x0698(0x0010) (ZeroConstructor, Config)
	TArray<struct FClassRedirect>                      ActiveClassRedirects;                                     // 0x06A8(0x0010) (ZeroConstructor, Config)
	TArray<struct FPluginRedirect>                     ActivePluginRedirects;                                    // 0x06B8(0x0010) (ZeroConstructor, Config)
	TArray<struct FStructRedirect>                     ActiveStructRedirects;                                    // 0x06C8(0x0010) (ZeroConstructor, Config)
	class UTexture2D*                                  PreIntegratedSkinBRDFTexture;                             // 0x06D8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             PreIntegratedSkinBRDFTextureName;                         // 0x06E0(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  BlueNoiseTexture;                                         // 0x06F8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             BlueNoiseTextureName;                                     // 0x0700(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  MiniFontTexture;                                          // 0x0718(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             MiniFontTextureName;                                      // 0x0720(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture*                                    WeightMapPlaceholderTexture;                              // 0x0738(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             WeightMapPlaceholderTextureName;                          // 0x0740(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  LightMapDensityTexture;                                   // 0x0758(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             LightMapDensityTextureName;                               // 0x0760(0x0018) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0778(0x0008) MISSED OFFSET
	class UGameViewportClient*                         GameViewport;                                             // 0x0780(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class FString>                              DeferredCommands;                                         // 0x0788(0x0010) (ZeroConstructor)
	float                                              NearClipPlane;                                            // 0x0798(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bSubtitlesEnabled;                                        // 0x079C(0x0001) (Edit, Config)
	unsigned char                                      bSubtitlesForcedOff;                                      // 0x079C(0x0001) (Edit, Config)
	unsigned char                                      UnknownData03[0x3];                                       // 0x079D(0x0003) MISSED OFFSET
	int                                                MaximumLoopIterationCount;                                // 0x07A0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bCanBlueprintsTickByDefault;                              // 0x07A4(0x0001) (Edit, Config)
	unsigned char                                      bOptimizeAnimBlueprintMemberVariableAccess;               // 0x07A4(0x0001) (Edit, Config)
	unsigned char                                      bAllowMultiThreadedAnimationUpdate;                       // 0x07A4(0x0001) (Edit, Config)
	unsigned char                                      bEnableEditorPSysRealtimeLOD;                             // 0x07A4(0x0001) (Config)
	unsigned char                                      bSmoothFrameRate;                                         // 0x07A4(0x0001) (Edit, Config)
	unsigned char                                      bUseFixedFrameRate;                                       // 0x07A4(0x0001) (Edit, Config)
	unsigned char                                      UnknownData04[0x3];                                       // 0x07A5(0x0003) MISSED OFFSET
	float                                              FixedFrameRate;                                           // 0x07A8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FFloatRange                                 SmoothedFrameRateRange;                                   // 0x07AC(0x0010) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x07BC(0x0004) MISSED OFFSET
	class UEngineCustomTimeStep*                       CustomTimeStep;                                           // 0x07C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x20];                                      // 0x07C8(0x0020) MISSED OFFSET
	struct FSoftClassPath                              CustomTimeStepClassName;                                  // 0x07E8(0x0018) (Edit, ZeroConstructor, Config)
	class UTimecodeProvider*                           TimecodeProvider;                                         // 0x0800(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x20];                                      // 0x0808(0x0020) MISSED OFFSET
	struct FSoftClassPath                              TimecodeProviderClassName;                                // 0x0828(0x0018) (Edit, ZeroConstructor, Config)
	bool                                               bGenerateDefaultTimecode;                                 // 0x0840(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0841(0x0003) MISSED OFFSET
	struct FFrameRate                                  GenerateDefaultTimecodeFrameRate;                         // 0x0844(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              GenerateDefaultTimecodeFrameDelay;                        // 0x084C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bCheckForMultiplePawnsSpawnedInAFrame;                    // 0x0850(0x0001) (Config)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0851(0x0003) MISSED OFFSET
	int                                                NumPawnsAllowedToBeSpawnedInAFrame;                       // 0x0854(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bShouldGenerateLowQualityLightmaps;                       // 0x0858(0x0001) (Config, GlobalConfig, Deprecated)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0859(0x0003) MISSED OFFSET
	struct FColor                                      C_WorldBox;                                               // 0x085C(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_BrushWire;                                              // 0x0860(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_AddWire;                                                // 0x0864(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_SubtractWire;                                           // 0x0868(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_SemiSolidWire;                                          // 0x086C(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_NonSolidWire;                                           // 0x0870(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_WireBackground;                                         // 0x0874(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_ScaleBoxHi;                                             // 0x0878(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_VolumeCollision;                                        // 0x087C(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_BSPCollision;                                           // 0x0880(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_OrthoBackground;                                        // 0x0884(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_Volume;                                                 // 0x0888(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_BrushShape;                                             // 0x088C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              StreamingDistanceFactor;                                  // 0x0890(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x0894(0x0004) MISSED OFFSET
	struct FDirectoryPath                              GameScreenshotSaveDirectory;                              // 0x0898(0x0010) (Edit, Config)
	ETransitionType                                    TransitionType;                                           // 0x08A8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x7];                                       // 0x08A9(0x0007) MISSED OFFSET
	class FString                                      TransitionDescription;                                    // 0x08B0(0x0010) (ZeroConstructor)
	class FString                                      TransitionGameMode;                                       // 0x08C0(0x0010) (ZeroConstructor)
	unsigned char                                      bAllowMatureLanguage;                                     // 0x08D0(0x0001) (Config)
	unsigned char                                      UnknownData13[0x3];                                       // 0x08D1(0x0003) MISSED OFFSET
	float                                              CameraRotationThreshold;                                  // 0x08D4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              CameraTranslationThreshold;                               // 0x08D8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PrimitiveProbablyVisibleTime;                             // 0x08DC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxOcclusionPixelsFraction;                               // 0x08E0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bPauseOnLossOfFocus;                                      // 0x08E4(0x0001) (Config)
	unsigned char                                      UnknownData14[0x3];                                       // 0x08E5(0x0003) MISSED OFFSET
	int                                                MaxParticleResize;                                        // 0x08E8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxParticleResizeWarn;                                    // 0x08EC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FDropNoteInfo>                       PendingDroppedNotes;                                      // 0x08F0(0x0010) (ZeroConstructor, Transient)
	float                                              NetClientTicksPerSecond;                                  // 0x0900(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              DisplayGamma;                                             // 0x0904(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MinDesiredFrameRate;                                      // 0x0908(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FLinearColor                                DefaultSelectedMaterialColor;                             // 0x090C(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	struct FLinearColor                                SelectedMaterialColor;                                    // 0x091C(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	struct FLinearColor                                SelectionOutlineColor;                                    // 0x092C(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	struct FLinearColor                                SubduedSelectionOutlineColor;                             // 0x093C(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	struct FLinearColor                                SelectedMaterialColorOverride;                            // 0x094C(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsOverridingSelectedColor;                               // 0x095C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData15[0x3];                                       // 0x095D(0x0003) MISSED OFFSET
	unsigned char                                      bEnableOnScreenDebugMessages;                             // 0x0960(0x0001) (Config, GlobalConfig)
	unsigned char                                      bEnableOnScreenDebugMessagesDisplay;                      // 0x0960(0x0001) (Transient)
	unsigned char                                      bSuppressMapWarnings;                                     // 0x0960(0x0001) (Config, GlobalConfig)
	unsigned char                                      bDisableAILogging;                                        // 0x0960(0x0001) (Config, GlobalConfig)
	unsigned char                                      UnknownData16[0x3];                                       // 0x0961(0x0003) MISSED OFFSET
	uint32_t                                           bEnableVisualLogRecordingOnStart;                         // 0x0964(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                ScreenSaverInhibitorSemaphore;                            // 0x0968(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bLockReadOnlyLevels;                                      // 0x096C(0x0001) (Transient)
	unsigned char                                      UnknownData17[0x3];                                       // 0x096D(0x0003) MISSED OFFSET
	class FString                                      ParticleEventManagerClassPath;                            // 0x0970(0x0010) (ZeroConstructor, Config, GlobalConfig)
	float                                              SelectionHighlightIntensity;                              // 0x0980(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              BSPSelectionHighlightIntensity;                           // 0x0984(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              SelectionHighlightIntensityBillboards;                    // 0x0988(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData18[0x26C];                                     // 0x098C(0x026C) MISSED OFFSET
	TArray<struct FNetDriverDefinition>                NetDriverDefinitions;                                     // 0x0BF8(0x0010) (ZeroConstructor, Transient, Config)
	TArray<class FString>                              ServerActors;                                             // 0x0C08(0x0010) (ZeroConstructor, Config)
	TArray<class FString>                              RuntimeServerActors;                                      // 0x0C18(0x0010) (ZeroConstructor)
	float                                              NetErrorLogInterval;                                      // 0x0C28(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      bStartedLoadMapMovie;                                     // 0x0C2C(0x0001) (Transient)
	unsigned char                                      UnknownData19[0x1B];                                      // 0x0C2D(0x001B) MISSED OFFSET
	int                                                NextWorldContextHandle;                                   // 0x0C48(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData20[0x194];                                     // 0x0C4C(0x0194) MISSED OFFSET
};


// Class Engine.ScriptViewportClient
// size:0x0010 (0x0028 - 0x0038)
class UScriptViewportClient : public UObject
{
public:
};


// Class Engine.GameViewportClient
// size:0x0328 (0x0038 - 0x0360)
class UGameViewportClient : public UScriptViewportClient
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	class UConsole*                                    ViewportConsole;                                          // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FDebugDisplayProperty>               DebugProperties;                                          // 0x0048(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0058(0x0010) MISSED OFFSET
	int                                                MaxSplitscreenPlayers;                                    // 0x0068(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x006C(0x000C) MISSED OFFSET
	class UWorld*                                      World;                                                    // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData)
	class UGameInstance*                               GameInstance;                                             // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2D8];                                     // 0x0088(0x02D8) MISSED OFFSET

	void SSSwapControllers()//offset:0x1F582B0;
	void ShowTitleSafeArea()//offset:0xF54880;
	void SetConsoleTarget(int PlayerIndex)//offset:0x2DFCB80;
};


// Class Engine.HUD
// size:0x00F0 (0x0220 - 0x0310)
class AHUD : public AActor
{
public:
	class APlayerController*                           PlayerOwner;                                              // 0x0220(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLostFocusPaused;                                         // 0x0228(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bShowHUD;                                                 // 0x0228(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bShowDebugInfo;                                           // 0x0228(0x0001) (BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0229(0x0003) MISSED OFFSET
	int                                                CurrentTargetIndex;                                       // 0x022C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bShowHitBoxDebugInfo;                                     // 0x0230(0x0001) (BlueprintVisible)
	unsigned char                                      bShowOverlays;                                            // 0x0230(0x0001) (BlueprintVisible)
	unsigned char                                      bEnableDebugTextShadow;                                   // 0x0230(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0231(0x0007) MISSED OFFSET
	TArray<class AActor*>                              PostRenderedActors;                                       // 0x0238(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0248(0x0008) MISSED OFFSET
	TArray<struct FName>                               DebugDisplay;                                             // 0x0250(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FName>                               ToggledDebugCategories;                                   // 0x0260(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UCanvas*                                     Canvas;                                                   // 0x0270(0x0008) (ZeroConstructor, IsPlainOldData)
	class UCanvas*                                     DebugCanvas;                                              // 0x0278(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FDebugTextInfo>                      DebugTextList;                                            // 0x0280(0x0010) (ZeroConstructor)
	class AActor*                                      ShowDebugTargetDesiredClass;                              // 0x0290(0x0008) (ZeroConstructor, IsPlainOldData)
	class AActor*                                      ShowDebugTargetActor;                                     // 0x0298(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x70];                                      // 0x02A0(0x0070) MISSED OFFSET

	void ShowHUD()//offset:0x2DE3C30;
	void ShowDebugToggleSubCategory(const struct FName& Category)//offset:0x2DFCD30;
	void ShowDebugForReticleTargetToggle(class AActor* DesiredClass)//offset:0x2DFCCA0;
	void ShowDebug(const struct FName& DebugType)//offset:0x2DFCC10;
	void RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText)//offset:0x2DFC9F0;
	void RemoveAllDebugStrings()//offset:0x2DFC9D0;
	void ReceiveHitBoxRelease(const struct FName& BoxName)//offset:0x13CEB30;
	void ReceiveHitBoxEndCursorOver(const struct FName& BoxName)//offset:0x13CEB30;
	void ReceiveHitBoxClick(const struct FName& BoxName)//offset:0x13CEB30;
	void ReceiveHitBoxBeginCursorOver(const struct FName& BoxName)//offset:0x13CEB30;
	void ReceiveDrawHUD(int SizeX, int SizeY)//offset:0x13CEB30;
	struct FVector Project(const struct FVector& Location)//offset:0x2DFC520;
	void PreviousDebugTarget()//offset:0x2DFC500;
	void NextDebugTarget()//offset:0x8A1770;
	void GetTextSize(const class FString& Text, float* OutWidth, float* OutHeight, class UFont* Font, float Scale)//offset:0x2DFB9E0;
	class APlayerController* GetOwningPlayerController()//offset:0x2DFB9B0;
	class APawn* GetOwningPawn()//offset:0x2DFB980;
	void GetActorsInSelectionRectangle(class AActor* ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, TArray<class AActor*>* OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed)//offset:0x2DFB760;
	void DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition)//offset:0x2DFB5B0;
	void DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, TEnumAsByte<EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot)//offset:0x2DFB150;
	void DrawText(const class FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition)//offset:0x2DFAF10;
	void DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH)//offset:0x2DFAD50;
	void DrawMaterialTriangle(class UMaterialInterface* Material, const struct FVector2D& V0_Pos, const struct FVector2D& V1_Pos, const struct FVector2D& V2_Pos, const struct FVector2D& V0_UV, const struct FVector2D& V1_UV, const struct FVector2D& V2_UV, const struct FLinearColor& V0_Color, const struct FLinearColor& V1_Color, const struct FLinearColor& V2_Color)//offset:0x2DFAA60;
	void DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition)//offset:0x2DFA840;
	void DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot)//offset:0x2DFA470;
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor, float LineThickness)//offset:0x2DFA270;
	void Deproject(float ScreenX, float ScreenY, struct FVector* WorldPosition, struct FVector* WorldDirection)//offset:0x2DFA0F0;
	void AddHitBox(const struct FVector2D& Position, const struct FVector2D& Size, const struct FName& InName, bool bConsumesInput, int Priority)//offset:0x2DF9DD0;
	void AddDebugText(const class FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow)//offset:0x2DF9A10;
};


// Class Engine.PhysicsVolume
// size:0x0010 (0x0258 - 0x0268)
class APhysicsVolume : public AVolume
{
public:
	float                                              TerminalVelocity;                                         // 0x0258(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Priority;                                                 // 0x025C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FluidFriction;                                            // 0x0260(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bWaterVolume;                                             // 0x0264(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPhysicsOnContact;                                        // 0x0264(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0265(0x0003) MISSED OFFSET
};


// Class Engine.PlayerState
// size:0x0100 (0x0220 - 0x0320)
class APlayerState : public AInfo
{
public:
	float                                              Score;                                                    // 0x0220(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	int                                                PlayerId;                                                 // 0x0224(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      Ping;                                                     // 0x0228(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0229(0x0001) MISSED OFFSET
	unsigned char                                      bShouldUpdateReplicatedPing;                              // 0x022A(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bIsSpectator;                                             // 0x022A(0x0001) (BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      bOnlySpectator;                                           // 0x022A(0x0001) (Net)
	unsigned char                                      bIsABot;                                                  // 0x022A(0x0001) (BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      bIsInactive;                                              // 0x022A(0x0001) (Net)
	unsigned char                                      bFromPreviousLevel;                                       // 0x022A(0x0001) (Net)
	unsigned char                                      UnknownData01[0x1];                                       // 0x022B(0x0001) MISSED OFFSET
	int                                                StartTime;                                                // 0x022C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	class ULocalMessage*                               EngineMessageClass;                                       // 0x0230(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0238(0x0008) MISSED OFFSET
	class FString                                      SavedNetworkAddress;                                      // 0x0240(0x0010) (ZeroConstructor)
	struct FUniqueNetIdRepl                            UniqueId;                                                 // 0x0250(0x0028) (Net)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0278(0x0008) MISSED OFFSET
	class APawn*                                       PawnPrivate;                                              // 0x0280(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x78];                                      // 0x0288(0x0078) MISSED OFFSET
	class FString                                      PlayerNamePrivate;                                        // 0x0300(0x0010) (Net, ZeroConstructor)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0310(0x0010) MISSED OFFSET

	void ReceiveOverrideWith(class APlayerState* OldPlayerState)//offset:0x13CEB30;
	void ReceiveCopyProperties(class APlayerState* NewPlayerState)//offset:0x13CEB30;
	void OnRep_UniqueId()//offset:0x939270;
	void OnRep_Score()//offset:0x2DE3C30;
	void OnRep_PlayerName()//offset:0xF45DD0;
	void OnRep_PlayerId()//offset:0x2E822C0;
	void OnRep_bIsInactive()//offset:0xF6E9A0;
	class FString GetPlayerName()//offset:0x2EB6D40;
};


// Class Engine.ProjectileMovementComponent
// size:0x00E0 (0x00F0 - 0x01D0)
class UProjectileMovementComponent : public UMovementComponent
{
public:
	float                                              InitialSpeed;                                             // 0x00F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSpeed;                                                 // 0x00F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRotationFollowsVelocity;                                 // 0x00F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bRotationRemainsVertical;                                 // 0x00F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bShouldBounce;                                            // 0x00F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInitialVelocityInLocalSpace;                             // 0x00F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceSubStepping;                                        // 0x00F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSimulationEnabled;                                       // 0x00F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSweepCollision;                                          // 0x00F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsHomingProjectile;                                      // 0x00F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bBounceAngleAffectsFriction;                              // 0x00F9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsSliding;                                               // 0x00F9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      bInterpMovement;                                          // 0x00F9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInterpRotation;                                          // 0x00F9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00FA(0x0002) MISSED OFFSET
	float                                              PreviousHitTime;                                          // 0x00FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FVector                                     PreviousHitNormal;                                        // 0x0100(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              ProjectileGravityScale;                                   // 0x010C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Buoyancy;                                                 // 0x0110(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Bounciness;                                               // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Friction;                                                 // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BounceVelocityStopSimulatingThreshold;                    // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinFrictionFraction;                                      // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnProjectileBounce;                                       // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnProjectileStop;                                         // 0x0138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              HomingAccelerationMagnitude;                              // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class USceneComponent>              HomingTargetComponent;                                    // 0x014C(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	float                                              MaxSimulationTimeStep;                                    // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                BounceAdditionalIterations;                               // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InterpLocationTime;                                       // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InterpRotationTime;                                       // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InterpLocationMaxLagDistance;                             // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InterpLocationSnapToTargetDistance;                       // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x60];                                      // 0x0170(0x0060) MISSED OFFSET

	void StopSimulating(const struct FHitResult& HitResult)//offset:0x2EBDE50;
	void SetVelocityInLocalSpace(const struct FVector& NewVelocity)//offset:0x2EBDDC0;
	void SetInterpolatedComponent(class USceneComponent* Component)//offset:0x2EBDC20;
	void ResetInterpolation()//offset:0x2DA5AD0;
	void OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult)//offset:0x13CEB30;
	void OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity)//offset:0x13CEB30;
	void MoveInterpolationTarget(const struct FVector& NewLocation, const struct FRotator& NewRotation)//offset:0x2EBD9B0;
	struct FVector LimitVelocity(const struct FVector& NewVelocity)//offset:0x2EBD900;
	bool IsVelocityUnderSimulationThreshold()//offset:0x2EBD8A0;
	bool IsInterpolationComplete()//offset:0x2EBD870;
};


// Class Engine.CurveBase
// size:0x0008 (0x0028 - 0x0030)
class UCurveBase : public UObject
{
public:

	void GetValueRange(float* MinValue, float* MaxValue)//offset:0x2DCB240;
	void GetTimeRange(float* MinTime, float* MaxTime)//offset:0x2DCB160;
};


// Class Engine.CurveFloat
// size:0x0088 (0x0030 - 0x00B8)
class UCurveFloat : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurve;                                               // 0x0030(0x0080)
	bool                                               bIsEventCurve;                                            // 0x00B0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET

	float GetFloatValue(float InTime)//offset:0x2DCB0C0;
};


// Class Engine.SoundNode
// size:0x0020 (0x0028 - 0x0048)
class USoundNode : public UObject
{
public:
	TArray<class USoundNode*>                          ChildNodes;                                               // 0x0028(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET
};


// Class Engine.TriggerVolume
// size:0x0000 (0x0258 - 0x0258)
class ATriggerVolume : public AVolume
{
public:
};


// Class Engine.WorldSettings
// size:0x0180 (0x0220 - 0x03A0)
class AWorldSettings : public AInfo
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0220(0x0008) MISSED OFFSET
	int                                                VisibilityCellSize;                                       // 0x0228(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EVisibilityAggressiveness>             VisibilityAggressiveness;                                 // 0x022C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPrecomputeVisibility;                                    // 0x022D(0x0001) (Edit)
	unsigned char                                      bPlaceCellsOnlyAlongCameraTracks;                         // 0x022D(0x0001) (Edit)
	unsigned char                                      bEnableWorldBoundsChecks;                                 // 0x022D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableNavigationSystem;                                  // 0x022D(0x0001) (BlueprintVisible, BlueprintReadOnly, Config)
	unsigned char                                      bEnableAISystem;                                          // 0x022D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	unsigned char                                      bEnableWorldComposition;                                  // 0x022D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseClientSideLevelStreamingVolumes;                      // 0x022D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableWorldOriginRebasing;                               // 0x022D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bWorldGravitySet;                                         // 0x022E(0x0001) (Transient)
	unsigned char                                      bGlobalGravitySet;                                        // 0x022E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bMinimizeBSPSections;                                     // 0x022E(0x0001) (Edit)
	unsigned char                                      bForceNoPrecomputedLighting;                              // 0x022E(0x0001) (Edit)
	unsigned char                                      bHighPriorityLoading;                                     // 0x022E(0x0001) (Net)
	unsigned char                                      bHighPriorityLoadingLocal;                                // 0x022E(0x0001)
	unsigned char                                      bOverrideDefaultBroadphaseSettings;                       // 0x022E(0x0001) (Edit, Config)
	unsigned char                                      UnknownData01[0x1];                                       // 0x022F(0x0001) MISSED OFFSET
	class UNavigationSystemConfig*                     NavigationSystemConfig;                                   // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData)
	class UNavigationSystemConfig*                     NavigationSystemConfigOverride;                           // 0x0238(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              WorldToMeters;                                            // 0x0240(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              KillZ;                                                    // 0x0244(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDamageType*                                 KillZDamageType;                                          // 0x0248(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WorldGravityZ;                                            // 0x0250(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              GlobalGravityZ;                                           // 0x0254(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ADefaultPhysicsVolume*                       DefaultPhysicsVolumeClass;                                // 0x0258(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class UPhysicsCollisionHandler*                    PhysicsCollisionHandlerClass;                             // 0x0260(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AGameModeBase*                               DefaultGameMode;                                          // 0x0268(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AGameNetworkManager*                         GameNetworkManagerClass;                                  // 0x0270(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                PackedLightAndShadowMapTextureSize;                       // 0x0278(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DefaultColorScale;                                        // 0x027C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DefaultMaxDistanceFieldOcclusionDistance;                 // 0x0288(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GlobalDistanceFieldViewDistance;                          // 0x028C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DynamicIndirectShadowsSelfShadowingIntensity;             // 0x0290(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0294(0x0004) MISSED OFFSET
	struct FReverbSettings                             DefaultReverbSettings;                                    // 0x0298(0x0020) (Edit, Config)
	struct FInteriorSettings                           DefaultAmbientZoneSettings;                               // 0x02B8(0x0024) (Edit, Config)
	float                                              MonoCullingDistance;                                      // 0x02DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundMix*                                   DefaultBaseSoundMix;                                      // 0x02E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeDilation;                                             // 0x02E8(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MatineeTimeDilation;                                      // 0x02EC(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DemoPlayTimeDilation;                                     // 0x02F0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              MinGlobalTimeDilation;                                    // 0x02F4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxGlobalTimeDilation;                                    // 0x02F8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinUndilatedFrameTime;                                    // 0x02FC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxUndilatedFrameTime;                                    // 0x0300(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FBroadphaseSettings                         BroadphaseSettings;                                       // 0x0304(0x0040) (Edit, Config)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0344(0x0004) MISSED OFFSET
	class APlayerState*                                Pauser;                                                   // 0x0348(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FNetViewer>                          ReplicationViewers;                                       // 0x0350(0x0010) (ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0360(0x0010) (ExportObject, ZeroConstructor)
	class APlayerState*                                PauserPlayerState;                                        // 0x0370(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                MaxNumberOfBookmarks;                                     // 0x0378(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x037C(0x0004) MISSED OFFSET
	class UBookmarkBase*                               DefaultBookmarkClass;                                     // 0x0380(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	TArray<class UBookmarkBase*>                       BookmarkArray;                                            // 0x0388(0x0010) (ZeroConstructor)
	class UBookmarkBase*                               LastBookmarkClass;                                        // 0x0398(0x0008) (ZeroConstructor, IsPlainOldData)

	void OnRep_WorldGravityZ()//offset:0x2DE3C30;
};


// Class Engine.SkyLight
// size:0x0010 (0x0220 - 0x0230)
class ASkyLight : public AInfo
{
public:
	class USkyLightComponent*                          LightComponent;                                           // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bEnabled;                                                 // 0x0228(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0229(0x0007) MISSED OFFSET

	void OnRep_bEnabled()//offset:0x2DE3C30;
};


// Class Engine.Texture
// size:0x0078 (0x0060 - 0x00D8)
class UTexture : public UStreamableRenderAsset
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FGuid                                       LightingGuid;                                             // 0x0068(0x0010) (ZeroConstructor, IsPlainOldData)
	int                                                LODBias;                                                  // 0x0078(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureCompressionSettings>           CompressionSettings;                                      // 0x007C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureFilter>                        Filter;                                                   // 0x007D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	ETextureMipLoadOptions                             MipLoadOptions;                                           // 0x007E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureGroup>                         LODGroup;                                                 // 0x007F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FPerPlatformFloat                           Downscale;                                                // 0x0080(0x0004) (Edit)
	ETextureDownscaleOptions                           DownscaleOptions;                                         // 0x0084(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      SRGB;                                                     // 0x0085(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNoTiling;                                                // 0x0085(0x0001)
	unsigned char                                      VirtualTextureStreaming;                                  // 0x0085(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CompressionYCoCg;                                         // 0x0085(0x0001)
	unsigned char                                      bNotOfflineProcessed;                                     // 0x0085(0x0001) (Transient)
	unsigned char                                      bAsyncResourceReleaseHasBeenStarted;                      // 0x0085(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0086(0x0002) MISSED OFFSET
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0088(0x0010) (Edit, ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData02[0x40];                                      // 0x0098(0x0040) MISSED OFFSET
};


// Class Engine.TextureCube
// size:0x0058 (0x00D8 - 0x0130)
class UTextureCube : public UTexture
{
public:
};


// Class Engine.InstancedStaticMeshComponent
// size:0x00A0 (0x04F0 - 0x0590)
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x04F0(0x0008) MISSED OFFSET
	int                                                NumCustomDataFloats;                                      // 0x04F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04FC(0x0004) MISSED OFFSET
	TArray<float>                                      PerInstanceSMCustomData;                                  // 0x0500(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	int                                                InstancingRandomSeed;                                     // 0x0510(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                InstanceStartCullDistance;                                // 0x0514(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                InstanceEndCullDistance;                                  // 0x0518(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x051C(0x0004) MISSED OFFSET
	TArray<int>                                        InstanceReorderTable;                                     // 0x0520(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x48];                                      // 0x0530(0x0048) MISSED OFFSET
	int                                                NumPendingLightmaps;                                      // 0x0578(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x057C(0x0004) MISSED OFFSET
	TArray<struct FInstancedStaticMeshMappingInfo>     CachedMappings;                                           // 0x0580(0x0010) (ZeroConstructor, Transient, DuplicateTransient)

	bool UpdateInstanceTransform(int InstanceIndex, const struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport)//offset:0x2E02590;
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty)//offset:0x2E02430;
	void SetCullDistances(int StartCullDistance, int EndCullDistance)//offset:0x2E02360;
	bool RemoveInstance(int InstanceIndex)//offset:0x2E022A0;
	bool GetInstanceTransform(int InstanceIndex, struct FTransform* OutInstanceTransform, bool bWorldSpace)//offset:0x2E01920;
	TArray<int> GetInstancesOverlappingSphere(const struct FVector& Center, float Radius, bool bSphereInWorldSpace)//offset:0x2E01BB0;
	TArray<int> GetInstancesOverlappingBox(const struct FBox& Box, bool bBoxInWorldSpace)//offset:0x2E01A80;
	int GetInstanceCount()//offset:0x2E018F0;
	void ClearInstances()//offset:0x2E01080;
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, TArray<struct FTransform> NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport)//offset:0x2E00E80;
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, const struct FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport)//offset:0x2E00C30;
	int AddInstanceWorldSpace(const struct FTransform& WorldTransform)//offset:0x2E00A10;
	TArray<int> AddInstances(TArray<struct FTransform> InstanceTransforms, bool bShouldReturnIndices)//offset:0x2E00AF0;
	int AddInstance(const struct FTransform& InstanceTransform)//offset:0x2E00930;
};


// Class Engine.HierarchicalInstancedStaticMeshComponent
// size:0x00F0 (0x0590 - 0x0680)
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0590(0x0010) MISSED OFFSET
	TArray<int>                                        SortedInstances;                                          // 0x05A0(0x0010) (ZeroConstructor)
	int                                                NumBuiltInstances;                                        // 0x05B0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x05B4(0x0004) MISSED OFFSET
	struct FBox                                        BuiltInstanceBounds;                                      // 0x05B8(0x001C) (ZeroConstructor, IsPlainOldData)
	struct FBox                                        UnbuiltInstanceBounds;                                    // 0x05D4(0x001C) (ZeroConstructor, IsPlainOldData)
	TArray<struct FBox>                                UnbuiltInstanceBoundsList;                                // 0x05F0(0x0010) (ZeroConstructor)
	unsigned char                                      bEnableDensityScaling;                                    // 0x0600(0x0001)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0601(0x0007) MISSED OFFSET
	int                                                OcclusionLayerNumNodes;                                   // 0x0608(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FBoxSphereBounds                            CacheMeshExtendedBounds;                                  // 0x060C(0x001C) (ZeroConstructor, IsPlainOldData)
	bool                                               bDisableCollision;                                        // 0x0628(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0629(0x0003) MISSED OFFSET
	int                                                InstanceCountToRender;                                    // 0x062C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x50];                                      // 0x0630(0x0050) MISSED OFFSET

	bool RemoveInstances(TArray<int> InstancesToRemove)//offset:0x2DFCAC0;
};


// Class Engine.StaticMeshActor
// size:0x0010 (0x0220 - 0x0230)
class AStaticMeshActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bStaticMeshReplicateMovement;                             // 0x0228(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	ENavDataGatheringMode                              NavigationGeometryGatheringMode;                          // 0x0229(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x022A(0x0006) MISSED OFFSET

	void SetMobility(TEnumAsByte<EComponentMobility> InMobility)//offset:0x2EF2140;
};


// Class Engine.MaterialInterface
// size:0x0060 (0x0028 - 0x0088)
class UMaterialInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	class USubsurfaceProfile*                          SubsurfaceProfile;                                        // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0040(0x0010) MISSED OFFSET
	struct FLightmassMaterialInterfaceSettings         LightmassSettings;                                        // 0x0050(0x0010) (Edit)
	TArray<struct FMaterialTextureInfo>                TextureStreamingData;                                     // 0x0060(0x0010) (ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0070(0x0010) (Edit, ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0080(0x0008) MISSED OFFSET

	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse)//offset:0x2E822E0;
	class UPhysicalMaterialMask* GetPhysicalMaterialMask()//offset:0x2E81CB0;
	class UPhysicalMaterial* GetPhysicalMaterialFromMap(int Index)//offset:0x2E81C10;
	class UPhysicalMaterial* GetPhysicalMaterial()//offset:0x2496A90;
	struct FMaterialParameterInfo GetParameterInfo(TEnumAsByte<EMaterialParameterAssociation> Association, const struct FName& ParameterName, class UMaterialFunctionInterface* LayerFunction)//offset:0x2E81AF0;
	class UMaterial* GetBaseMaterial()//offset:0x2E81AC0;
};


// Class Engine.MaterialInstance
// size:0x02D8 (0x0088 - 0x0360)
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x0088(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UPhysicalMaterial*                           PhysicalMaterialMap[0x8];                                 // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          Parent;                                                   // 0x00D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHasStaticPermutationResource;                            // 0x00D8(0x0001)
	unsigned char                                      bOverrideSubsurfaceProfile;                               // 0x00D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00D9(0x0007) MISSED OFFSET
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                    // 0x00E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                    // 0x00F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                                   // 0x0100(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues;                     // 0x0110(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FFontParameterValue>                 FontParameterValues;                                      // 0x0120(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FMaterialInstanceBasePropertyOverrides      BasePropertyOverrides;                                    // 0x0130(0x0008) (Edit)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0138(0x0010) MISSED OFFSET
	struct FStaticParameterSet                         StaticParameters;                                         // 0x0148(0x0040)
	struct FMaterialCachedParameters                   CachedLayerParameters;                                    // 0x0188(0x01A0)
	TArray<class UObject*>                             CachedReferencedTextures;                                 // 0x0328(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0338(0x0028) MISSED OFFSET
};


// Class Engine.MaterialInstanceConstant
// size:0x0008 (0x0360 - 0x0368)
class UMaterialInstanceConstant : public UMaterialInstance
{
public:
	class UPhysicalMaterialMask*                       PhysMaterialMask;                                         // 0x0360(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	struct FLinearColor K2_GetVectorParameterValue(const struct FName& ParameterName)//offset:0x2E82050;
	class UTexture* K2_GetTextureParameterValue(const struct FName& ParameterName)//offset:0x2E81F00;
	float K2_GetScalarParameterValue(const struct FName& ParameterName)//offset:0x2E81DB0;
};


// Class Engine.WorldSubsystem
// size:0x0000 (0x0030 - 0x0030)
class UWorldSubsystem : public USubsystem
{
public:
};


// Class Engine.MaterialExpression
// size:0x0018 (0x0028 - 0x0040)
class UMaterialExpression : public UObject
{
public:
	class UMaterial*                                   Material;                                                 // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialFunction*                           Function;                                                 // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsParameterExpression;                                   // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
};


// Class Engine.MaterialExpressionCustomOutput
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionCustomOutput : public UMaterialExpression
{
public:
};


// Class Engine.EngineCustomTimeStep
// size:0x0000 (0x0028 - 0x0028)
class UEngineCustomTimeStep : public UObject
{
public:
};


// Class Engine.TimecodeProvider
// size:0x0008 (0x0028 - 0x0030)
class UTimecodeProvider : public UObject
{
public:
	float                                              FrameDelay;                                               // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	struct FTimecode GetTimecode()//offset:0x2EF8470;
	ETimecodeProviderSynchronizationState GetSynchronizationState()//offset:0x2EF8440;
	struct FQualifiedFrameTime GetQualifiedFrameTime()//offset:0x2EF8400;
	struct FFrameRate GetFrameRate()//offset:0x2EF8330;
	struct FTimecode GetDelayedTimecode()//offset:0x2EF82F0;
	struct FQualifiedFrameTime GetDelayedQualifiedFrameTime()//offset:0x2EF82B0;
	bool FetchTimecode(struct FQualifiedFrameTime* OutFrameTime)//offset:0x2EF81F0;
	void FetchAndUpdate()//offset:0xF54880;
};


// Class Engine.DynamicBlueprintBinding
// size:0x0000 (0x0028 - 0x0028)
class UDynamicBlueprintBinding : public UObject
{
public:
};


// Class Engine.BlueprintGeneratedClass
// size:0x00F8 (0x0230 - 0x0328)
class UBlueprintGeneratedClass : public UClass
{
public:
	int                                                NumReplicatedProperties;                                  // 0x0230(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHasNativizedParent;                                      // 0x0234(0x0001)
	unsigned char                                      bHasCookedComponentInstancingData;                        // 0x0234(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0235(0x0003) MISSED OFFSET
	TArray<class UDynamicBlueprintBinding*>            DynamicBindingObjects;                                    // 0x0238(0x0010) (ZeroConstructor)
	TArray<class UActorComponent*>                     ComponentTemplates;                                       // 0x0248(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UTimelineTemplate*>                   Timelines;                                                // 0x0258(0x0010) (ZeroConstructor)
	TArray<struct FBPComponentClassOverride>           ComponentClassOverrides;                                  // 0x0268(0x0010) (ZeroConstructor)
	class USimpleConstructionScript*                   SimpleConstructionScript;                                 // 0x0278(0x0008) (ZeroConstructor, IsPlainOldData)
	class UInheritableComponentHandler*                InheritableComponentHandler;                              // 0x0280(0x0008) (ZeroConstructor, IsPlainOldData)
	class UStructProperty*                             UberGraphFramePointerProperty;                            // 0x0288(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0290(0x0008) MISSED OFFSET
	class UFunction*                                   UberGraphFunction;                                        // 0x0298(0x0008) (ZeroConstructor, IsPlainOldData)
	TMap<struct FName, struct FBlueprintCookedComponentInstancingData> CookedComponentInstancingData;                            // 0x02A0(0x0050)
	unsigned char                                      UnknownData02[0x38];                                      // 0x02F0(0x0038) MISSED OFFSET
};


// Class Engine.CameraActor
// size:0x0580 (0x0220 - 0x07A0)
class ACameraActor : public AActor
{
public:
	TEnumAsByte<EAutoReceiveInput>                     AutoActivateForPlayer;                                    // 0x0220(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0221(0x0007) MISSED OFFSET
	class UCameraComponent*                            CameraComponent;                                          // 0x0228(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             SceneComponent;                                           // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0238(0x0008) MISSED OFFSET
	unsigned char                                      bConstrainAspectRatio;                                    // 0x0240(0x0001) (Deprecated)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0241(0x0003) MISSED OFFSET
	float                                              AspectRatio;                                              // 0x0244(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              FOVAngle;                                                 // 0x0248(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              PostProcessBlendWeight;                                   // 0x024C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	struct FPostProcessSettings                        PostProcessSettings;                                      // 0x0250(0x0550) (Deprecated)

	int GetAutoActivatePlayerIndex()//offset:0x2DB9D10;
};


// Class Engine.CameraComponent
// size:0x05C0 (0x0200 - 0x07C0)
class UCameraComponent : public USceneComponent
{
public:
	float                                              OrthoNearClipPlane;                                       // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OrthoFarClipPlane;                                        // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AspectRatio;                                              // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bConstrainAspectRatio;                                    // 0x020C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseFieldOfViewForLOD;                                    // 0x020C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bLockToHmd;                                               // 0x020C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUsePawnControlRotation;                                  // 0x020C(0x0001) (Edit, BlueprintVisible)
	TEnumAsByte<ECameraProjectionMode>                 ProjectionMode;                                           // 0x020D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x32];                                      // 0x020E(0x0032) MISSED OFFSET
	float                                              PostProcessBlendWeight;                                   // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2C];                                      // 0x0244(0x002C) MISSED OFFSET
	struct FPostProcessSettings                        PostProcessSettings;                                      // 0x0270(0x0550) (Edit, BlueprintVisible)

	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD)//offset:0x2DBBCA0;
	void SetProjectionMode(TEnumAsByte<ECameraProjectionMode> InProjectionMode)//offset:0x2DBBBA0;
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight)//offset:0x2DBBB20;
	void SetOrthoWidth(float InOrthoWidth)//offset:0x2DBBAA0;
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane)//offset:0x2DBBA20;
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane)//offset:0x2DBB9A0;
	void SetFieldOfView(float InFieldOfView)//offset:0x251A370;
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio)//offset:0x2DBB890;
	void SetAspectRatio(float InAspectRatio)//offset:0x2DBB810;
	void RemoveBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject)//offset:0x2DBB6F0;
	void OnCameraMeshHiddenChanged()//offset:0x806320;
	void GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView)//offset:0x2DB9D40;
	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)//offset:0x2DB9A60;
};


// Class Engine.SoundBase
// size:0x0190 (0x0028 - 0x01B8)
class USoundBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class USoundClass*                                 SoundClassObject;                                         // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDebug;                                                   // 0x0038(0x0001) (Edit)
	unsigned char                                      bOverrideConcurrency;                                     // 0x0038(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOutputToBusOnly;                                         // 0x0038(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHasDelayNode;                                            // 0x0038(0x0001)
	unsigned char                                      bHasConcatenatorNode;                                     // 0x0038(0x0001)
	unsigned char                                      bBypassVolumeScaleForPriority;                            // 0x0038(0x0001) (Edit, BlueprintVisible)
	EVirtualizationMode                                VirtualizationMode;                                       // 0x0039(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x56];                                      // 0x003A(0x0056) MISSED OFFSET
	unsigned char                                      UnknownData02[0x50];                                      // 0x003A(0x0050) UNKNOWN PROPERTY: 
	struct FSoundConcurrencySettings                   ConcurrencyOverrides;                                     // 0x00E0(0x0028) (Edit, BlueprintVisible)
	float                                              Duration;                                                 // 0x0108(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              MaxDistance;                                              // 0x010C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              TotalSamples;                                             // 0x0110(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              Priority;                                                 // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundAttenuation*                           AttenuationSettings;                                      // 0x0118(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FSoundModulationDefaultRoutingSettings      ModulationSettings;                                       // 0x0120(0x0048) (Edit, BlueprintVisible)
	class USoundSubmixBase*                            SoundSubmixObject;                                        // 0x0168(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FSoundSubmixSendInfo>                SoundSubmixSends;                                         // 0x0170(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                        // 0x0180(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FSoundSourceBusSendInfo>             BusSends;                                                 // 0x0188(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FSoundSourceBusSendInfo>             PreEffectBusSends;                                        // 0x0198(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x01A8(0x0010) (Edit, ExportObject, ZeroConstructor)
};


// Class Engine.SoundWave
// size:0x01B8 (0x01B8 - 0x0370)
class USoundWave : public USoundBase
{
public:
	int                                                CompressionQuality;                                       // 0x01B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                StreamingPriority;                                        // 0x01BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	ESoundwaveSampleRateSettings                       SampleRateQuality;                                        // 0x01C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x01C1(0x0001) MISSED OFFSET
	TEnumAsByte<ESoundGroup>                           SoundGroup;                                               // 0x01C2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLooping;                                                 // 0x01C3(0x0001) (Edit)
	unsigned char                                      bStreaming;                                               // 0x01C3(0x0001) (Edit)
	unsigned char                                      bSeekableStreaming;                                       // 0x01C3(0x0001) (Edit)
	ESoundWaveLoadingBehavior                          LoadingBehavior;                                          // 0x01C4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bMature;                                                  // 0x01C5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bManualWordWrap;                                          // 0x01C5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSingleLine;                                              // 0x01C6(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIsAmbisonics;                                            // 0x01C6(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x1];                                       // 0x01C7(0x0001) MISSED OFFSET
	TArray<float>                                      FrequenciesToAnalyze;                                     // 0x01C8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FSoundWaveSpectralTimeData>          CookedSpectralTimeData;                                   // 0x01D8(0x0010) (ZeroConstructor)
	TArray<struct FSoundWaveEnvelopeTimeData>          CookedEnvelopeTimeData;                                   // 0x01E8(0x0010) (ZeroConstructor)
	int                                                InitialChunkSize;                                         // 0x01F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x44];                                      // 0x01FC(0x0044) MISSED OFFSET
	class FString                                      SpokenText;                                               // 0x0240(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              SubtitlePriority;                                         // 0x0250(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Volume;                                                   // 0x0254(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Pitch;                                                    // 0x0258(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                NumChannels;                                              // 0x025C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                SampleRate;                                               // 0x0260(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x0264(0x000C) MISSED OFFSET
	TArray<struct FSubtitleCue>                        Subtitles;                                                // 0x0270(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UCurveTable*                                 Curves;                                                   // 0x0280(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveTable*                                 InternalCurves;                                           // 0x0288(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0xE0];                                      // 0x0290(0x00E0) MISSED OFFSET
};


// Class Engine.SoundWaveProcedural
// size:0x0050 (0x0370 - 0x03C0)
class USoundWaveProcedural : public USoundWave
{
public:
};


// Class Engine.AssetUserData
// size:0x0000 (0x0028 - 0x0028)
class UAssetUserData : public UObject
{
public:
};


// Class Engine.BlueprintCore
// size:0x0028 (0x0028 - 0x0050)
class UBlueprintCore : public UObject
{
public:
	class UObject*                                     SkeletonGeneratedClass;                                   // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UObject*                                     GeneratedClass;                                           // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bLegacyNeedToPurgeSkelRefs;                               // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	struct FGuid                                       BlueprintGuid;                                            // 0x003C(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
};


// Class Engine.Blueprint
// size:0x0050 (0x0050 - 0x00A0)
class UBlueprint : public UBlueprintCore
{
public:
	class UObject*                                     ParentClass;                                              // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBlueprintType>                        BlueprintType;                                            // 0x0058(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRecompileOnLoad;                                         // 0x0059(0x0001) (Config)
	unsigned char                                      bHasBeenRegenerated;                                      // 0x0059(0x0001) (Transient)
	unsigned char                                      bIsRegeneratingOnLoad;                                    // 0x0059(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x005A(0x0002) MISSED OFFSET
	int                                                BlueprintSystemVersion;                                   // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData)
	class USimpleConstructionScript*                   SimpleConstructionScript;                                 // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UActorComponent*>                     ComponentTemplates;                                       // 0x0068(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UTimelineTemplate*>                   Timelines;                                                // 0x0078(0x0010) (ZeroConstructor)
	TArray<struct FBPComponentClassOverride>           ComponentClassOverrides;                                  // 0x0088(0x0010) (ZeroConstructor)
	class UInheritableComponentHandler*                InheritableComponentHandler;                              // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.Model
// size:0x0230 (0x0028 - 0x0258)
class UModel : public UObject
{
public:
};


// Class Engine.Channel
// size:0x0048 (0x0028 - 0x0070)
class UChannel : public UObject
{
public:
	class UNetConnection*                              Connection;                                               // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x40];                                      // 0x0030(0x0040) MISSED OFFSET
};


// Class Engine.ActorChannel
// size:0x0228 (0x0070 - 0x0298)
class UActorChannel : public UChannel
{
public:
	class AActor*                                      Actor;                                                    // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xE8];                                      // 0x0078(0x00E8) MISSED OFFSET
	TArray<class UObject*>                             CreateSubObjects;                                         // 0x0160(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x128];                                     // 0x0170(0x0128) MISSED OFFSET
};


// Class Engine.AnimationAsset
// size:0x0058 (0x0028 - 0x0080)
class UAnimationAsset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	class USkeleton*                                   Skeleton;                                                 // 0x0038(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0040(0x0020) MISSED OFFSET
	TArray<class UAnimMetaData*>                       MetaData;                                                 // 0x0060(0x0010) (Edit, ExportObject, ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0070(0x0010) (Edit, ExportObject, ZeroConstructor)
};


// Class Engine.BlendSpaceBase
// size:0x00C8 (0x0080 - 0x0148)
class UBlendSpaceBase : public UAnimationAsset
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0080(0x0008) MISSED OFFSET
	bool                                               bRotationBlendInMeshSpace;                                // 0x0088(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	float                                              AnimLength;                                               // 0x008C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FInterpolationParameter                     InterpolationParam[0x3];                                  // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TargetWeightInterpolationSpeedPerSec;                     // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ENotifyTriggerMode>                    NotifyTriggerMode;                                        // 0x00AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	TArray<struct FPerBoneInterpolation>               PerBoneBlend;                                             // 0x00B0(0x0010) (Edit, ZeroConstructor)
	int                                                SampleIndexWithMarkers;                                   // 0x00C0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	TArray<struct FBlendSample>                        SampleData;                                               // 0x00C8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FEditorElement>                      GridSamples;                                              // 0x00D8(0x0010) (ZeroConstructor)
	struct FBlendParameter                             BlendParameters[0x3];                                     // 0x00E8(0x0020) (Edit)
};


// Class Engine.BlendSpace
// size:0x0008 (0x0148 - 0x0150)
class UBlendSpace : public UBlendSpaceBase
{
public:
	TEnumAsByte<EBlendSpaceAxis>                       AxisToScaleAnimation;                                     // 0x0148(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0149(0x0007) MISSED OFFSET
};


// Class Engine.AimOffsetBlendSpace
// size:0x0000 (0x0150 - 0x0150)
class UAimOffsetBlendSpace : public UBlendSpace
{
public:
};


// Class Engine.BlendSpace1D
// size:0x0008 (0x0148 - 0x0150)
class UBlendSpace1D : public UBlendSpaceBase
{
public:
	bool                                               bScaleAnimation;                                          // 0x0148(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0149(0x0007) MISSED OFFSET
};


// Class Engine.AimOffsetBlendSpace1D
// size:0x0000 (0x0150 - 0x0150)
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{
public:
};


// Class Engine.AISystemBase
// size:0x0030 (0x0028 - 0x0058)
class UAISystemBase : public UObject
{
public:
	struct FSoftClassPath                              AISystemClassName;                                        // 0x0028(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FName                                       AISystemModuleName;                                       // 0x0040(0x0008) (ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
	bool                                               bInstantiateAISystemOnClient;                             // 0x0050(0x0001) (ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
};


// Class Engine.AnimationSettings
// size:0x0098 (0x0038 - 0x00D0)
class UAnimationSettings : public UDeveloperSettings
{
public:
	int                                                CompressCommandletVersion;                                // 0x0038(0x0004) (Edit, ZeroConstructor, Config, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	TArray<class FString>                              KeyEndEffectorsMatchNameArray;                            // 0x0040(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               ForceRecompression;                                       // 0x0050(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bForceBelowThreshold;                                     // 0x0051(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bFirstRecompressUsingCurrentOrDefault;                    // 0x0052(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bRaiseMaxErrorToExisting;                                 // 0x0053(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnablePerformanceLog;                                    // 0x0054(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bStripAnimationDataOnDedicatedServer;                     // 0x0055(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTickAnimationOnSkeletalMeshInit;                         // 0x0056(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0057(0x0001) MISSED OFFSET
	TArray<struct FCustomAttributeSetting>             BoneCustomAttributesNames;                                // 0x0058(0x0010) (Edit, ZeroConstructor, Config)
	TArray<class FString>                              BoneNamesWithCustomAttributes;                            // 0x0068(0x0010) (Edit, ZeroConstructor, Config)
	TMap<struct FName, ECustomAttributeBlendType>      AttributeBlendModes;                                      // 0x0078(0x0050) (Edit, Config)
	ECustomAttributeBlendType                          DefaultAttributeBlendMode;                                // 0x00C8(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00C9(0x0007) MISSED OFFSET
};


// Class Engine.AnimBlueprint
// size:0x0028 (0x00A0 - 0x00C8)
class UAnimBlueprint : public UBlueprint
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00A0(0x0008) MISSED OFFSET
	class USkeleton*                                   TargetSkeleton;                                           // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FAnimGroupInfo>                      Groups;                                                   // 0x00B0(0x0010) (ZeroConstructor)
	bool                                               bUseMultiThreadedAnimationUpdate;                         // 0x00C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bWarnAboutBlueprintUsage;                                 // 0x00C1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x00C2(0x0006) MISSED OFFSET
};


// Class Engine.AnimBlueprintGeneratedClass
// size:0x0288 (0x0328 - 0x05B0)
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0328(0x0008) MISSED OFFSET
	TArray<struct FBakedAnimationStateMachine>         BakedStateMachines;                                       // 0x0330(0x0010) (ZeroConstructor)
	class USkeleton*                                   TargetSkeleton;                                           // 0x0340(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FAnimNotifyEvent>                    AnimNotifies;                                             // 0x0348(0x0010) (ZeroConstructor)
	TMap<struct FName, struct FCachedPoseIndices>      OrderedSavedPoseIndicesMap;                               // 0x0358(0x0050)
	unsigned char                                      UnknownData01[0x80];                                      // 0x03A8(0x0080) MISSED OFFSET
	TArray<struct FName>                               SyncGroupNames;                                           // 0x0428(0x0010) (ZeroConstructor)
	TArray<struct FExposedValueHandler>                EvaluateGraphExposedInputs;                               // 0x0438(0x0010) (ZeroConstructor)
	TMap<struct FName, struct FGraphAssetPlayerInformation> GraphAssetPlayerInformation;                              // 0x0448(0x0050)
	TMap<struct FName, struct FAnimGraphBlendOptions>  GraphBlendOptions;                                        // 0x0498(0x0050)
	struct FPropertyAccessLibrary                      PropertyAccessLibrary;                                    // 0x04E8(0x00C8)
};


// Class Engine.AnimBoneCompressionCodec
// size:0x0010 (0x0028 - 0x0038)
class UAnimBoneCompressionCodec : public UObject
{
public:
	class FString                                      Description;                                              // 0x0028(0x0010) (Edit, ZeroConstructor)
};


// Class Engine.AnimBoneCompressionSettings
// size:0x0010 (0x0028 - 0x0038)
class UAnimBoneCompressionSettings : public UObject
{
public:
	TArray<class UAnimBoneCompressionCodec*>           Codecs;                                                   // 0x0028(0x0010) (Edit, ExportObject, ZeroConstructor)
};


// Class Engine.AnimClassData
// size:0x0308 (0x0028 - 0x0330)
class UAnimClassData : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<struct FBakedAnimationStateMachine>         BakedStateMachines;                                       // 0x0030(0x0010) (ZeroConstructor)
	class USkeleton*                                   TargetSkeleton;                                           // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FAnimNotifyEvent>                    AnimNotifies;                                             // 0x0048(0x0010) (ZeroConstructor)
	TMap<struct FName, struct FCachedPoseIndices>      OrderedSavedPoseIndicesMap;                               // 0x0058(0x0050)
	TArray<struct FAnimBlueprintFunction>              AnimBlueprintFunctions;                                   // 0x00A8(0x0010) (ZeroConstructor)
	TArray<struct FAnimBlueprintFunctionData>          AnimBlueprintFunctionData;                                // 0x00B8(0x0010) (ZeroConstructor)
	TArray<TFieldPath<StructProperty>>                 AnimNodeProperties;                                       // 0x00C8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x00D8(0x0010) MISSED OFFSET
	TArray<TFieldPath<StructProperty>>                 LinkedAnimGraphNodeProperties;                            // 0x00E8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x10];                                      // 0x00F8(0x0010) MISSED OFFSET
	TArray<TFieldPath<StructProperty>>                 LinkedAnimLayerNodeProperties;                            // 0x0108(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0118(0x0010) MISSED OFFSET
	TArray<TFieldPath<StructProperty>>                 PreUpdateNodeProperties;                                  // 0x0128(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0138(0x0010) MISSED OFFSET
	TArray<TFieldPath<StructProperty>>                 DynamicResetNodeProperties;                               // 0x0148(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0158(0x0010) MISSED OFFSET
	TArray<TFieldPath<StructProperty>>                 StateMachineNodeProperties;                               // 0x0168(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData06[0x10];                                      // 0x0178(0x0010) MISSED OFFSET
	TArray<TFieldPath<StructProperty>>                 InitializationNodeProperties;                             // 0x0188(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData07[0x10];                                      // 0x0198(0x0010) MISSED OFFSET
	TMap<struct FName, struct FGraphAssetPlayerInformation> GraphNameAssetPlayers;                                    // 0x01A8(0x0050)
	TArray<struct FName>                               SyncGroupNames;                                           // 0x01F8(0x0010) (ZeroConstructor)
	TArray<struct FExposedValueHandler>                EvaluateGraphExposedInputs;                               // 0x0208(0x0010) (ZeroConstructor)
	TMap<struct FName, struct FAnimGraphBlendOptions>  GraphBlendOptions;                                        // 0x0218(0x0050)
	struct FPropertyAccessLibrary                      PropertyAccessLibrary;                                    // 0x0268(0x00C8)
};


// Class Engine.AnimClassInterface
// size:0x0000 (0x0028 - 0x0028)
class UAnimClassInterface : public UInterface
{
public:
};


// Class Engine.AnimSequenceBase
// size:0x0028 (0x0080 - 0x00A8)
class UAnimSequenceBase : public UAnimationAsset
{
public:
	TArray<struct FAnimNotifyEvent>                    Notifies;                                                 // 0x0080(0x0010) (ZeroConstructor)
	float                                              SequenceLength;                                           // 0x0090(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              RateScale;                                                // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRawCurveTracks                             RawCurveData;                                             // 0x0098(0x0010)

	float GetPlayLength()//offset:0x2D9BE70;
};


// Class Engine.AnimCompositeBase
// size:0x0000 (0x00A8 - 0x00A8)
class UAnimCompositeBase : public UAnimSequenceBase
{
public:
};


// Class Engine.AnimComposite
// size:0x0010 (0x00A8 - 0x00B8)
class UAnimComposite : public UAnimCompositeBase
{
public:
	struct FAnimTrack                                  AnimationTrack;                                           // 0x00A8(0x0010)
};


// Class Engine.AnimCompress
// size:0x0008 (0x0038 - 0x0040)
class UAnimCompress : public UAnimBoneCompressionCodec
{
public:
	unsigned char                                      bNeedsSkeleton;                                           // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	TEnumAsByte<EAnimationCompressionFormat>           TranslationCompressionFormat;                             // 0x003C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           RotationCompressionFormat;                                // 0x003D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           ScaleCompressionFormat;                                   // 0x003E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x003F(0x0001) MISSED OFFSET
};


// Class Engine.AnimCompress_BitwiseCompressOnly
// size:0x0000 (0x0040 - 0x0040)
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{
public:
};


// Class Engine.AnimCompress_LeastDestructive
// size:0x0000 (0x0040 - 0x0040)
class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
{
public:
};


// Class Engine.AnimCompress_RemoveLinearKeys
// size:0x0020 (0x0040 - 0x0060)
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                               // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAngleDiff;                                             // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxScaleDiff;                                             // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxEffectorDiff;                                          // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinEffectorDiff;                                          // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EffectorDiffSocket;                                       // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ParentKeyScale;                                           // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRetarget;                                                // 0x005C(0x0001) (Edit)
	unsigned char                                      bActuallyFilterLinearKeys;                                // 0x005C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
};


// Class Engine.AnimCompress_PerTrackCompression
// size:0x0078 (0x0060 - 0x00D8)
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{
public:
	float                                              MaxZeroingThreshold;                                      // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxPosDiffBitwise;                                        // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAngleDiffBitwise;                                      // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxScaleDiffBitwise;                                      // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedRotationFormats;                                   // 0x0070(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedTranslationFormats;                                // 0x0080(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedScaleFormats;                                      // 0x0090(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bResampleAnimation;                                       // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	float                                              ResampledFramerate;                                       // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MinKeysForResampling;                                     // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseAdaptiveError;                                        // 0x00AC(0x0001) (Edit)
	unsigned char                                      bUseOverrideForEndEffectors;                              // 0x00AC(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	int                                                TrackHeightBias;                                          // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ParentingDivisor;                                         // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ParentingDivisorExponent;                                 // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseAdaptiveError2;                                       // 0x00BC(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	float                                              RotationErrorSourceRatio;                                 // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslationErrorSourceRatio;                              // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ScaleErrorSourceRatio;                                    // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxErrorPerTrackRatio;                                    // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PerturbationProbeSize;                                    // 0x00D0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET
};


// Class Engine.AnimCompress_RemoveEverySecondKey
// size:0x0008 (0x0040 - 0x0048)
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{
public:
	int                                                MinKeys;                                                  // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bStartAtSecondKey;                                        // 0x0044(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
};


// Class Engine.AnimCompress_RemoveTrivialKeys
// size:0x0010 (0x0040 - 0x0050)
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                               // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAngleDiff;                                             // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxScaleDiff;                                             // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
};


// Class Engine.AnimCurveCompressionCodec
// size:0x0000 (0x0028 - 0x0028)
class UAnimCurveCompressionCodec : public UObject
{
public:
};


// Class Engine.AnimCurveCompressionCodec_CompressedRichCurve
// size:0x0000 (0x0028 - 0x0028)
class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
{
public:
};


// Class Engine.AnimCurveCompressionCodec_UniformIndexable
// size:0x0000 (0x0028 - 0x0028)
class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
{
public:
};


// Class Engine.AnimCurveCompressionCodec_UniformlySampled
// size:0x0000 (0x0028 - 0x0028)
class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
{
public:
};


// Class Engine.AnimCurveCompressionSettings
// size:0x0008 (0x0028 - 0x0030)
class UAnimCurveCompressionSettings : public UObject
{
public:
	class UAnimCurveCompressionCodec*                  Codec;                                                    // 0x0028(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData)
};


// Class Engine.AnimLayerInterface
// size:0x0000 (0x0028 - 0x0028)
class UAnimLayerInterface : public UInterface
{
public:
};


// Class Engine.AnimMetaData
// size:0x0000 (0x0028 - 0x0028)
class UAnimMetaData : public UObject
{
public:
};


// Class Engine.AnimMontage
// size:0x0128 (0x00A8 - 0x01D0)
class UAnimMontage : public UAnimCompositeBase
{
public:
	struct FAlphaBlend                                 BlendIn;                                                  // 0x00A8(0x0030) (Edit)
	float                                              BlendInTime;                                              // 0x00D8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	struct FAlphaBlend                                 BlendOut;                                                 // 0x00E0(0x0030) (Edit)
	float                                              BlendOutTime;                                             // 0x0110(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              BlendOutTriggerTime;                                      // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       SyncGroup;                                                // 0x0118(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SyncSlotIndex;                                            // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	struct FMarkerSyncData                             MarkerData;                                               // 0x0128(0x0020)
	TArray<struct FCompositeSection>                   CompositeSections;                                        // 0x0148(0x0010) (ZeroConstructor)
	TArray<struct FSlotAnimationTrack>                 SlotAnimTracks;                                           // 0x0158(0x0010) (ZeroConstructor)
	TArray<struct FBranchingPoint>                     BranchingPoints;                                          // 0x0168(0x0010) (ZeroConstructor, Deprecated)
	bool                                               bEnableRootMotionTranslation;                             // 0x0178(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bEnableRootMotionRotation;                                // 0x0179(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bEnableAutoBlendOut;                                      // 0x017A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                       // 0x017B(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	TArray<struct FBranchingPointMarker>               BranchingPointMarkers;                                    // 0x0180(0x0010) (ZeroConstructor)
	TArray<int>                                        BranchingPointStateNotifyIndices;                         // 0x0190(0x0010) (ZeroConstructor)
	struct FTimeStretchCurve                           TimeStretchCurve;                                         // 0x01A0(0x0028) (Edit)
	struct FName                                       TimeStretchCurveName;                                     // 0x01C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	float GetDefaultBlendOutTime()//offset:0x2D99460;
};


// Class Engine.AnimNotify_PauseClothingSimulation
// size:0x0000 (0x0038 - 0x0038)
class UAnimNotify_PauseClothingSimulation : public UAnimNotify
{
public:
};


// Class Engine.AnimNotify_PlayParticleEffect
// size:0x0058 (0x0038 - 0x0090)
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LocationOffset;                                           // 0x0040(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RotationOffset;                                           // 0x004C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     Scale;                                                    // 0x0058(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0064(0x001C) MISSED OFFSET
	unsigned char                                      Attached;                                                 // 0x0080(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	struct FName                                       SocketName;                                               // 0x0084(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
};


// Class Engine.AnimNotify_PlaySound
// size:0x0020 (0x0038 - 0x0058)
class UAnimNotify_PlaySound : public UAnimNotify
{
public:
	class USoundBase*                                  Sound;                                                    // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMultiplier;                                         // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PitchMultiplier;                                          // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bFollow;                                                  // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FName                                       AttachName;                                               // 0x004C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
};


// Class Engine.AnimNotify_ResetClothingSimulation
// size:0x0000 (0x0038 - 0x0038)
class UAnimNotify_ResetClothingSimulation : public UAnimNotify
{
public:
};


// Class Engine.AnimNotify_ResetDynamics
// size:0x0000 (0x0038 - 0x0038)
class UAnimNotify_ResetDynamics : public UAnimNotify
{
public:
};


// Class Engine.AnimNotify_ResumeClothingSimulation
// size:0x0000 (0x0038 - 0x0038)
class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
{
public:
};


// Class Engine.AnimNotifyState_DisableRootMotion
// size:0x0000 (0x0030 - 0x0030)
class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
{
public:
};


// Class Engine.AnimNotifyState_TimedParticleEffect
// size:0x0030 (0x0030 - 0x0060)
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x0030(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       SocketName;                                               // 0x0038(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LocationOffset;                                           // 0x0040(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RotationOffset;                                           // 0x004C(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDestroyAtEnd;                                            // 0x0058(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
};


// Class Engine.AnimNotifyState_Trail
// size:0x0028 (0x0030 - 0x0058)
class UAnimNotifyState_Trail : public UAnimNotifyState
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       FirstSocketName;                                          // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       SecondSocketName;                                         // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETrailWidthMode>                       WidthScaleMode;                                           // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FName                                       WidthScaleCurve;                                          // 0x004C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRecycleSpawnedSystems;                                   // 0x0054(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	class UParticleSystem* OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation)//offset:0x13CEB30;
};


// Class Engine.AnimSequence
// size:0x0108 (0x00A8 - 0x01B0)
class UAnimSequence : public UAnimSequenceBase
{
public:
	int                                                NumFrames;                                                // 0x00A8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	TArray<struct FTrackToSkeletonMap>                 TrackToSkeletonMapTable;                                  // 0x00B0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x00C0(0x0010) MISSED OFFSET
	class UAnimBoneCompressionSettings*                BoneCompressionSettings;                                  // 0x00D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimCurveCompressionSettings*               CurveCompressionSettings;                                 // 0x00D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x70];                                      // 0x00E0(0x0070) MISSED OFFSET
	TEnumAsByte<EAdditiveAnimationType>                AdditiveAnimType;                                         // 0x0150(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAdditiveBasePoseType>                 RefPoseType;                                              // 0x0151(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x0152(0x0006) MISSED OFFSET
	class UAnimSequence*                               RefPoseSeq;                                               // 0x0158(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                RefFrameIndex;                                            // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       RetargetSource;                                           // 0x0164(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	EAnimInterpolationType                             Interpolation;                                            // 0x016C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableRootMotion;                                        // 0x016D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                       // 0x016E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bForceRootLock;                                           // 0x016F(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseNormalizedRootMotionScale;                            // 0x0170(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRootMotionSettingsCopiedFromMontage;                     // 0x0171(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x6];                                       // 0x0172(0x0006) MISSED OFFSET
	TArray<struct FAnimSyncMarker>                     AuthoredSyncMarkers;                                      // 0x0178(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData05[0x18];                                      // 0x0188(0x0018) MISSED OFFSET
	TArray<struct FBakedCustomAttributePerBoneData>    BakedPerBoneCustomAttributeData;                          // 0x01A0(0x0010) (ZeroConstructor)
};


// Class Engine.AnimSet
// size:0x00C8 (0x0028 - 0x00F0)
class UAnimSet : public UObject
{
public:
	unsigned char                                      bAnimRotationOnly;                                        // 0x0028(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	TArray<struct FName>                               TrackBoneNames;                                           // 0x0030(0x0010) (ZeroConstructor)
	TArray<struct FAnimSetMeshLinkup>                  LinkupCache;                                              // 0x0040(0x0010) (ZeroConstructor, Transient)
	TArray<unsigned char>                              BoneUseAnimTranslation;                                   // 0x0050(0x0010) (ZeroConstructor, Transient)
	TArray<unsigned char>                              ForceUseMeshTranslation;                                  // 0x0060(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               UseTranslationBoneNames;                                  // 0x0070(0x0010) (Edit, ZeroConstructor)
	TArray<struct FName>                               ForceMeshTranslationBoneNames;                            // 0x0080(0x0010) (Edit, ZeroConstructor)
	struct FName                                       PreviewSkelMeshName;                                      // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       BestRatioSkelMeshName;                                    // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x50];                                      // 0x00A0(0x0050) MISSED OFFSET
};


// Class Engine.AnimSingleNodeInstance
// size:0x0010 (0x02C0 - 0x02D0)
class UAnimSingleNodeInstance : public UAnimInstance
{
public:
	struct FScriptDelegate                             PostEvaluateAnimEvent;                                    // 0x02C0(0x0014) (ZeroConstructor, Transient, InstancedReference)

	void StopAnim()//offset:0x2D9C6C0;
	void SetReverse(bool bInReverse)//offset:0x2D9C630;
	void SetPreviewCurveOverride(const struct FName& PoseName, float Value, bool bRemoveIfZero)//offset:0x2D9C510;
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies)//offset:0x2D9C3F0;
	void SetPosition(float InPosition, bool bFireNotifies)//offset:0x2D9C310;
	void SetPlayRate(float InPlayRate)//offset:0x2D9C200;
	void SetPlaying(bool bIsPlaying)//offset:0x2D9C280;
	void SetLooping(bool bIsLooping)//offset:0x2D9C170;
	void SetBlendSpaceInput(const struct FVector& InBlendInput)//offset:0x2D9C0E0;
	void SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate)//offset:0x2D9BFC0;
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition)//offset:0x2D9BEB0;
	float GetLength()//offset:0x2D9BE40;
	class UAnimationAsset* GetAnimationAsset()//offset:0x2D9BE10;
};


// Class Engine.AnimStateMachineTypes
// size:0x0000 (0x0028 - 0x0028)
class UAnimStateMachineTypes : public UObject
{
public:
};


// Class Engine.AnimStreamable
// size:0x0038 (0x00A8 - 0x00E0)
class UAnimStreamable : public UAnimSequenceBase
{
public:
	int                                                NumFrames;                                                // 0x00A8(0x0004) (ZeroConstructor, IsPlainOldData)
	EAnimInterpolationType                             Interpolation;                                            // 0x00AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	struct FName                                       RetargetSource;                                           // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x00B8(0x0010) MISSED OFFSET
	class UAnimBoneCompressionSettings*                BoneCompressionSettings;                                  // 0x00C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimCurveCompressionSettings*               CurveCompressionSettings;                                 // 0x00D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableRootMotion;                                        // 0x00D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                       // 0x00D9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bForceRootLock;                                           // 0x00DA(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseNormalizedRootMotionScale;                            // 0x00DB(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
};


// Class Engine.ApplicationLifecycleComponent
// size:0x0090 (0x00B0 - 0x0140)
class UApplicationLifecycleComponent : public UActorComponent
{
public:
	struct UEMulticastInlineDelegate                   ApplicationWillDeactivateDelegate;                        // 0x00B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   ApplicationHasReactivatedDelegate;                        // 0x00C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   ApplicationWillEnterBackgroundDelegate;                   // 0x00D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   ApplicationHasEnteredForegroundDelegate;                  // 0x00E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   ApplicationWillTerminateDelegate;                         // 0x00F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   ApplicationShouldUnloadResourcesDelegate;                 // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   ApplicationReceivedStartupArgumentsDelegate;              // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnTemperatureChangeDelegate;                              // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnLowPowerModeDelegate;                                   // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
};


// Class Engine.ArrowComponent
// size:0x0020 (0x0450 - 0x0470)
class UArrowComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ArrowColor;                                               // 0x0450(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ArrowSize;                                                // 0x0454(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ArrowLength;                                              // 0x0458(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ScreenSize;                                               // 0x045C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsScreenSizeScaled;                                      // 0x0460(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bTreatAsASprite;                                          // 0x0460(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0461(0x000F) MISSED OFFSET

	void SetArrowColor(const struct FLinearColor& NewColor)//offset:0x2D9FE40;
};


// Class Engine.AssetExportTask
// size:0x0050 (0x0028 - 0x0078)
class UAssetExportTask : public UObject
{
public:
	class UObject*                                     Object;                                                   // 0x0028(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UExporter*                                   Exporter;                                                 // 0x0030(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class FString                                      Filename;                                                 // 0x0038(0x0010) (BlueprintVisible, ZeroConstructor)
	bool                                               bSelected;                                                // 0x0048(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bReplaceIdentical;                                        // 0x0049(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bPrompt;                                                  // 0x004A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAutomated;                                               // 0x004B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseFileArchive;                                          // 0x004C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bWriteEmptyFiles;                                         // 0x004D(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	TArray<class UObject*>                             IgnoreObjectList;                                         // 0x0050(0x0010) (BlueprintVisible, ZeroConstructor)
	class UObject*                                     Options;                                                  // 0x0060(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class FString>                              Errors;                                                   // 0x0068(0x0010) (BlueprintVisible, ZeroConstructor)
};


// Class Engine.AssetImportData
// size:0x0000 (0x0028 - 0x0028)
class UAssetImportData : public UObject
{
public:
};


// Class Engine.AssetManagerSettings
// size:0x00C8 (0x0038 - 0x0100)
class UAssetManagerSettings : public UDeveloperSettings
{
public:
	TArray<struct FPrimaryAssetTypeInfo>               PrimaryAssetTypesToScan;                                  // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FDirectoryPath>                      DirectoriesToExclude;                                     // 0x0048(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FPrimaryAssetRulesOverride>          PrimaryAssetRules;                                        // 0x0058(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FPrimaryAssetRulesCustomOverride>    CustomPrimaryAssetRules;                                  // 0x0068(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               bOnlyCookProductionAssets;                                // 0x0078(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bShouldManagerDetermineTypeAndName;                       // 0x0079(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bShouldGuessTypeAndNameInEditor;                          // 0x007A(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bShouldAcquireMissingChunksOnLoad;                        // 0x007B(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	TArray<struct FAssetManagerRedirect>               PrimaryAssetIdRedirects;                                  // 0x0080(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FAssetManagerRedirect>               PrimaryAssetTypeRedirects;                                // 0x0090(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FAssetManagerRedirect>               AssetPathRedirects;                                       // 0x00A0(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x50];                                      // 0x00B0(0x0050) UNKNOWN PROPERTY: 
};


// Class Engine.AssetMappingTable
// size:0x0010 (0x0028 - 0x0038)
class UAssetMappingTable : public UObject
{
public:
	TArray<struct FAssetMapping>                       MappedAssets;                                             // 0x0028(0x0010) (Edit, EditFixedSize, ZeroConstructor, EditConst)
};


// Class Engine.AsyncActionHandleSaveGame
// size:0x0038 (0x0030 - 0x0068)
class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
{
public:
	struct UEMulticastInlineDelegate                   Completed;                                                // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0040(0x0020) MISSED OFFSET
	class USaveGame*                                   SaveGameObject;                                           // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)

	static class UAsyncActionHandleSaveGame* AsyncSaveGameToSlot(class UObject* WorldContextObject, class USaveGame* SaveGameObject, const class FString& SlotName, int UserIndex)//offset:0x2DA3C10;
	static class UAsyncActionHandleSaveGame* AsyncLoadGameFromSlot(class UObject* WorldContextObject, const class FString& SlotName, int UserIndex)//offset:0x2DA35B0;
};


// Class Engine.AsyncActionLoadPrimaryAssetBase
// size:0x0048 (0x0030 - 0x0078)
class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
{
public:
};


// Class Engine.AsyncActionLoadPrimaryAsset
// size:0x0010 (0x0078 - 0x0088)
class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct UEMulticastInlineDelegate                   Completed;                                                // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static class UAsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(class UObject* WorldContextObject, const struct FPrimaryAssetId& PrimaryAsset, TArray<struct FName> LoadBundles)//offset:0x2DA36D0;
};


// Class Engine.AsyncActionLoadPrimaryAssetClass
// size:0x0010 (0x0078 - 0x0088)
class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct UEMulticastInlineDelegate                   Completed;                                                // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static class UAsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(class UObject* WorldContextObject, const struct FPrimaryAssetId& PrimaryAsset, TArray<struct FName> LoadBundles)//offset:0x2DA3810;
};


// Class Engine.AsyncActionLoadPrimaryAssetList
// size:0x0010 (0x0078 - 0x0088)
class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct UEMulticastInlineDelegate                   Completed;                                                // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static class UAsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(class UObject* WorldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> LoadBundles)//offset:0x2DA3AB0;
};


// Class Engine.AsyncActionLoadPrimaryAssetClassList
// size:0x0010 (0x0078 - 0x0088)
class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct UEMulticastInlineDelegate                   Completed;                                                // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static class UAsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(class UObject* WorldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> LoadBundles)//offset:0x2DA3950;
};


// Class Engine.AsyncActionChangePrimaryAssetBundles
// size:0x0010 (0x0078 - 0x0088)
class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct UEMulticastInlineDelegate                   Completed;                                                // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static class UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(class UObject* WorldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> AddBundles, TArray<struct FName> RemoveBundles)//offset:0x2DA33F0;
	static class UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(class UObject* WorldContextObject, TArray<struct FName> NewBundles, TArray<struct FName> OldBundles)//offset:0x2DA3290;
};


// Class Engine.AtmosphericFog
// size:0x0008 (0x0220 - 0x0228)
class AAtmosphericFog : public AInfo
{
public:
	class UAtmosphericFogComponent*                    AtmosphericFogComponent;                                  // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
};


// Class Engine.AtmosphericFogComponent
// size:0x0100 (0x0200 - 0x0300)
class UAtmosphericFogComponent : public USceneComponent
{
public:
	float                                              DensityMultiplier;                                        // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DensityOffset;                                            // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceScale;                                            // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AltitudeScale;                                            // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceOffset;                                           // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GroundOffset;                                             // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StartDistance;                                            // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SunDiscScale;                                             // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultBrightness;                                        // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      DefaultLightColor;                                        // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDisableSunDisk;                                          // 0x0228(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAtmosphereAffectsSunIlluminance;                         // 0x0228(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bDisableGroundScattering;                                 // 0x0228(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0229(0x0003) MISSED OFFSET
	struct FAtmospherePrecomputeParameters             PrecomputeParams;                                         // 0x022C(0x002C) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UTexture2D*                                  TransmittanceTexture;                                     // 0x0258(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	class UTexture2D*                                  IrradianceTexture;                                        // 0x0260(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x98];                                      // 0x0268(0x0098) MISSED OFFSET

	void StartPrecompute()//offset:0x806320;
	void SetSunMultiplier(float NewSunMultiplier)//offset:0x2DA5870;
	void SetStartDistance(float NewStartDistance)//offset:0x2DA5720;
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum)//offset:0x2DA53D0;
	void SetFogMultiplier(float NewFogMultiplier)//offset:0x2DA5060;
	void SetDistanceScale(float NewDistanceScale)//offset:0x2DA4F10;
	void SetDistanceOffset(float NewDistanceOffset)//offset:0x2DA4E90;
	void SetDensityOffset(float NewDensityOffset)//offset:0x2DA4E10;
	void SetDensityMultiplier(float NewDensityMultiplier)//offset:0x2DA4D90;
	void SetDefaultLightColor(const struct FLinearColor& NewLightColor)//offset:0x2DA4D00;
	void SetDefaultBrightness(float NewBrightness)//offset:0x2DA4C80;
	void SetAltitudeScale(float NewAltitudeScale)//offset:0x2DA4990;
	void DisableSunDisk(bool NewSunDisk)//offset:0x2DA3ED0;
	void DisableGroundScattering(bool NewGroundScattering)//offset:0x2DA3E40;
};


// Class Engine.AudioBus
// size:0x0008 (0x0028 - 0x0030)
class UAudioBus : public UObject
{
public:
	EAudioBusChannels                                  AudioBusChannels;                                         // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsAutomatic;                                             // 0x0029(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x002A(0x0006) MISSED OFFSET
};


// Class Engine.AudioComponent
// size:0x0660 (0x0200 - 0x0860)
class UAudioComponent : public USceneComponent
{
public:
	TArray<struct FAudioComponentParam>                InstanceParameters;                                       // 0x0200(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class USoundClass*                                 SoundClassOverride;                                       // 0x0210(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoDestroy;                                             // 0x0218(0x0001)
	unsigned char                                      bStopWhenOwnerDestroyed;                                  // 0x0218(0x0001)
	unsigned char                                      bShouldRemainActiveIfDropped;                             // 0x0218(0x0001)
	unsigned char                                      bAllowSpatialization;                                     // 0x0218(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideAttenuation;                                     // 0x0218(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideSubtitlePriority;                                // 0x0218(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsUISound;                                               // 0x0218(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableLowPassFilter;                                     // 0x0218(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverridePriority;                                        // 0x0219(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSuppressSubtitles;                                       // 0x0219(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAutoManageAttachment;                                    // 0x021A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x5];                                       // 0x021B(0x0005) MISSED OFFSET
	struct FName                                       AudioComponentUserID;                                     // 0x0220(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              PitchModulationMin;                                       // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PitchModulationMax;                                       // 0x022C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeModulationMin;                                      // 0x0230(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeModulationMax;                                      // 0x0234(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMultiplier;                                         // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                EnvelopeFollowerAttackTime;                               // 0x023C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                EnvelopeFollowerReleaseTime;                              // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Priority;                                                 // 0x0244(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SubtitlePriority;                                         // 0x0248(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x024C(0x0004) MISSED OFFSET
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                        // 0x0250(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PitchMultiplier;                                          // 0x0258(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LowPassFilterFrequency;                                   // 0x025C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0260(0x0008) MISSED OFFSET
	class USoundAttenuation*                           AttenuationSettings;                                      // 0x0268(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FSoundAttenuationSettings                   AttenuationOverrides;                                     // 0x0270(0x03A0) (Edit, BlueprintVisible)
	class USoundConcurrency*                           ConcurrencySettings;                                      // 0x0610(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData03[0x50];                                      // 0x0618(0x0050) UNKNOWN PROPERTY: 
	unsigned char                                      UnknownData04[0xC];                                       // 0x0668(0x000C) MISSED OFFSET
	EAttachmentRule                                    AutoAttachLocationRule;                                   // 0x0674(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EAttachmentRule                                    AutoAttachRotationRule;                                   // 0x0675(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EAttachmentRule                                    AutoAttachScaleRule;                                      // 0x0676(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x1];                                       // 0x0677(0x0001) MISSED OFFSET
	struct FSoundModulationDefaultRoutingSettings      ModulationRouting;                                        // 0x0678(0x0048) (Edit, BlueprintVisible)
	struct UEMulticastInlineDelegate                   OnAudioPlayStateChanged;                                  // 0x06C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData06[0x18];                                      // 0x06D0(0x0018) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnAudioVirtualizationChanged;                             // 0x06E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData07[0x18];                                      // 0x06F8(0x0018) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnAudioFinished;                                          // 0x0710(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData08[0x18];                                      // 0x0720(0x0018) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnAudioPlaybackPercent;                                   // 0x0738(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData09[0x18];                                      // 0x0748(0x0018) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnAudioSingleEnvelopeValue;                               // 0x0760(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData10[0x18];                                      // 0x0770(0x0018) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnAudioMultiEnvelopeValue;                                // 0x0788(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData11[0x18];                                      // 0x0798(0x0018) MISSED OFFSET
	struct FScriptDelegate                             OnQueueSubtitles;                                         // 0x07B0(0x0014) (ZeroConstructor, InstancedReference)
	TWeakObjectPtr<class USceneComponent>              AutoAttachParent;                                         // 0x07C0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	struct FName                                       AutoAttachSocketName;                                     // 0x07C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x90];                                      // 0x07D0(0x0090) MISSED OFFSET

	void StopDelayed(float DelayTime)//offset:0x2DA5AF0;
	void Stop()//offset:0x2DA5AD0;
	void SetWaveParameter(const struct FName& InName, class USoundWave* InWave)//offset:0x2DA5A00;
	void SetVolumeMultiplier(float NewVolumeMultiplier)//offset:0x2DA5980;
	void SetUISound(bool bInUISound)//offset:0x2DA58F0;
	void SetSubmixSend(class USoundSubmixBase* Submix, float SendLevel)//offset:0x2DA57A0;
	void SetSourceBusSendPreEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel)//offset:0x2DA5650;
	void SetSourceBusSendPostEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel)//offset:0x2DA5580;
	void SetSound(class USoundBase* NewSound)//offset:0x2DA54F0;
	void SetPitchMultiplier(float NewPitchMultiplier)//offset:0x2DA5350;
	void SetPaused(bool bPause)//offset:0x2DA52C0;
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency)//offset:0x2DA5240;
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled)//offset:0x2DA51B0;
	void SetIntParameter(const struct FName& InName, int inInt)//offset:0x2DA50E0;
	void SetFloatParameter(const struct FName& InName, float InFloat)//offset:0x2DA4F90;
	void SetBoolParameter(const struct FName& InName, bool InBool)//offset:0x2DA4BB0;
	void SetAudioBusSendPreEffect(class UAudioBus* AudioBus, float AudioBusSendLevel)//offset:0x2DA4AE0;
	void SetAudioBusSendPostEffect(class UAudioBus* AudioBus, float SourceBusSendLevel)//offset:0x2DA4A10;
	void PlayQuantized(class UObject* WorldContextObject, class UQuartzClockHandle** InClockHandle, struct FQuartzQuantizationBoundary* InQuantizationBoundary, const struct FScriptDelegate& InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, EAudioFaderCurve InFadeCurve)//offset:0x2DA46D0;
	void Play(float StartTime)//offset:0x2DA4640;
	bool IsVirtualized()//offset:0x2DA4610;
	bool IsPlaying()//offset:0x2DA45E0;
	bool HasCookedFFTData()//offset:0x2DA45B0;
	bool HasCookedAmplitudeEnvelopeData()//offset:0x2DA4580;
	EAudioComponentPlayState GetPlayState()//offset:0x2DA4550;
	bool GetCookedFFTDataForAllPlayingSounds(TArray<struct FSoundWaveSpectralDataPerSound>* OutSoundWaveSpectralData)//offset:0x2DA4470;
	bool GetCookedFFTData(TArray<float> FrequenciesToGet, TArray<struct FSoundWaveSpectralData>* OutSoundWaveSpectralData)//offset:0x2DA4350;
	bool GetCookedEnvelopeDataForAllPlayingSounds(TArray<struct FSoundWaveEnvelopeDataPerSound>* OutEnvelopeData)//offset:0x2DA4290;
	bool GetCookedEnvelopeData(float* OutEnvelopeData)//offset:0x2DA41E0;
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, EAudioFaderCurve FadeCurve)//offset:0x2DA40C0;
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, EAudioFaderCurve FadeCurve)//offset:0x2DA3F60;
	bool BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings* OutAttenuationSettings)//offset:0x2DA3D70;
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, EAudioFaderCurve FadeCurve)//offset:0x2DA3180;
	void AdjustAttenuation(const struct FSoundAttenuationSettings& InAttenuationSettings)//offset:0x2DA30B0;
};


// Class Engine.AudioSettings
// size:0x0128 (0x0038 - 0x0160)
class UAudioSettings : public UDeveloperSettings
{
public:
	struct FSoftObjectPath                             DefaultSoundClassName;                                    // 0x0038(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             DefaultMediaSoundClassName;                               // 0x0050(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             DefaultSoundConcurrencyName;                              // 0x0068(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             DefaultBaseSoundMix;                                      // 0x0080(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             VoiPSoundClass;                                           // 0x0098(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             VoiPAttenuationSettings;                                  // 0x00B0(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             MasterSubmix;                                             // 0x00C8(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             ReverbSubmix;                                             // 0x00E0(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             EQSubmix;                                                 // 0x00F8(0x0018) (Edit, ZeroConstructor, Config)
	EVoiceSampleRate                                   VoiPSampleRate;                                           // 0x0110(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0110(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	float                                              DefaultReverbSendLevel;                                   // 0x0114(0x0004) (ZeroConstructor, Config, Deprecated, IsPlainOldData)
	int                                                MaximumConcurrentStreams;                                 // 0x0118(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              GlobalMinPitchScale;                                      // 0x011C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              GlobalMaxPitchScale;                                      // 0x0120(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	TArray<struct FAudioQualitySettings>               QualityLevels;                                            // 0x0128(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      bAllowPlayWhenSilent;                                     // 0x0138(0x0001) (Edit, Config)
	unsigned char                                      bDisableMasterEQ;                                         // 0x0138(0x0001) (Edit, Config)
	unsigned char                                      bAllowCenterChannel3DPanning;                             // 0x0138(0x0001) (Edit, Config)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0139(0x0003) MISSED OFFSET
	uint32_t                                           NumStoppingSources;                                       // 0x013C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	EPanningMethod                                     PanningMethod;                                            // 0x0140(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	EMonoChannelUpmixMethod                            MonoChannelUpmixMethod;                                   // 0x0141(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x0142(0x0006) MISSED OFFSET
	class FString                                      DialogueFilenameFormat;                                   // 0x0148(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0158(0x0008) MISSED OFFSET
};


// Class Engine.AutoDestroySubsystem
// size:0x0018 (0x0030 - 0x0048)
class UAutoDestroySubsystem : public UWorldSubsystem
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	TArray<class AActor*>                              ActorsToPoll;                                             // 0x0038(0x0010) (ZeroConstructor)

	void OnActorEndPlay(class AActor* Actor, TEnumAsByte<EEndPlayReason> EndPlayReason)//offset:0x2DA8EF0;
};


// Class Engine.AutomationTestSettings
// size:0x0318 (0x0028 - 0x0340)
class UAutomationTestSettings : public UObject
{
public:
	TArray<class FString>                              EngineTestModules;                                        // 0x0028(0x0010) (Edit, ZeroConstructor, Config)
	TArray<class FString>                              EditorTestModules;                                        // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             AutomationTestmap;                                        // 0x0048(0x0018) (Edit, ZeroConstructor, Config)
	TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps;                                // 0x0060(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FSoftObjectPath>                     AssetsToOpen;                                             // 0x0070(0x0010) (Edit, ZeroConstructor, Config)
	TArray<class FString>                              MapsToPIETest;                                            // 0x0080(0x0010) (Edit, ZeroConstructor, Config)
	struct FBuildPromotionTestSettings                 BuildPromotionTest;                                       // 0x0090(0x01F0) (Edit, Config)
	struct FMaterialEditorPromotionSettings            MaterialEditorPromotionTest;                              // 0x0280(0x0030) (Edit, Config)
	struct FParticleEditorPromotionSettings            ParticleEditorPromotionTest;                              // 0x02B0(0x0010) (Edit, Config)
	struct FBlueprintEditorPromotionSettings           BlueprintEditorPromotionTest;                             // 0x02C0(0x0030) (Edit, Config)
	TArray<class FString>                              TestLevelFolders;                                         // 0x02F0(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FExternalToolDefinition>             ExternalTools;                                            // 0x0300(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FEditorImportExportTestDefinition>   ImportExportTestDefinitions;                              // 0x0310(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FLaunchOnTestSettings>               LaunchOnSettings;                                         // 0x0320(0x0010) (Edit, ZeroConstructor, Config)
	struct FIntPoint                                   DefaultScreenshotResolution;                              // 0x0330(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              PIETestDuration;                                          // 0x0338(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x033C(0x0004) MISSED OFFSET
};


// Class Engine.AvoidanceManager
// size:0x00B8 (0x0028 - 0x00E0)
class UAvoidanceManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	float                                              DefaultTimeToLive;                                        // 0x0030(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LockTimeAfterAvoid;                                       // 0x0034(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LockTimeAfterClean;                                       // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DeltaTimeToPredict;                                       // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ArtificialRadiusExpansion;                                // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TestHeightDifference;                                     // 0x0044(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              HeightCheckMargin;                                        // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x94];                                      // 0x004C(0x0094) MISSED OFFSET

	bool RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight)//offset:0x2DA8FE0;
	int GetObjectCount()//offset:0x2DA8EC0;
	int GetNewAvoidanceUID()//offset:0x2DA8E90;
	struct FVector GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp)//offset:0x2DA8DE0;
};


// Class Engine.BandwidthTestActor
// size:0x0020 (0x0220 - 0x0240)
class ABandwidthTestActor : public AActor
{
public:
	struct FBandwidthTestGenerator                     BandwidthGenerator;                                       // 0x0220(0x0020) (Net)
};


// Class Engine.BlendableInterface
// size:0x0000 (0x0028 - 0x0028)
class UBlendableInterface : public UInterface
{
public:
};


// Class Engine.Skeleton
// size:0x0340 (0x0028 - 0x0368)
class USkeleton : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TArray<struct FBoneNode>                           BoneTree;                                                 // 0x0038(0x0010) (Edit, ZeroConstructor, EditConst)
	TArray<struct FTransform>                          RefLocalPoses;                                            // 0x0048(0x0010) (ZeroConstructor, Deprecated)
	unsigned char                                      UnknownData01[0x118];                                     // 0x0058(0x0118) MISSED OFFSET
	struct FGuid                                       VirtualBoneGuid;                                          // 0x0170(0x0010) (ZeroConstructor, IsPlainOldData)
	TArray<struct FVirtualBone>                        VirtualBones;                                             // 0x0180(0x0010) (ZeroConstructor)
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                  // 0x0190(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x50];                                      // 0x01A0(0x0050) MISSED OFFSET
	struct FSmartNameContainer                         SmartNames;                                               // 0x01F0(0x0050)
	unsigned char                                      UnknownData03[0x30];                                      // 0x0240(0x0030) MISSED OFFSET
	TArray<class UBlendProfile*>                       BlendProfiles;                                            // 0x0270(0x0010) (ExportObject, ZeroConstructor)
	TArray<struct FAnimSlotGroup>                      SlotGroups;                                               // 0x0280(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData04[0xC8];                                      // 0x0290(0x00C8) MISSED OFFSET
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0358(0x0010) (Edit, ExportObject, ZeroConstructor)
};


// Class Engine.BlendProfile
// size:0x0020 (0x0028 - 0x0048)
class UBlendProfile : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class USkeleton*                                   OwningSkeleton;                                           // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FBlendProfileBoneEntry>              ProfileEntries;                                           // 0x0038(0x0010) (ZeroConstructor)
};


// Class Engine.BlockingVolume
// size:0x0000 (0x0258 - 0x0258)
class ABlockingVolume : public AVolume
{
public:
};


// Class Engine.BlueprintExtension
// size:0x0000 (0x0028 - 0x0028)
class UBlueprintExtension : public UObject
{
public:
};


// Class Engine.BlueprintMapLibrary
// size:0x0000 (0x0028 - 0x0028)
class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
{
public:

	static void SetMapPropertyByName(class UObject* Object, const struct FName& PropertyName, TMap<int, int> Value)//offset:0x2DADC60;
	static void Map_Values(TMap<int, int> TargetMap, TArray<int>* Values)//offset:0x2DADB50;
	static bool Map_Remove(TMap<int, int> TargetMap, int Key)//offset:0x2DAD9A0;
	static int Map_Length(TMap<int, int> TargetMap)//offset:0x2DAD8F0;
	static void Map_Keys(TMap<int, int> TargetMap, TArray<int>* Keys)//offset:0x2DAD7E0;
	static bool Map_Find(TMap<int, int> TargetMap, int Key, int* Value)//offset:0x2DAD540;
	static bool Map_Contains(TMap<int, int> TargetMap, int Key)//offset:0x2DAD390;
	static void Map_Clear(TMap<int, int> TargetMap)//offset:0x2DAD2F0;
	static void Map_Add(TMap<int, int> TargetMap, int Key, int Value)//offset:0x2DAD070;
};


// Class Engine.BlueprintPathsLibrary
// size:0x0000 (0x0028 - 0x0028)
class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
{
public:

	static class FString VideoCaptureDir()//offset:0x2DB3460;
	static void ValidatePath(const class FString& InPath, bool* bDidSucceed, struct FText* OutReason)//offset:0x2DB32F0;
	static void Split(const class FString& InPath, class FString* PathPart, class FString* FilenamePart, class FString* ExtensionPart)//offset:0x2DB3130;
	static class FString SourceConfigDir()//offset:0x2DB1FC0;
	static bool ShouldSaveToUserDir()//offset:0x2DB3100;
	static class FString ShaderWorkingDir()//offset:0x2DB3080;
	static void SetProjectFilePath(const class FString& NewGameProjectFilePath)//offset:0x2DB2FF0;
	static class FString SetExtension(const class FString& InPath, const class FString& InNewExtension)//offset:0x2DB2EB0;
	static class FString ScreenShotDir()//offset:0x2DB2E30;
	static class FString SandboxesDir()//offset:0x2DB2630;
	static class FString RootDir()//offset:0x2DB25B0;
	static void RemoveDuplicateSlashes(const class FString& InPath, class FString* OutPath)//offset:0x2DB24C0;
	static class FString ProjectUserDir()//offset:0x2DB2440;
	static class FString ProjectSavedDir()//offset:0x2DB23C0;
	static class FString ProjectPluginsDir()//offset:0x2DB2340;
	static class FString ProjectPersistentDownloadDir()//offset:0x2DB22C0;
	static class FString ProjectModsDir()//offset:0x2DB2240;
	static class FString ProjectLogDir()//offset:0x2DB21C0;
	static class FString ProjectIntermediateDir()//offset:0x2DB2140;
	static class FString ProjectDir()//offset:0x2DB20C0;
	static class FString ProjectContentDir()//offset:0x2DB2040;
	static class FString ProjectConfigDir()//offset:0x2DB1FC0;
	static class FString ProfilingDir()//offset:0x2DB1F40;
	static void NormalizeFilename(const class FString& InPath, class FString* OutPath)//offset:0x2DB1E50;
	static void NormalizeDirectoryName(const class FString& InPath, class FString* OutPath)//offset:0x2DB1D60;
	static class FString MakeValidFileName(const class FString& inString, const class FString& InReplacementChar)//offset:0x2DB1C20;
	static void MakeStandardFilename(const class FString& InPath, class FString* OutPath)//offset:0x2DB1B30;
	static void MakePlatformFilename(const class FString& InPath, class FString* OutPath)//offset:0x2DB1A40;
	static bool MakePathRelativeTo(const class FString& InPath, const class FString& InRelativeTo, class FString* OutPath)//offset:0x2DB18E0;
	static class FString LaunchDir()//offset:0x2DB1860;
	static bool IsSamePath(const class FString& PathA, const class FString& PathB)//offset:0x2DB1770;
	static bool IsRestrictedPath(const class FString& InPath)//offset:0x2DB16D0;
	static bool IsRelative(const class FString& InPath)//offset:0x2DB1630;
	static bool IsProjectFilePathSet()//offset:0x2DB1600;
	static bool IsDrive(const class FString& InPath)//offset:0x2DB1560;
	static bool HasProjectPersistentDownloadDir()//offset:0x2DB1530;
	static TArray<class FString> GetToolTipLocalizationPaths()//offset:0x2DB14F0;
	static TArray<class FString> GetRestrictedFolderNames()//offset:0x2DB14B0;
	static class FString GetRelativePathToRoot()//offset:0x2DB1470;
	static TArray<class FString> GetPropertyNameLocalizationPaths()//offset:0x2DB1430;
	static class FString GetProjectFilePath()//offset:0x2DB13B0;
	static class FString GetPath(const class FString& InPath)//offset:0x2DB12D0;
	static class FString GetInvalidFileSystemChars()//offset:0x2DB1110;
	static TArray<class FString> GetGameLocalizationPaths()//offset:0x2DB10D0;
	static class FString GetExtension(const class FString& InPath, bool bIncludeDot)//offset:0x2DB0FB0;
	static TArray<class FString> GetEngineLocalizationPaths()//offset:0x2DB0F70;
	static TArray<class FString> GetEditorLocalizationPaths()//offset:0x2DB0F30;
	static class FString GetCleanFilename(const class FString& InPath)//offset:0x2DB0E20;
	static class FString GetBaseFilename(const class FString& InPath, bool bRemovePath)//offset:0x2DB0D00;
	static class FString GeneratedConfigDir()//offset:0x2DB0C80;
	static class FString GameUserDeveloperDir()//offset:0x2DB0C00;
	static class FString GameSourceDir()//offset:0x2DB0B80;
	static class FString GameDevelopersDir()//offset:0x2DB0B00;
	static class FString GameAgnosticSavedDir()//offset:0x2DB0660;
	static bool FileExists(const class FString& InPath)//offset:0x2DB0A60;
	static class FString FeaturePackDir()//offset:0x2DB09E0;
	static class FString EnterprisePluginsDir()//offset:0x2DB0960;
	static class FString EnterpriseFeaturePackDir()//offset:0x2DB08E0;
	static class FString EnterpriseDir()//offset:0x2DB0860;
	static class FString EngineVersionAgnosticUserDir()//offset:0x2DB07E0;
	static class FString EngineUserDir()//offset:0x2DB0760;
	static class FString EngineSourceDir()//offset:0x2DB06E0;
	static class FString EngineSavedDir()//offset:0x2DB0660;
	static class FString EnginePluginsDir()//offset:0x2DB05E0;
	static class FString EngineIntermediateDir()//offset:0x2DB0560;
	static class FString EngineDir()//offset:0x2DB04E0;
	static class FString EngineContentDir()//offset:0x2DB0460;
	static class FString EngineConfigDir()//offset:0x2DB03E0;
	static bool DirectoryExists(const class FString& InPath)//offset:0x2DB0340;
	static class FString DiffDir()//offset:0x2DB02C0;
	static class FString CreateTempFilename(const class FString& Path, const class FString& Prefix, const class FString& Extension)//offset:0x2DB0130;
	static class FString ConvertToSandboxPath(const class FString& InPath, const class FString& InSandboxName)//offset:0x2DAFFF0;
	static class FString ConvertRelativePathToFull(const class FString& InPath, const class FString& InBasePath)//offset:0x2DAFEB0;
	static class FString ConvertFromSandboxPath(const class FString& InPath, const class FString& InSandboxName)//offset:0x2DAFD70;
	static class FString Combine(TArray<class FString> InPaths)//offset:0x2DAFC60;
	static bool CollapseRelativeDirectories(const class FString& InPath, class FString* OutPath)//offset:0x2DAFB60;
	static class FString CloudDir()//offset:0x2DAFAE0;
	static class FString ChangeExtension(const class FString& InPath, const class FString& InNewExtension)//offset:0x2DAF980;
	static class FString BugItDir()//offset:0x2DAF7F0;
	static class FString AutomationTransientDir()//offset:0x2DAF770;
	static class FString AutomationLogDir()//offset:0x2DAF6F0;
	static class FString AutomationDir()//offset:0x2DAF670;
};


// Class Engine.PlatformGameInstance
// size:0x00D0 (0x01A8 - 0x0278)
class UPlatformGameInstance : public UGameInstance
{
public:
	struct UEMulticastInlineDelegate                   ApplicationWillDeactivateDelegate;                        // 0x01A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   ApplicationHasReactivatedDelegate;                        // 0x01B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   ApplicationWillEnterBackgroundDelegate;                   // 0x01C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   ApplicationHasEnteredForegroundDelegate;                  // 0x01D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   ApplicationWillTerminateDelegate;                         // 0x01E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   ApplicationShouldUnloadResourcesDelegate;                 // 0x01F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   ApplicationReceivedStartupArgumentsDelegate;              // 0x0208(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   ApplicationRegisteredForRemoteNotificationsDelegate;      // 0x0218(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   ApplicationRegisteredForUserNotificationsDelegate;        // 0x0228(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   ApplicationFailedToRegisterForRemoteNotificationsDelegate;// 0x0238(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   ApplicationReceivedRemoteNotificationDelegate;            // 0x0248(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   ApplicationReceivedLocalNotificationDelegate;             // 0x0258(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   ApplicationReceivedScreenOrientationChangedNotificationDelegate;// 0x0268(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
};


// Class Engine.BlueprintPlatformLibrary
// size:0x0000 (0x0028 - 0x0028)
class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
{
public:

	static int ScheduleLocalNotificationFromNow(int inSecondsFromNow, const struct FText& Title, const struct FText& Body, const struct FText& Action, const class FString& ActivationEvent)//offset:0x2DB2BA0;
	static void ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, const class FString& ActivationEvent)//offset:0x2DB2AD0;
	static int ScheduleLocalNotificationBadgeAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const class FString& ActivationEvent)//offset:0x2DB2990;
	static int ScheduleLocalNotificationAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const struct FText& Title, const struct FText& Body, const struct FText& Action, const class FString& ActivationEvent)//offset:0x2DB26B0;
	static void GetLaunchNotification(bool* NotificationLaunchedApp, class FString* ActivationEvent, int* FireDate)//offset:0x2DB1190;
	static TEnumAsByte<EScreenOrientation> GetDeviceOrientation()//offset:0x2DB0F00;
	static void ClearAllLocalNotifications()//offset:0x2DAFAC0;
	static void CancelLocalNotificationById(int NotificationId)//offset:0x2DAF900;
	static void CancelLocalNotification(const class FString& ActivationEvent)//offset:0x2DAF870;
};


// Class Engine.BlueprintSetLibrary
// size:0x0000 (0x0028 - 0x0028)
class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
{
public:

	static void SetSetPropertyByName(class UObject* Object, const struct FName& PropertyName)//offset:0x2DB6030;
	static void Set_Union()//offset:0x2DB6DC0;
	static void Set_ToArray(TArray<int>* Result)//offset:0x2DB6CB0;
	static void Set_RemoveItems(TArray<int> Items)//offset:0x2DB6BA0;
	static bool Set_Remove(int Item)//offset:0x2DB69F0;
	static int Set_Length()//offset:0x2DB6940;
	static void Set_Intersection()//offset:0x2DB67C0;
	static void Set_Difference()//offset:0x2DB6640;
	static bool Set_Contains(int ItemToFind)//offset:0x2DB6490;
	static void Set_Clear()//offset:0x2DB63F0;
	static void Set_AddItems(TArray<int> NewItems)//offset:0x2DB62E0;
	static void Set_Add(int NewItem)//offset:0x2DB6130;
};


// Class Engine.BodySetup
// size:0x0258 (0x0048 - 0x02A0)
class UBodySetup : public UBodySetupCore
{
public:
	struct FKAggregateGeom                             AggGeom;                                                  // 0x0048(0x0058) (Edit)
	unsigned char                                      bAlwaysFullAnimWeight;                                    // 0x00A0(0x0001) (Deprecated)
	unsigned char                                      bConsiderForBounds;                                       // 0x00A0(0x0001) (Edit)
	unsigned char                                      bMeshCollideAll;                                          // 0x00A0(0x0001) (Transient)
	unsigned char                                      bDoubleSidedGeometry;                                     // 0x00A0(0x0001) (Edit)
	unsigned char                                      bGenerateNonMirroredCollision;                            // 0x00A0(0x0001)
	unsigned char                                      bSharedCookedData;                                        // 0x00A0(0x0001)
	unsigned char                                      bGenerateMirroredCollision;                               // 0x00A0(0x0001)
	unsigned char                                      bSupportUVsAndFaceRemap;                                  // 0x00A0(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FWalkableSlopeOverride                      WalkableSlopeOverride;                                    // 0x00B0(0x0010) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData01[0x68];                                      // 0x00C0(0x0068) MISSED OFFSET
	struct FBodyInstance                               DefaultInstance;                                          // 0x0128(0x0158) (Edit)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0280(0x0008) MISSED OFFSET
	struct FVector                                     BuildScale3D;                                             // 0x0288(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x0294(0x000C) MISSED OFFSET
};


// Class Engine.BoneMaskFilter
// size:0x0010 (0x0028 - 0x0038)
class UBoneMaskFilter : public UObject
{
public:
	TArray<struct FInputBlendPose>                     BlendPoses;                                               // 0x0028(0x0010) (Edit, ZeroConstructor)
};


// Class Engine.BookmarkBase
// size:0x0000 (0x0028 - 0x0028)
class UBookmarkBase : public UObject
{
public:
};


// Class Engine.BookMark
// size:0x0028 (0x0028 - 0x0050)
class UBookMark : public UBookmarkBase
{
public:
	struct FVector                                     Location;                                                 // 0x0028(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    Rotation;                                                 // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class FString>                              HiddenLevels;                                             // 0x0040(0x0010) (Edit, ZeroConstructor)
};


// Class Engine.BookMark2D
// size:0x0010 (0x0028 - 0x0038)
class UBookMark2D : public UBookmarkBase
{
public:
	float                                              Zoom2D;                                                   // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FIntPoint                                   Location;                                                 // 0x002C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
};


// Class Engine.BoundsCopyComponent
// size:0x0070 (0x00B0 - 0x0120)
class UBoundsCopyComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x00B0(0x0028) UNKNOWN PROPERTY: 
	bool                                               bUseCollidingComponentsForSourceBounds;                   // 0x00D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bKeepOwnBoundsScale;                                      // 0x00D9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCollidingComponentsForOwnBounds;                      // 0x00DA(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x00DB(0x0005) MISSED OFFSET
	struct FTransform                                  PostTransform;                                            // 0x00E0(0x0030) (IsPlainOldData)
	bool                                               bCopyXBounds;                                             // 0x0110(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bCopyYBounds;                                             // 0x0111(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bCopyZBounds;                                             // 0x0112(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xD];                                       // 0x0113(0x000D) MISSED OFFSET
};


// Class Engine.ShapeComponent
// size:0x0020 (0x0450 - 0x0470)
class UShapeComponent : public UPrimitiveComponent
{
public:
	class UBodySetup*                                  ShapeBodySetup;                                           // 0x0450(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	class UNavAreaBase*                                AreaClass;                                                // 0x0458(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FColor                                      ShapeColor;                                               // 0x0460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDrawOnlyIfSelected;                                      // 0x0464(0x0001)
	unsigned char                                      bShouldCollideWhenPlacing;                                // 0x0464(0x0001)
	unsigned char                                      bDynamicObstacle;                                         // 0x0464(0x0001) (Edit)
	unsigned char                                      UnknownData00[0xB];                                       // 0x0465(0x000B) MISSED OFFSET
};


// Class Engine.BoxComponent
// size:0x0010 (0x0470 - 0x0480)
class UBoxComponent : public UShapeComponent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0470(0x0004) MISSED OFFSET
	float                                              LineThickness;                                            // 0x0474(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0478(0x0008) MISSED OFFSET

	void SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps)//offset:0x2DB5F50;
	struct FVector GetUnscaledBoxExtent()//offset:0x2DB5F20;
	struct FVector GetScaledBoxExtent()//offset:0x2DB5EC0;
};


// Class Engine.ReflectionCapture
// size:0x0008 (0x0220 - 0x0228)
class AReflectionCapture : public AActor
{
public:
	class UReflectionCaptureComponent*                 CaptureComponent;                                         // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
};


// Class Engine.BoxReflectionCapture
// size:0x0000 (0x0228 - 0x0228)
class ABoxReflectionCapture : public AReflectionCapture
{
public:
};


// Class Engine.ReflectionCaptureComponent
// size:0x0070 (0x0200 - 0x0270)
class UReflectionCaptureComponent : public USceneComponent
{
public:
	EReflectionSourceType                              ReflectionSourceType;                                     // 0x0200(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EMobileReflectionCompression                       MobileReflectionCompression;                              // 0x0201(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0202(0x0006) MISSED OFFSET
	class UTextureCube*                                Cubemap;                                                  // 0x0208(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceCubemapAngle;                                       // 0x0210(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Brightness;                                               // 0x0214(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bModifyMaxValueRGBM;                                      // 0x0218(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0219(0x0003) MISSED OFFSET
	float                                              MaxValueRGBM;                                             // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     CaptureOffset;                                            // 0x0220(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       MapBuildDataId;                                           // 0x022C(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x14];                                      // 0x023C(0x0014) MISSED OFFSET
	class UTextureCube*                                CachedEncodedHDRCubemap;                                  // 0x0250(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0258(0x0018) MISSED OFFSET
};


// Class Engine.BoxReflectionCaptureComponent
// size:0x0020 (0x0270 - 0x0290)
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              BoxTransitionDistance;                                    // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0274(0x0004) MISSED OFFSET
	class UBoxComponent*                               PreviewInfluenceBox;                                      // 0x0278(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               PreviewCaptureBox;                                        // 0x0280(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0288(0x0008) MISSED OFFSET
};


// Class Engine.Breakpoint
// size:0x0018 (0x0028 - 0x0040)
class UBreakpoint : public UObject
{
public:
	unsigned char                                      bEnabled;                                                 // 0x0028(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	class UEdGraphNode*                                Node;                                                     // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bStepOnce;                                                // 0x0038(0x0001)
	unsigned char                                      bStepOnce_WasPreviouslyDisabled;                          // 0x0038(0x0001)
	unsigned char                                      bStepOnce_RemoveAfterHit;                                 // 0x0038(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
};


// Class Engine.BrushBuilder
// size:0x0058 (0x0028 - 0x0080)
class UBrushBuilder : public UObject
{
public:
	class FString                                      BitmapFilename;                                           // 0x0028(0x0010) (ZeroConstructor)
	class FString                                      ToolTip;                                                  // 0x0038(0x0010) (ZeroConstructor)
	unsigned char                                      NotifyBadParams;                                          // 0x0048(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	TArray<struct FVector>                             Vertices;                                                 // 0x0050(0x0010) (ZeroConstructor)
	TArray<struct FBuilderPoly>                        Polys;                                                    // 0x0060(0x0010) (ZeroConstructor)
	struct FName                                       Layer;                                                    // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      MergeCoplanars;                                           // 0x0078(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0079(0x0007) MISSED OFFSET
};


// Class Engine.BrushComponent
// size:0x0010 (0x0450 - 0x0460)
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                      Brush;                                                    // 0x0450(0x0008) (ZeroConstructor, IsPlainOldData)
	class UBodySetup*                                  BrushBodySetup;                                           // 0x0458(0x0008) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.BrushShape
// size:0x0000 (0x0258 - 0x0258)
class ABrushShape : public ABrush
{
public:
};


// Class Engine.ButtonStyleAsset
// size:0x0278 (0x0028 - 0x02A0)
class UButtonStyleAsset : public UObject
{
public:
	struct FButtonStyle                                ButtonStyle;                                              // 0x0028(0x0278) (Edit)
};


// Class Engine.CameraAnim
// size:0x0598 (0x0028 - 0x05C0)
class UCameraAnim : public UObject
{
public:
	class UInterpGroup*                                CameraInterpGroup;                                        // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              AnimLength;                                               // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FBox                                        BoundingBox;                                              // 0x0034(0x001C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRelativeToInitialTransform;                              // 0x0050(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bRelativeToInitialFOV;                                    // 0x0050(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	float                                              BaseFOV;                                                  // 0x0054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0058(0x0008) MISSED OFFSET
	struct FPostProcessSettings                        BasePostProcessSettings;                                  // 0x0060(0x0550)
	float                                              BasePostProcessBlendWeight;                               // 0x05B0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x05B4(0x000C) MISSED OFFSET
};


// Class Engine.CameraAnimInst
// size:0x00E8 (0x0028 - 0x0110)
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                                 CamAnim;                                                  // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class UInterpGroupInst*                            InterpGroupInst;                                          // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0038(0x0018) MISSED OFFSET
	float                                              PlayRate;                                                 // 0x0050(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x14];                                      // 0x0054(0x0014) MISSED OFFSET
	class UInterpTrackMove*                            MoveTrack;                                                // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UInterpTrackInstMove*                        MoveInst;                                                 // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	ECameraShakePlaySpace                              PlaySpace;                                                // 0x0078(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x97];                                      // 0x0079(0x0097) MISSED OFFSET

	void Stop(bool bImmediate)//offset:0x2DBBEE0;
	void SetScale(float NewDuration)//offset:0x2DBBC20;
	void SetDuration(float NewDuration)//offset:0x2DBB920;
};


// Class Engine.CameraBlockingVolume
// size:0x0000 (0x0258 - 0x0258)
class ACameraBlockingVolume : public AVolume
{
public:
};


// Class Engine.CameraModifier
// size:0x0020 (0x0028 - 0x0048)
class UCameraModifier : public UObject
{
public:
	unsigned char                                      bDebug;                                                   // 0x0028(0x0001) (Edit)
	unsigned char                                      bExclusive;                                               // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	unsigned char                                      Priority;                                                 // 0x002C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	class APlayerCameraManager*                        CameraOwner;                                              // 0x0030(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              AlphaInTime;                                              // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AlphaOutTime;                                             // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Alpha;                                                    // 0x0040(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	bool IsDisabled()//offset:0x1F57FF0;
	class AActor* GetViewTarget()//offset:0x2496AC0;
	void EnableModifier()//offset:0x2DB9C50;
	void DisableModifier(bool bImmediate)//offset:0x2DB9BC0;
	void BlueprintModifyPostProcess(float DeltaTime, float* PostProcessBlendWeight, struct FPostProcessSettings* PostProcessSettings)//offset:0x13CEB30;
	void BlueprintModifyCamera(float DeltaTime, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float FOV, struct FVector* NewViewLocation, struct FRotator* NewViewRotation, float* NewFOV)//offset:0x13CEB30;
};


// Class Engine.CameraModifier_CameraShake
// size:0x0068 (0x0048 - 0x00B0)
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	TArray<struct FActiveCameraShakeInfo>              ActiveShakes;                                             // 0x0048(0x0010) (ZeroConstructor)
	TMap<class UCameraShakeBase*, struct FPooledCameraShakes> ExpiredPooledShakesMap;                                   // 0x0058(0x0050)
	float                                              SplitScreenShakeScale;                                    // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
};


// Class Engine.CameraShakeBase
// size:0x0078 (0x0028 - 0x00A0)
class UCameraShakeBase : public UObject
{
public:
	bool                                               bSingleInstance;                                          // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              ShakeScale;                                               // 0x002C(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class APlayerCameraManager*                        CameraManager;                                            // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x68];                                      // 0x0038(0x0068) MISSED OFFSET
};


// Class Engine.MatineeCameraShake
// size:0x00E0 (0x00A0 - 0x0180)
class UMatineeCameraShake : public UCameraShakeBase
{
public:
	float                                              OscillationBlendOutTime;                                  // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FROscillator                                RotOscillation;                                           // 0x00A4(0x0024) (Edit, BlueprintVisible)
	struct FVOscillator                                LocOscillation;                                           // 0x00C8(0x0024) (Edit, BlueprintVisible)
	struct FFOscillator                                FOVOscillation;                                           // 0x00EC(0x000C) (Edit, BlueprintVisible)
	float                                              AnimPlayRate;                                             // 0x00F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AnimScale;                                                // 0x00FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AnimBlendInTime;                                          // 0x0100(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AnimBlendOutTime;                                         // 0x0104(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomAnimSegmentDuration;                                // 0x0108(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x010C(0x0004) MISSED OFFSET
	class UCameraAnim*                                 Anim;                                                     // 0x0110(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRandomAnimSegment;                                       // 0x0118(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	float                                              OscillatorTimeRemaining;                                  // 0x011C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UCameraAnimInst*                             AnimInst;                                                 // 0x0120(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x58];                                      // 0x0128(0x0058) MISSED OFFSET

	void ReceiveStopShake(bool bImmediately)//offset:0x13CEB30;
	void ReceivePlayShake(float Scale)//offset:0x13CEB30;
	bool ReceiveIsFinished()//offset:0x2DBB6C0;
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, const struct FMinimalViewInfo& POV, struct FMinimalViewInfo* ModifiedPOV)//offset:0x13CEB30;
};


// Class Engine.CameraShakeSourceActor
// size:0x0008 (0x0220 - 0x0228)
class ACameraShakeSourceActor : public AActor
{
public:
	class UCameraShakeSourceComponent*                 CameraShakeSourceComponent;                               // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
};


// Class Engine.CameraShakeSourceComponent
// size:0x0020 (0x0200 - 0x0220)
class UCameraShakeSourceComponent : public USceneComponent
{
public:
	float                                              OuterAttenuationRadius;                                   // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0204(0x0004) MISSED OFFSET
	class UCameraShakeBase*                            CameraShake;                                              // 0x0208(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoStart;                                               // 0x0210(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0211(0x000F) MISSED OFFSET

	void StopAllCameraShakesOfType(class UCameraShakeBase* InCameraShake, bool bImmediately)//offset:0x2DBC000;
	void StopAllCameraShakes(bool bImmediately)//offset:0x2DBBF70;
	void StartCameraShake(class UCameraShakeBase* InCameraShake, float Scale, ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot)//offset:0x2DBBD60;
	void Start()//offset:0x2DBBD40;
	float GetAttenuationFactor(const struct FVector& Location)//offset:0x2DB9C70;
};


// Class Engine.Canvas
// size:0x02A8 (0x0028 - 0x02D0)
class UCanvas : public UObject
{
public:
	float                                              OrgX;                                                     // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              OrgY;                                                     // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              ClipX;                                                    // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              ClipY;                                                    // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      DrawColor;                                                // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCenterX;                                                 // 0x003C(0x0001)
	unsigned char                                      bCenterY;                                                 // 0x003C(0x0001)
	unsigned char                                      bNoSmooth;                                                // 0x003C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	int                                                SizeX;                                                    // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                SizeY;                                                    // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
	struct FPlane                                      ColorModulate;                                            // 0x0050(0x0010) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  DefaultTexture;                                           // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  GradientTexture0;                                         // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData)
	class UReporterGraph*                              ReporterGraph;                                            // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x258];                                     // 0x0078(0x0258) MISSED OFFSET

	struct FVector2D K2_TextSize(class UFont* RenderFont, const class FString& RenderText, const struct FVector2D& Scale)//offset:0x2DBB590;
	struct FVector2D K2_StrLen(class UFont* RenderFont, const class FString& RenderText)//offset:0x2DBB4A0;
	struct FVector K2_Project(const struct FVector& WorldLocation)//offset:0x2DBB3F0;
	void K2_DrawTriangle(class UTexture* RenderTexture, TArray<struct FCanvasUVTri> Triangles)//offset:0x2DBB2C0;
	void K2_DrawTexture(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, TEnumAsByte<EBlendMode> BlendMode, float Rotation, const struct FVector2D& PivotPoint)//offset:0x2DBB010;
	void K2_DrawText(class UFont* RenderFont, const class FString& RenderText, const struct FVector2D& ScreenPosition, const struct FVector2D& Scale, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor)//offset:0x2DBAC50;
	void K2_DrawPolygon(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& Radius, int NumberOfSides, const struct FLinearColor& RenderColor)//offset:0x2DBAAA0;
	void K2_DrawMaterialTriangle(class UMaterialInterface* RenderMaterial, TArray<struct FCanvasUVTri> Triangles)//offset:0x2DBA970;
	void K2_DrawMaterial(class UMaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float Rotation, const struct FVector2D& PivotPoint)//offset:0x2DBA730;
	void K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor)//offset:0x2DBA5D0;
	void K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness, const struct FLinearColor& RenderColor)//offset:0x2DBA470;
	void K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float Rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize)//offset:0x2DB9FE0;
	void K2_Deproject(const struct FVector2D& ScreenPosition, struct FVector* WorldOrigin, struct FVector* WorldDirection)//offset:0x2DB9EC0;
};


// Class Engine.TextureRenderTarget
// size:0x0008 (0x00D8 - 0x00E0)
class UTextureRenderTarget : public UTexture
{
public:
	float                                              TargetGamma;                                              // 0x00D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
};


// Class Engine.TextureRenderTarget2D
// size:0x0028 (0x00E0 - 0x0108)
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                    // 0x00E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SizeY;                                                    // 0x00E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                ClearColor;                                               // 0x00E8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x00F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x00F9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bForceLinearGamma;                                        // 0x00FA(0x0001)
	unsigned char                                      bHDR;                                                     // 0x00FA(0x0001) (Deprecated)
	unsigned char                                      bGPUSharedFlag;                                           // 0x00FA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	TEnumAsByte<ETextureRenderTargetFormat>            RenderTargetFormat;                                       // 0x00FB(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoGenerateMips;                                        // 0x00FC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	TEnumAsByte<ETextureFilter>                        MipsSamplerFilter;                                        // 0x00FD(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       MipsAddressU;                                             // 0x00FE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       MipsAddressV;                                             // 0x00FF(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                           // 0x0100(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0101(0x0007) MISSED OFFSET
};


// Class Engine.CanvasRenderTarget2D
// size:0x0020 (0x0108 - 0x0128)
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{
public:
	struct UEMulticastInlineDelegate                   OnCanvasRenderTargetUpdate;                               // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TWeakObjectPtr<class UWorld>                       World;                                                    // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bShouldClearRenderTargetOnReceiveUpdate;                  // 0x0120(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0121(0x0007) MISSED OFFSET

	void UpdateResource()//offset:0x2482FD0;
	void ReceiveUpdate(class UCanvas* Canvas, int Width, int Height)//offset:0x13CEB30;
	void GetSize(int* Width, int* Height)//offset:0x2DC04B0;
	static class UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(class UObject* WorldContextObject, class UCanvasRenderTarget2D* CanvasRenderTarget2DClass, int Width, int Height)//offset:0x2DBFED0;
};


// Class Engine.CapsuleComponent
// size:0x0000 (0x0470 - 0x0470)
class UCapsuleComponent : public UShapeComponent
{
public:

	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps)//offset:0x2DC24F0;
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps)//offset:0x2DC2410;
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps)//offset:0x2DC2330;
	void GetUnscaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere)//offset:0x2DC06F0;
	void GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight)//offset:0x2DC0600;
	float GetUnscaledCapsuleRadius()//offset:0x2DC05E0;
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere()//offset:0x2DC05B0;
	float GetUnscaledCapsuleHalfHeight()//offset:0x2DC0590;
	float GetShapeScale()//offset:0x2DC0470;
	void GetScaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere)//offset:0x2DC0350;
	void GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight)//offset:0x2DC0240;
	float GetScaledCapsuleRadius()//offset:0x2DC0200;
	float GetScaledCapsuleHalfHeight_WithoutHemisphere()//offset:0x2DC01B0;
	float GetScaledCapsuleHalfHeight()//offset:0x2DC0180;
};


// Class Engine.CheckBoxStyleAsset
// size:0x0580 (0x0028 - 0x05A8)
class UCheckBoxStyleAsset : public UObject
{
public:
	struct FCheckBoxStyle                              CheckBoxStyle;                                            // 0x0028(0x0580) (Edit)
};


// Class Engine.ChildActorComponent
// size:0x0030 (0x0200 - 0x0230)
class UChildActorComponent : public USceneComponent
{
public:
	class AActor*                                      ChildActor;                                               // 0x0200(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	class AActor*                                      ChildActorTemplate;                                       // 0x0208(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, EditConst, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0210(0x0020) MISSED OFFSET

	void SetChildActorClass(class AActor* InClass)//offset:0x2DC86C0;
};


// Class Engine.ChildConnection
// size:0x0008 (0x1B58 - 0x1B60)
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                              Parent;                                                   // 0x1B58(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
};


// Class Engine.PlatformInterfaceBase
// size:0x0010 (0x0028 - 0x0038)
class UPlatformInterfaceBase : public UObject
{
public:
	TArray<struct FDelegateArray>                      AllDelegates;                                             // 0x0028(0x0010) (ZeroConstructor)
};


// Class Engine.CloudStorageBase
// size:0x0018 (0x0038 - 0x0050)
class UCloudStorageBase : public UPlatformInterfaceBase
{
public:
	TArray<class FString>                              LocalCloudFiles;                                          // 0x0038(0x0010) (ZeroConstructor)
	unsigned char                                      bSuppressDelegateCalls;                                   // 0x0048(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
};


// Class Engine.CollisionProfile
// size:0x0138 (0x0038 - 0x0170)
class UCollisionProfile : public UDeveloperSettings
{
public:
	TArray<struct FCollisionResponseTemplate>          Profiles;                                                 // 0x0038(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FCustomChannelSetup>                 DefaultChannelResponses;                                  // 0x0048(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FCustomProfile>                      EditProfiles;                                             // 0x0058(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FRedirector>                         ProfileRedirects;                                         // 0x0068(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FRedirector>                         CollisionChannelRedirects;                                // 0x0078(0x0010) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData00[0xE8];                                      // 0x0088(0x00E8) MISSED OFFSET
};


// Class Engine.Commandlet
// size:0x0058 (0x0028 - 0x0080)
class UCommandlet : public UObject
{
public:
	class FString                                      HelpDescription;                                          // 0x0028(0x0010) (ZeroConstructor)
	class FString                                      HelpUsage;                                                // 0x0038(0x0010) (ZeroConstructor)
	class FString                                      HelpWebLink;                                              // 0x0048(0x0010) (ZeroConstructor)
	TArray<class FString>                              HelpParamNames;                                           // 0x0058(0x0010) (ZeroConstructor)
	TArray<class FString>                              HelpParamDescriptions;                                    // 0x0068(0x0010) (ZeroConstructor)
	unsigned char                                      IsServer;                                                 // 0x0078(0x0001)
	unsigned char                                      IsClient;                                                 // 0x0078(0x0001)
	unsigned char                                      IsEditor;                                                 // 0x0078(0x0001)
	unsigned char                                      LogToConsole;                                             // 0x0078(0x0001)
	unsigned char                                      ShowErrorCount;                                           // 0x0078(0x0001)
	unsigned char                                      ShowProgress;                                             // 0x0078(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET
};


// Class Engine.ComponentDelegateBinding
// size:0x0010 (0x0028 - 0x0038)
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{
public:
	TArray<struct FBlueprintComponentDelegateBinding>  ComponentDelegateBindings;                                // 0x0028(0x0010) (ZeroConstructor)
};


// Class Engine.ActorComponentInstanceDataTransientOuter
// size:0x0000 (0x0028 - 0x0028)
class UActorComponentInstanceDataTransientOuter : public UObject
{
public:
};


// Class Engine.CurveTable
// size:0x0078 (0x0028 - 0x00A0)
class UCurveTable : public UObject
{
public:
};


// Class Engine.CompositeCurveTable
// size:0x0028 (0x00A0 - 0x00C8)
class UCompositeCurveTable : public UCurveTable
{
public:
	TArray<class UCurveTable*>                         ParentTables;                                             // 0x00A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UCurveTable*>                         OldParentTables;                                          // 0x00B0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00C0(0x0008) MISSED OFFSET
};


// Class Engine.DataTable
// size:0x0088 (0x0028 - 0x00B0)
class UDataTable : public UObject
{
public:
	class UScriptStruct*                               RowStruct;                                                // 0x0028(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0030(0x0050) MISSED OFFSET
	unsigned char                                      bStripFromClientBuilds;                                   // 0x0080(0x0001) (Edit)
	unsigned char                                      bIgnoreExtraFields;                                       // 0x0080(0x0001) (Edit)
	unsigned char                                      bIgnoreMissingFields;                                     // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
	class FString                                      ImportKeyField;                                           // 0x0088(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0098(0x0018) MISSED OFFSET
};


// Class Engine.CompositeDataTable
// size:0x0028 (0x00B0 - 0x00D8)
class UCompositeDataTable : public UDataTable
{
public:
	TArray<class UDataTable*>                          ParentTables;                                             // 0x00B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UDataTable*>                          OldParentTables;                                          // 0x00C0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D0(0x0008) MISSED OFFSET
};


// Class Engine.Console
// size:0x0108 (0x0028 - 0x0130)
class UConsole : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	class ULocalPlayer*                                ConsoleTargetPlayer;                                      // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  DefaultTexture_Black;                                     // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  DefaultTexture_White;                                     // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0050(0x0018) MISSED OFFSET
	TArray<class FString>                              HistoryBuffer;                                            // 0x0068(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData02[0xB8];                                      // 0x0078(0x00B8) MISSED OFFSET
};


// Class Engine.ControlChannel
// size:0x0018 (0x0070 - 0x0088)
class UControlChannel : public UChannel
{
public:
};


// Class Engine.StreamingSettings
// size:0x0038 (0x0038 - 0x0070)
class UStreamingSettings : public UDeveloperSettings
{
public:
	unsigned char                                      AsyncLoadingThreadEnabled;                                // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      WarnIfTimeLimitExceeded;                                  // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	float                                              TimeLimitExceededMultiplier;                              // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TimeLimitExceededMinTime;                                 // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MinBulkDataSizeForAsyncLoading;                           // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UseBackgroundLevelStreaming;                              // 0x0048(0x0001) (Edit, Config)
	unsigned char                                      AsyncLoadingUseFullTimeLimit;                             // 0x0048(0x0001) (Edit, Config)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	float                                              AsyncLoadingTimeLimit;                                    // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              PriorityAsyncLoadingExtraTime;                            // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LevelStreamingActorsUpdateTimeLimit;                      // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              PriorityLevelStreamingActorsUpdateExtraTime;              // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                LevelStreamingComponentsRegistrationGranularity;          // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LevelStreamingUnregisterComponentsTimeLimit;              // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                LevelStreamingComponentsUnregistrationGranularity;        // 0x0064(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      FlushStreamingOnExit;                                     // 0x0068(0x0001) (Edit, Config)
	unsigned char                                      EventDrivenLoaderEnabled;                                 // 0x0068(0x0001) (Edit, Config)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
};


// Class Engine.GarbageCollectionSettings
// size:0x0020 (0x0038 - 0x0058)
class UGarbageCollectionSettings : public UDeveloperSettings
{
public:
	float                                              TimeBetweenPurgingPendingKillObjects;                     // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      FlushStreamingOnGC;                                       // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      AllowParallelGC;                                          // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      IncrementalBeginDestroyEnabled;                           // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      MultithreadedDestructionEnabled;                          // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      CreateGCClusters;                                         // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      AssetClusteringEnabled;                                   // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      ActorClusteringEnabled;                                   // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      BlueprintClusteringEnabled;                               // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      UseDisregardForGCOnDedicatedServers;                      // 0x003D(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003E(0x0002) MISSED OFFSET
	int                                                MinGCClusterSize;                                         // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                NumRetriesBeforeForcingGC;                                // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxObjectsNotConsideredByGC;                              // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                SizeOfPermanentObjectPool;                                // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxObjectsInGame;                                         // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxObjectsInEditor;                                       // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
};


// Class Engine.CullDistanceVolume
// size:0x0018 (0x0258 - 0x0270)
class ACullDistanceVolume : public AVolume
{
public:
	TArray<struct FCullDistanceSizePair>               CullDistances;                                            // 0x0258(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      bEnabled;                                                 // 0x0268(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0269(0x0007) MISSED OFFSET
};


// Class Engine.CurveEdPresetCurve
// size:0x0000 (0x0028 - 0x0028)
class UCurveEdPresetCurve : public UObject
{
public:
};


// Class Engine.CurveLinearColor
// size:0x0220 (0x0030 - 0x0250)
class UCurveLinearColor : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurves[0x4];                                         // 0x0030(0x0080)
	float                                              AdjustHue;                                                // 0x0230(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustSaturation;                                         // 0x0234(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustBrightness;                                         // 0x0238(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustBrightnessCurve;                                    // 0x023C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustVibrance;                                           // 0x0240(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustMinAlpha;                                           // 0x0244(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustMaxAlpha;                                           // 0x0248(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x024C(0x0004) MISSED OFFSET

	struct FLinearColor GetLinearColorValue(float InTime)//offset:0x2DD0BE0;
	struct FLinearColor GetClampedLinearColorValue(float InTime)//offset:0x2DD0310;
};


// Class Engine.Texture2D
// size:0x0028 (0x00D8 - 0x0100)
class UTexture2D : public UTexture
{
public:
	int                                                LevelIndex;                                               // 0x00D8(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	int                                                FirstResourceMemMip;                                      // 0x00DC(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTemporarilyDisableStreaming;                             // 0x00E0(0x0001) (Transient)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x00E1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x00E2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00E3(0x0001) MISSED OFFSET
	struct FIntPoint                                   ImportedSize;                                             // 0x00E4(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x14];                                      // 0x00EC(0x0014) MISSED OFFSET

	int Blueprint_GetSizeY()//offset:0x2EF4C40;
	int Blueprint_GetSizeX()//offset:0x2EF4C10;
};


// Class Engine.CurveLinearColorAtlas
// size:0x0018 (0x0100 - 0x0118)
class UCurveLinearColorAtlas : public UTexture2D
{
public:
	uint32_t                                           TextureSize;                                              // 0x0100(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	TArray<class UCurveLinearColor*>                   GradientCurves;                                           // 0x0108(0x0010) (Edit, ZeroConstructor)

	bool GetCurvePosition(class UCurveLinearColor* InCurve, float* Position)//offset:0x2DD03B0;
};


// Class Engine.CurveSourceInterface
// size:0x0000 (0x0028 - 0x0028)
class UCurveSourceInterface : public UInterface
{
public:

	float GetCurveValue(const struct FName& CurveName)//offset:0x2DD0490;
	void GetCurves(TArray<struct FNamedCurveValue>* OutValues)//offset:0x2DD0530;
	struct FName GetBindingName()//offset:0x2DD02D0;
};


// Class Engine.CurveVector
// size:0x0180 (0x0030 - 0x01B0)
class UCurveVector : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurves[0x3];                                         // 0x0030(0x0080)

	struct FVector GetVectorValue(float InTime)//offset:0x2DD0CB0;
};


// Class Engine.DataTableFunctionLibrary
// size:0x0000 (0x0028 - 0x0028)
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static void GetDataTableRowNames(class UDataTable* Table, TArray<struct FName>* OutRowNames)//offset:0x2DD0AD0;
	static bool GetDataTableRowFromName(class UDataTable* Table, const struct FName& RowName, struct FTableRowBase* OutRow)//offset:0x2DD0740;
	static TArray<class FString> GetDataTableColumnAsString(class UDataTable* DataTable, const struct FName& PropertyName)//offset:0x2DD05E0;
	static void EvaluateCurveTableRow(class UCurveTable* CurveTable, const struct FName& RowName, float InXY, TEnumAsByte<EEvaluateCurveTableResult>* OutResult, float* OutXY, const class FString& ContextString)//offset:0x2DD00D0;
	static bool DoesDataTableRowExist(class UDataTable* Table, const struct FName& RowName)//offset:0x2DD0000;
};


// Class Engine.DebugCameraController
// size:0x0108 (0x0570 - 0x0678)
class ADebugCameraController : public APlayerController
{
public:
	unsigned char                                      bShowSelectedInfo;                                        // 0x0570(0x0001) (Config, GlobalConfig)
	unsigned char                                      bIsFrozenRendering;                                       // 0x0570(0x0001)
	unsigned char                                      bIsOrbitingSelectedActor;                                 // 0x0570(0x0001)
	unsigned char                                      bOrbitPivotUseCenter;                                     // 0x0570(0x0001)
	unsigned char                                      bEnableBufferVisualization;                               // 0x0570(0x0001)
	unsigned char                                      bEnableBufferVisualizationFullMode;                       // 0x0570(0x0001)
	unsigned char                                      bIsBufferVisualizationInputSetup;                         // 0x0570(0x0001)
	unsigned char                                      bLastDisplayEnabled;                                      // 0x0570(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0571(0x0007) MISSED OFFSET
	class UDrawFrustumComponent*                       DrawFrustum;                                              // 0x0578(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class AActor*                                      SelectedActor;                                            // 0x0580(0x0008) (ZeroConstructor, IsPlainOldData)
	class UPrimitiveComponent*                         SelectedComponent;                                        // 0x0588(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FHitResult                                  SelectedHitPoint;                                         // 0x0590(0x008C) (IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x061C(0x0004) MISSED OFFSET
	class APlayerController*                           OriginalControllerRef;                                    // 0x0620(0x0008) (ZeroConstructor, IsPlainOldData)
	class UPlayer*                                     OriginalPlayer;                                           // 0x0628(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              SpeedScale;                                               // 0x0630(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialMaxSpeed;                                          // 0x0634(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialAccel;                                             // 0x0638(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialDecel;                                             // 0x063C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x38];                                      // 0x0640(0x0038) MISSED OFFSET

	void ToggleDisplay()//offset:0x2DD0E80;
	void ShowDebugSelectedInfo()//offset:0x2DD0E60;
	void SetPawnMovementSpeedScale(float NewSpeedScale)//offset:0x2DD0DE0;
	void ReceiveOnDeactivate(class APlayerController* RestoredPC)//offset:0x13CEB30;
	void ReceiveOnActorSelected(class AActor* NewSelectedActor, const struct FVector& SelectHitLocation, const struct FVector& SelectHitNormal, const struct FHitResult& Hit)//offset:0x13CEB30;
	void ReceiveOnActivate(class APlayerController* OriginalPC)//offset:0x13CEB30;
	class AActor* GetSelectedActor()//offset:0x2DD0C80;
};


// Class Engine.DebugCameraControllerSettings
// size:0x0010 (0x0038 - 0x0048)
class UDebugCameraControllerSettings : public UDeveloperSettings
{
public:
	TArray<struct FDebugCameraControllerSettingsViewModeIndex> CycleViewModes;                                           // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
};


// Class Engine.DebugCameraHUD
// size:0x0000 (0x0310 - 0x0310)
class ADebugCameraHUD : public AHUD
{
public:
};


// Class Engine.DebugDrawService
// size:0x0000 (0x0028 - 0x0028)
class UDebugDrawService : public UBlueprintFunctionLibrary
{
public:
};


// Class Engine.DecalActor
// size:0x0008 (0x0220 - 0x0228)
class ADecalActor : public AActor
{
public:
	class UDecalComponent*                             Decal;                                                    // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial)//offset:0x2DD0D50;
	class UMaterialInterface* GetDecalMaterial()//offset:0x2DD0BB0;
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance()//offset:0xF6E360;
};


// Class Engine.DecalComponent
// size:0x0040 (0x0200 - 0x0240)
class UDecalComponent : public USceneComponent
{
public:
	int                                                SortOrder;                                                // 0x0200(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeScreenSize;                                           // 0x0204(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeStartDelay;                                           // 0x0208(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeDuration;                                             // 0x020C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeInDuration;                                           // 0x0210(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeInStartDelay;                                         // 0x0214(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDestroyOwnerAfterFade;                                   // 0x0218(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0219(0x0003) MISSED OFFSET
	struct FVector                                     DecalSize;                                                // 0x021C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0228(0x0018) MISSED OFFSET

	void SetSortOrder(int Value)//offset:0x2DD49B0;
	void SetFadeScreenSize(float NewFadeScreenSize)//offset:0x2DD4720;
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade)//offset:0x2DD4600;
	void SetFadeIn(float StartDelay, float Duaration)//offset:0x2DD4530;
	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial)//offset:0x2DD4280;
	float GetFadeStartDelay()//offset:0x2DD3DF0;
	float GetFadeInStartDelay()//offset:0x2DD3DC0;
	float GetFadeInDuration()//offset:0x2DD3D90;
	float GetFadeDuration()//offset:0x2DD3D60;
	class UMaterialInterface* GetDecalMaterial()//offset:0x2DD3D30;
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance()//offset:0x2DD3D00;
};


// Class Engine.DefaultPawn
// size:0x0028 (0x0280 - 0x02A8)
class ADefaultPawn : public APawn
{
public:
	float                                              BaseTurnRate;                                             // 0x0280(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              BaseLookUpRate;                                           // 0x0284(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	class UPawnMovementComponent*                      MovementComponent;                                        // 0x0288(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            CollisionComponent;                                       // 0x0290(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        MeshComponent;                                            // 0x0298(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bAddDefaultMovementBindings;                              // 0x02A0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02A1(0x0007) MISSED OFFSET

	void TurnAtRate(float Rate)//offset:0x2DD4A40;
	void MoveUp_World(float Val)//offset:0x2DD3FD0;
	void MoveRight(float Val)//offset:0x2DD3F40;
	void MoveForward(float Val)//offset:0x2DD3EB0;
	void LookUpAtRate(float Rate)//offset:0x2DD3E20;
};


// Class Engine.DefaultPhysicsVolume
// size:0x0000 (0x0268 - 0x0268)
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:
};


// Class Engine.DemoNetConnection
// size:0x0070 (0x1B58 - 0x1BC8)
class UDemoNetConnection : public UNetConnection
{
public:
};


// Class Engine.DemoNetDriver
// size:0x0B78 (0x0750 - 0x12C8)
class UDemoNetDriver : public UNetDriver
{
public:
	unsigned char                                      UnknownData00[0xF8];                                      // 0x0750(0x00F8) MISSED OFFSET
	TMap<class FString, struct FRollbackNetStartupActorInfo> RollbackNetStartupActors;                                 // 0x0848(0x0050) (Transient)
	unsigned char                                      UnknownData01[0x15C];                                     // 0x0898(0x015C) MISSED OFFSET
	float                                              CheckpointSaveMaxMSPerFrame;                              // 0x09F4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x20];                                      // 0x09F8(0x0020) MISSED OFFSET
	TArray<struct FMulticastRecordOptions>             MulticastRecordOptions;                                   // 0x0A18(0x0010) (ZeroConstructor, Config)
	bool                                               bIsLocalReplay;                                           // 0x0A28(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0A29(0x0007) MISSED OFFSET
	TArray<class APlayerController*>                   SpectatorControllers;                                     // 0x0A30(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x888];                                     // 0x0A40(0x0888) MISSED OFFSET
};


// Class Engine.PendingNetGame
// size:0x0098 (0x0028 - 0x00C0)
class UPendingNetGame : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class UNetDriver*                                  NetDriver;                                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	class UDemoNetDriver*                              DemoNetDriver;                                            // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x80];                                      // 0x0040(0x0080) MISSED OFFSET
};


// Class Engine.DemoPendingNetGame
// size:0x0000 (0x00C0 - 0x00C0)
class UDemoPendingNetGame : public UPendingNetGame
{
public:
};


// Class Engine.DestructibleInterface
// size:0x0000 (0x0028 - 0x0028)
class UDestructibleInterface : public UInterface
{
public:
};


// Class Engine.TextureLODSettings
// size:0x0010 (0x0028 - 0x0038)
class UTextureLODSettings : public UObject
{
public:
	TArray<struct FTextureLODGroup>                    TextureLODGroups;                                         // 0x0028(0x0010) (Edit, ZeroConstructor, Config)
};


// Class Engine.DeviceProfile
// size:0x0070 (0x0038 - 0x00A8)
class UDeviceProfile : public UTextureLODSettings
{
public:
	class FString                                      DeviceType;                                               // 0x0038(0x0010) (Edit, ZeroConstructor, Config, EditConst)
	class FString                                      BaseProfileName;                                          // 0x0048(0x0010) (Edit, ZeroConstructor, Config)
	class UObject*                                     Parent;                                                   // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0060(0x0028) MISSED OFFSET
	TArray<class FString>                              CVars;                                                    // 0x0088(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0098(0x0010) MISSED OFFSET
};


// Class Engine.DeviceProfileFragment
// size:0x0010 (0x0028 - 0x0038)
class UDeviceProfileFragment : public UObject
{
public:
};


// Class Engine.DeviceProfileManager
// size:0x0088 (0x0028 - 0x00B0)
class UDeviceProfileManager : public UObject
{
public:
	TArray<class UObject*>                             Profiles;                                                 // 0x0028(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x78];                                      // 0x0038(0x0078) MISSED OFFSET
};


// Class Engine.DialogueSoundWaveProxy
// size:0x0018 (0x01B8 - 0x01D0)
class UDialogueSoundWaveProxy : public USoundBase
{
public:
};


// Class Engine.DialogueVoice
// size:0x0018 (0x0028 - 0x0040)
class UDialogueVoice : public UObject
{
public:
	TEnumAsByte<EGrammaticalGender>                    Gender;                                                   // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EGrammaticalNumber>                    Plurality;                                                // 0x0029(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002A(0x0002) MISSED OFFSET
	struct FGuid                                       LocalizationGUID;                                         // 0x002C(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
};


// Class Engine.DialogueWave
// size:0x0048 (0x0028 - 0x0070)
class UDialogueWave : public UObject
{
public:
	unsigned char                                      bMature;                                                  // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOverride_SubtitleOverride;                               // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	class FString                                      SpokenText;                                               // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class FString                                      SubtitleOverride;                                         // 0x0040(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FDialogueContextMapping>             ContextMappings;                                          // 0x0050(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       LocalizationGUID;                                         // 0x0060(0x0010) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.Light
// size:0x0010 (0x0220 - 0x0230)
class ALight : public AActor
{
public:
	class ULightComponent*                             LightComponent;                                           // 0x0220(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      bEnabled;                                                 // 0x0228(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0229(0x0007) MISSED OFFSET

	void ToggleEnabled()//offset:0x2E6B2E0;
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale)//offset:0x2E6AB40;
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial)//offset:0x2E6AA20;
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance)//offset:0x2E6A920;
	void SetLightColor(const struct FLinearColor& NewLightColor)//offset:0x2E6A730;
	void SetEnabled(bool bSetEnabled)//offset:0x2E6A2E0;
	void SetCastShadows(bool bNewValue)//offset:0x2E69EC0;
	void SetBrightness(float NewBrightness)//offset:0x2E69D20;
	void SetAffectTranslucentLighting(bool bNewValue)//offset:0x2E69A00;
	void OnRep_bEnabled()//offset:0x2DE3C30;
	bool IsEnabled()//offset:0x2E69210;
	struct FLinearColor GetLightColor()//offset:0x2E69150;
	float GetBrightness()//offset:0x2E690C0;
};


// Class Engine.DirectionalLight
// size:0x0000 (0x0230 - 0x0230)
class ADirectionalLight : public ALight
{
public:
};


// Class Engine.LightComponentBase
// size:0x0030 (0x0200 - 0x0230)
class ULightComponentBase : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0200(0x0008) MISSED OFFSET
	float                                              Brightness;                                               // 0x0208(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              Intensity;                                                // 0x020C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      LightColor;                                               // 0x0210(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAffectsWorld;                                            // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CastShadows;                                              // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CastStaticShadows;                                        // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CastDynamicShadows;                                       // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectTranslucentLighting;                               // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bTransmission;                                            // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastVolumetricShadow;                                    // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastDeepShadow;                                          // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastRaytracedShadow;                                     // 0x0215(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectReflection;                                        // 0x0215(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectGlobalIllumination;                                // 0x0215(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0216(0x0002) MISSED OFFSET
	float                                              DeepShadowLayerDistribution;                              // 0x0218(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              IndirectLightingIntensity;                                // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VolumetricScatteringIntensity;                            // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SamplesPerPixel;                                          // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0228(0x0008) MISSED OFFSET

	void SetSamplesPerPixel(int NewValue)//offset:0x2E6AE20;
	void SetCastVolumetricShadow(bool bNewValue)//offset:0x2E69FE0;
	void SetCastShadows(bool bNewValue)//offset:0x2E69F50;
	void SetCastRaytracedShadow(bool bNewValue)//offset:0x2E69E30;
	void SetCastDeepShadow(bool bNewValue)//offset:0x2E69DA0;
	void SetAffectReflection(bool bNewValue)//offset:0x2E69970;
	void SetAffectGlobalIllumination(bool bNewValue)//offset:0x2E698E0;
	struct FLinearColor GetLightColor()//offset:0x2E69190;
};


// Class Engine.LightComponent
// size:0x0110 (0x0230 - 0x0340)
class ULightComponent : public ULightComponentBase
{
public:
	float                                              MaxDistanceFadeRange;                                     // 0x0230(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseTemperature;                                          // 0x0234(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0235(0x0003) MISSED OFFSET
	int                                                ShadowMapChannel;                                         // 0x0238(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x023C(0x0004) MISSED OFFSET
	float                                              MinRoughness;                                             // 0x0240(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              SpecularScale;                                            // 0x0244(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowResolutionScale;                                    // 0x0248(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowBias;                                               // 0x024C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowSlopeBias;                                          // 0x0250(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowSharpen;                                            // 0x0254(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ContactShadowLength;                                      // 0x0258(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      ContactShadowLengthInWS;                                  // 0x025C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      InverseSquaredFalloff;                                    // 0x025C(0x0001) (Deprecated)
	unsigned char                                      CastTranslucentShadows;                                   // 0x025C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastShadowsFromCinematicObjectsOnly;                     // 0x025C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectDynamicIndirectLighting;                           // 0x025C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForceCachedShadowsForMovablePrimitives;                  // 0x025C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                                       // 0x025D(0x0003) MISSED OFFSET
	struct FLightingChannels                           LightingChannels;                                         // 0x0260(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0261(0x0007) MISSED OFFSET
	class UMaterialInterface*                          LightFunctionMaterial;                                    // 0x0268(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          DefaultLightFunctionMaterial;                             // 0x0270(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FLinearColor                                DefaultLightColor;                                        // 0x0278(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LightFunctionScale;                                       // 0x0288(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0294(0x0004) MISSED OFFSET
	class UTextureLightProfile*                        IESTexture;                                               // 0x0298(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseIESBrightness;                                        // 0x02A0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData05[0x3];                                       // 0x02A1(0x0003) MISSED OFFSET
	float                                              IESBrightnessScale;                                       // 0x02A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LightFunctionFadeDistance;                                // 0x02A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DisabledBrightness;                                       // 0x02AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableLightShaftBloom;                                   // 0x02B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData06[0x3];                                       // 0x02B1(0x0003) MISSED OFFSET
	float                                              BloomScale;                                               // 0x02B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BloomThreshold;                                           // 0x02B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BloomMaxBrightness;                                       // 0x02BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      BloomTint;                                                // 0x02C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseRayTracedDistanceFieldShadows;                        // 0x02C4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x02C5(0x0003) MISSED OFFSET
	float                                              RayStartOffsetDepthScale;                                 // 0x02C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x74];                                      // 0x02CC(0x0074) MISSED OFFSET

	void SetVolumetricScatteringIntensity(float NewIntensity)//offset:0x2E6B260;
	void SetUseIESBrightness(bool bNewValue)//offset:0x2E6B1D0;
	void SetTransmission(bool bNewValue)//offset:0x2E6B140;
	void SetTemperature(float NewTemperature)//offset:0x2E6B0C0;
	void SetSpecularScale(float NewValue)//offset:0x2E6B040;
	void SetShadowSlopeBias(float NewValue)//offset:0x2E6AF30;
	void SetShadowBias(float NewValue)//offset:0x2E6AEB0;
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2)//offset:0x2E6AC60;
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale)//offset:0x2E6ABD0;
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial)//offset:0x2E6AAB0;
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance)//offset:0x2E6A9A0;
	void SetLightFunctionDisabledBrightness(float NewValue)//offset:0x2E6A8A0;
	void SetLightColor(const struct FLinearColor& NewLightColor, bool bSRGB)//offset:0x2E6A7C0;
	void SetIntensity(float NewIntensity)//offset:0x2E6A590;
	void SetIndirectLightingIntensity(float NewIntensity)//offset:0x2E6A510;
	void SetIESTexture(class UTextureLightProfile* NewValue)//offset:0x2E6A480;
	void SetIESBrightnessScale(float NewValue)//offset:0x2E6A400;
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue)//offset:0x2E6A370;
	void SetEnableLightShaftBloom(bool bNewValue)//offset:0x2E6A250;
	void SetBloomTint(const struct FColor& NewValue)//offset:0x2E69CA0;
	void SetBloomThreshold(float NewValue)//offset:0x2E69C20;
	void SetBloomScale(float NewValue)//offset:0x2E69BA0;
	void SetBloomMaxBrightness(float NewValue)//offset:0x2E69B20;
	void SetAffectTranslucentLighting(bool bNewValue)//offset:0x2E69A90;
	void SetAffectDynamicIndirectLighting(bool bNewValue)//offset:0x2E69850;
};


// Class Engine.DirectionalLightComponent
// size:0x00C0 (0x0340 - 0x0400)
class UDirectionalLightComponent : public ULightComponent
{
public:
	float                                              ShadowCascadeBiasDistribution;                            // 0x0340(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableLightShaftOcclusion;                               // 0x0344(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0345(0x0003) MISSED OFFSET
	float                                              OcclusionMaskDarkness;                                    // 0x0348(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OcclusionDepthRange;                                      // 0x034C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LightShaftOverrideDirection;                              // 0x0350(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WholeSceneDynamicShadowRadius;                            // 0x035C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DynamicShadowDistanceMovableLight;                        // 0x0360(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DynamicShadowDistanceStationaryLight;                     // 0x0364(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                DynamicShadowCascades;                                    // 0x0368(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CascadeDistributionExponent;                              // 0x036C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CascadeTransitionFraction;                                // 0x0370(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowDistanceFadeoutFraction;                            // 0x0374(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseInsetShadowsForMovableObjects;                        // 0x0378(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0379(0x0003) MISSED OFFSET
	int                                                FarShadowCascadeCount;                                    // 0x037C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FarShadowDistance;                                        // 0x0380(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFieldShadowDistance;                              // 0x0384(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LightSourceAngle;                                         // 0x0388(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LightSourceSoftAngle;                                     // 0x038C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowSourceAngleFactor;                                  // 0x0390(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TraceDistance;                                            // 0x0394(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUsedAsAtmosphereSunLight;                                // 0x0398(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0399(0x0003) MISSED OFFSET
	int                                                AtmosphereSunLightIndex;                                  // 0x039C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                AtmosphereSunDiskColorScale;                              // 0x03A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPerPixelAtmosphereTransmittance;                         // 0x03B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastShadowsOnClouds;                                     // 0x03B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastShadowsOnAtmosphere;                                 // 0x03B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastCloudShadows;                                        // 0x03B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0x3];                                       // 0x03B1(0x0003) MISSED OFFSET
	float                                              CloudShadowStrength;                                      // 0x03B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudShadowOnAtmosphereStrength;                          // 0x03B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudShadowOnSurfaceStrength;                             // 0x03BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudShadowDepthBias;                                     // 0x03C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudShadowExtent;                                        // 0x03C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudShadowMapResolutionScale;                            // 0x03C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudShadowRaySampleCountScale;                           // 0x03CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                CloudScatteredLuminanceScale;                             // 0x03D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLightmassDirectionalLightSettings          LightmassSettings;                                        // 0x03E0(0x0010) (Edit)
	unsigned char                                      bCastModulatedShadows;                                    // 0x03F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData04[0x3];                                       // 0x03F1(0x0003) MISSED OFFSET
	struct FColor                                      ModulatedShadowColor;                                     // 0x03F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowAmount;                                             // 0x03F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET

	void SetShadowDistanceFadeoutFraction(float NewValue)//offset:0x2DD4930;
	void SetShadowAmount(float NewValue)//offset:0x2DD48B0;
	void SetOcclusionMaskDarkness(float NewValue)//offset:0x2DD4830;
	void SetLightShaftOverrideDirection(const struct FVector& NewValue)//offset:0x2DD47A0;
	void SetEnableLightShaftOcclusion(bool bNewValue)//offset:0x2DD44A0;
	void SetDynamicShadowDistanceStationaryLight(float NewValue)//offset:0x2DD4420;
	void SetDynamicShadowDistanceMovableLight(float NewValue)//offset:0x2DD43A0;
	void SetDynamicShadowCascades(int NewValue)//offset:0x2DD4310;
	void SetCascadeTransitionFraction(float NewValue)//offset:0x2DD4200;
	void SetCascadeDistributionExponent(float NewValue)//offset:0x2DD4180;
	void SetAtmosphereSunLightIndex(int NewValue)//offset:0x2DD40F0;
	void SetAtmosphereSunLight(bool bNewValue)//offset:0x2DD4060;
};


// Class Engine.Distribution
// size:0x0008 (0x0028 - 0x0030)
class UDistribution : public UObject
{
public:
};


// Class Engine.DistributionFloat
// size:0x0008 (0x0030 - 0x0038)
class UDistributionFloat : public UDistribution
{
public:
	unsigned char                                      bCanBeBaked;                                              // 0x0030(0x0001) (Edit)
	unsigned char                                      bBakedDataSuccesfully;                                    // 0x0030(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
};


// Class Engine.DistributionFloatConstant
// size:0x0008 (0x0038 - 0x0040)
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                                 // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
};


// Class Engine.DistributionFloatConstantCurve
// size:0x0018 (0x0038 - 0x0050)
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                            // 0x0038(0x0018) (Edit, ZeroConstructor)
};


// Class Engine.DistributionFloatParameterBase
// size:0x0020 (0x0040 - 0x0060)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	struct FName                                       ParameterName;                                            // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinInput;                                                 // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxInput;                                                 // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinOutput;                                                // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxOutput;                                                // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDistributionParamMode>                ParamMode;                                                // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
};


// Class Engine.DistributionFloatParticleParameter
// size:0x0000 (0x0060 - 0x0060)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:
};


// Class Engine.DistributionFloatUniform
// size:0x0008 (0x0038 - 0x0040)
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Min;                                                      // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Max;                                                      // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.DistributionFloatUniformCurve
// size:0x0018 (0x0038 - 0x0050)
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                            // 0x0038(0x0018) (Edit, ZeroConstructor)
};


// Class Engine.DistributionVector
// size:0x0008 (0x0030 - 0x0038)
class UDistributionVector : public UDistribution
{
public:
	unsigned char                                      bCanBeBaked;                                              // 0x0030(0x0001) (Edit)
	unsigned char                                      bIsDirty;                                                 // 0x0030(0x0001)
	unsigned char                                      bBakedDataSuccesfully;                                    // 0x0030(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
};


// Class Engine.DistributionVectorConstant
// size:0x0018 (0x0038 - 0x0050)
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                                     Constant;                                                 // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLockAxes;                                                // 0x0044(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x0048(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
};


// Class Engine.DistributionVectorConstantCurve
// size:0x0020 (0x0038 - 0x0058)
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                            // 0x0038(0x0018) (Edit, ZeroConstructor)
	unsigned char                                      bLockAxes;                                                // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
};


// Class Engine.DistributionVectorParameterBase
// size:0x0040 (0x0050 - 0x0090)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	struct FName                                       ParameterName;                                            // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MinInput;                                                 // 0x0058(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MaxInput;                                                 // 0x0064(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MinOutput;                                                // 0x0070(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MaxOutput;                                                // 0x007C(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDistributionParamMode>                ParamModes[0x3];                                          // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x008B(0x0005) MISSED OFFSET
};


// Class Engine.DistributionVectorParticleParameter
// size:0x0000 (0x0090 - 0x0090)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:
};


// Class Engine.DistributionVectorUniform
// size:0x0028 (0x0038 - 0x0060)
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                                     Max;                                                      // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     Min;                                                      // 0x0044(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLockAxes;                                                // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[0x3];                                         // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseExtremes;                                             // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
};


// Class Engine.DistributionVectorUniformCurve
// size:0x0028 (0x0038 - 0x0060)
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                            // 0x0038(0x0018) (Edit, ZeroConstructor)
	unsigned char                                      bLockAxes1;                                               // 0x0050(0x0001)
	unsigned char                                      bLockAxes2;                                               // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes[0x2];                                          // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[0x3];                                         // 0x0056(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	unsigned char                                      bUseExtremes;                                             // 0x005C(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
};


// Class Engine.DocumentationActor
// size:0x0008 (0x0220 - 0x0228)
class ADocumentationActor : public AActor
{
public:
};


// Class Engine.DPICustomScalingRule
// size:0x0000 (0x0028 - 0x0028)
class UDPICustomScalingRule : public UObject
{
public:
};


// Class Engine.DrawFrustumComponent
// size:0x0020 (0x0450 - 0x0470)
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      FrustumColor;                                             // 0x0450(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FrustumAngle;                                             // 0x0454(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FrustumAspectRatio;                                       // 0x0458(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FrustumStartDist;                                         // 0x045C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FrustumEndDist;                                           // 0x0460(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0464(0x0004) MISSED OFFSET
	class UTexture*                                    Texture;                                                  // 0x0468(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};


// Class Engine.SphereComponent
// size:0x0000 (0x0470 - 0x0470)
class USphereComponent : public UShapeComponent
{
public:

	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps)//offset:0x2EEA070;
	float GetUnscaledSphereRadius()//offset:0x2DC0590;
	float GetShapeScale()//offset:0x2EE81D0;
	float GetScaledSphereRadius()//offset:0x2EE8180;
};


// Class Engine.DrawSphereComponent
// size:0x0000 (0x0470 - 0x0470)
class UDrawSphereComponent : public USphereComponent
{
public:
};


// Class Engine.EdGraph
// size:0x0038 (0x0028 - 0x0060)
class UEdGraph : public UObject
{
public:
	class UEdGraphSchema*                              Schema;                                                   // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UEdGraphNode*>                        Nodes;                                                    // 0x0030(0x0010) (ZeroConstructor)
	unsigned char                                      bEditable;                                                // 0x0040(0x0001)
	unsigned char                                      bAllowDeletion;                                           // 0x0040(0x0001)
	unsigned char                                      bAllowRenaming;                                           // 0x0040(0x0001)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0041(0x001F) MISSED OFFSET
};


// Class Engine.GraphNodeContextMenuContext
// size:0x0028 (0x0028 - 0x0050)
class UGraphNodeContextMenuContext : public UObject
{
public:
	class UBlueprint*                                  Blueprint;                                                // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEdGraph*                                    Graph;                                                    // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEdGraphNode*                                Node;                                                     // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET
	bool                                               bIsDebugging;                                             // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
};


// Class Engine.EdGraphNode
// size:0x0070 (0x0028 - 0x0098)
class UEdGraphNode : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TArray<class UEdGraphPin_Deprecated*>              DeprecatedPins;                                           // 0x0038(0x0010) (ZeroConstructor)
	int                                                NodePosX;                                                 // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NodePosY;                                                 // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NodeWidth;                                                // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NodeHeight;                                               // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ENodeAdvancedPins>                     AdvancedPinDisplay;                                       // 0x0058(0x0001) (ZeroConstructor, IsPlainOldData)
	ENodeEnabledState                                  EnabledState;                                             // 0x0059(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x005A(0x0001) MISSED OFFSET
	unsigned char                                      bDisplayAsDisabled;                                       // 0x005B(0x0001)
	unsigned char                                      bUserSetEnabledState;                                     // 0x005B(0x0001)
	unsigned char                                      bIsNodeEnabled;                                           // 0x005B(0x0001) (Deprecated)
	unsigned char                                      bHasCompilerMessage;                                      // 0x005B(0x0001)
	unsigned char                                      UnknownData02[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	class FString                                      NodeComment;                                              // 0x0060(0x0010) (ZeroConstructor)
	int                                                ErrorType;                                                // 0x0070(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	class FString                                      ErrorMsg;                                                 // 0x0078(0x0010) (ZeroConstructor)
	struct FGuid                                       NodeGuid;                                                 // 0x0088(0x0010) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.EdGraphNode_Documentation
// size:0x0020 (0x0098 - 0x00B8)
class UEdGraphNode_Documentation : public UEdGraphNode
{
public:
	class FString                                      Link;                                                     // 0x0098(0x0010) (ZeroConstructor)
	class FString                                      Excerpt;                                                  // 0x00A8(0x0010) (ZeroConstructor)
};


// Class Engine.EdGraphPin_Deprecated
// size:0x00F0 (0x0028 - 0x0118)
class UEdGraphPin_Deprecated : public UObject
{
public:
	class FString                                      PinName;                                                  // 0x0028(0x0010) (ZeroConstructor)
	class FString                                      PinToolTip;                                               // 0x0038(0x0010) (ZeroConstructor)
	TEnumAsByte<EEdGraphPinDirection>                  Direction;                                                // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	struct FEdGraphPinType                             PinType;                                                  // 0x0050(0x0058)
	class FString                                      DefaultValue;                                             // 0x00A8(0x0010) (ZeroConstructor)
	class FString                                      AutogeneratedDefaultValue;                                // 0x00B8(0x0010) (ZeroConstructor)
	class UObject*                                     DefaultObject;                                            // 0x00C8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FText                                       DefaultTextValue;                                         // 0x00D0(0x0028)
	TArray<class UEdGraphPin_Deprecated*>              LinkedTo;                                                 // 0x00E8(0x0010) (ZeroConstructor)
	TArray<class UEdGraphPin_Deprecated*>              SubPins;                                                  // 0x00F8(0x0010) (ZeroConstructor)
	class UEdGraphPin_Deprecated*                      ParentPin;                                                // 0x0108(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEdGraphPin_Deprecated*                      ReferencePassThroughConnection;                           // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.EdGraphSchema
// size:0x0000 (0x0028 - 0x0028)
class UEdGraphSchema : public UObject
{
public:
};


// Class Engine.Emitter
// size:0x0050 (0x0220 - 0x0270)
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                                  // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bDestroyOnSystemFinish;                                   // 0x0228(0x0001)
	unsigned char                                      bPostUpdateTickGroup;                                     // 0x0228(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCurrentlyActive;                                         // 0x0228(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0229(0x0007) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnParticleSpawn;                                          // 0x0230(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnParticleBurst;                                          // 0x0240(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnParticleDeath;                                          // 0x0250(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnParticleCollide;                                        // 0x0260(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	void ToggleActive()//offset:0x2DD8070;
	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)//offset:0x2DD7F90;
	void SetTemplate(class UParticleSystem* NewTemplate)//offset:0xF456E0;
	void SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param)//offset:0x2DD7EC0;
	void SetFloatParameter(const struct FName& ParameterName, float Param)//offset:0x2DD7DF0;
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param)//offset:0x2DD7D20;
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param)//offset:0x2DD7C50;
	void OnRep_bCurrentlyActive()//offset:0xF45DD0;
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent)//offset:0x2DD7BC0;
	bool IsActive()//offset:0x2DD7B90;
	void Deactivate()//offset:0x2DD7B70;
	void Activate()//offset:0x2DD7B50;
};


// Class Engine.EmitterCameraLensEffectBase
// size:0x0070 (0x0270 - 0x02E0)
class AEmitterCameraLensEffectBase : public AEmitter
{
public:
	class UParticleSystem*                             PS_CameraEffect;                                          // 0x0270(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             PS_CameraEffectNonExtremeContent;                         // 0x0278(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	class APlayerCameraManager*                        BaseCamera;                                               // 0x0280(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0288(0x0008) MISSED OFFSET
	struct FTransform                                  RelativeTransform;                                        // 0x0290(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              BaseFOV;                                                  // 0x02C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bAllowMultipleInstances;                                  // 0x02C4(0x0001) (Edit)
	unsigned char                                      bResetWhenRetriggered;                                    // 0x02C4(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x02C5(0x0003) MISSED OFFSET
	TArray<class AEmitterCameraLensEffectBase*>        EmittersToTreatAsSame;                                    // 0x02C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              DistFromCamera;                                           // 0x02D8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x02DC(0x0004) MISSED OFFSET
};


// Class Engine.ViewModeUtils
// size:0x0000 (0x0028 - 0x0028)
class UViewModeUtils : public UObject
{
public:
};


// Class Engine.EngineBaseTypes
// size:0x0000 (0x0028 - 0x0028)
class UEngineBaseTypes : public UObject
{
public:
};


// Class Engine.EngineHandlerComponentFactory
// size:0x0000 (0x0028 - 0x0028)
class UEngineHandlerComponentFactory : public UHandlerComponentFactory
{
public:
};


// Class Engine.LocalMessage
// size:0x0000 (0x0028 - 0x0028)
class ULocalMessage : public UObject
{
public:
};


// Class Engine.EngineMessage
// size:0x0080 (0x0028 - 0x00A8)
class UEngineMessage : public ULocalMessage
{
public:
	class FString                                      FailedPlaceMessage;                                       // 0x0028(0x0010) (ZeroConstructor)
	class FString                                      MaxedOutMessage;                                          // 0x0038(0x0010) (ZeroConstructor)
	class FString                                      EnteredMessage;                                           // 0x0048(0x0010) (ZeroConstructor)
	class FString                                      LeftMessage;                                              // 0x0058(0x0010) (ZeroConstructor)
	class FString                                      GlobalNameChange;                                         // 0x0068(0x0010) (ZeroConstructor)
	class FString                                      SpecEnteredMessage;                                       // 0x0078(0x0010) (ZeroConstructor)
	class FString                                      NewPlayerMessage;                                         // 0x0088(0x0010) (ZeroConstructor)
	class FString                                      NewSpecMessage;                                           // 0x0098(0x0010) (ZeroConstructor)
};


// Class Engine.EngineTypes
// size:0x0000 (0x0028 - 0x0028)
class UEngineTypes : public UObject
{
public:
};


// Class Engine.ExponentialHeightFog
// size:0x0010 (0x0220 - 0x0230)
class AExponentialHeightFog : public AInfo
{
public:
	class UExponentialHeightFogComponent*              Component;                                                // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bEnabled;                                                 // 0x0228(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0229(0x0007) MISSED OFFSET

	void OnRep_bEnabled()//offset:0x2DE3C30;
};


// Class Engine.ExponentialHeightFogComponent
// size:0x00A0 (0x0200 - 0x02A0)
class UExponentialHeightFogComponent : public USceneComponent
{
public:
	struct FExponentialHeightFogData                   SecondFogData;                                            // 0x0200(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FLinearColor                                FogInscatteringColor;                                     // 0x020C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x021C(0x0004) MISSED OFFSET
	class UTextureCube*                                InscatteringColorCubemap;                                 // 0x0220(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              InscatteringColorCubemapAngle;                            // 0x0228(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                InscatteringTextureTint;                                  // 0x022C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FullyDirectionalInscatteringColorDistance;                // 0x023C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              NonDirectionalInscatteringColorDistance;                  // 0x0240(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DirectionalInscatteringExponent;                          // 0x0244(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DirectionalInscatteringStartDistance;                     // 0x0248(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                DirectionalInscatteringColor;                             // 0x024C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FogMaxOpacity;                                            // 0x025C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StartDistance;                                            // 0x0260(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FogCutoffDistance;                                        // 0x0264(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableVolumetricFog;                                     // 0x0268(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0269(0x0003) MISSED OFFSET
	float                                              VolumetricFogScatteringDistribution;                      // 0x026C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      VolumetricFogAlbedo;                                      // 0x0270(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                VolumetricFogEmissive;                                    // 0x0274(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VolumetricFogExtinctionScale;                             // 0x0284(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VolumetricFogDistance;                                    // 0x0288(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VolumetricFogStaticLightingScatteringIntensity;           // 0x028C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideLightColorsWithFogInscatteringColors;            // 0x0290(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xF];                                       // 0x0291(0x000F) MISSED OFFSET

	void SetVolumetricFogScatteringDistribution(float NewValue)//offset:0x2DE46F0;
	void SetVolumetricFogExtinctionScale(float NewValue)//offset:0x2DE4670;
	void SetVolumetricFogEmissive(const struct FLinearColor& NewValue)//offset:0x2DE45E0;
	void SetVolumetricFogDistance(float NewValue)//offset:0x2DE4560;
	void SetVolumetricFogAlbedo(const struct FColor& NewValue)//offset:0x2DE44E0;
	void SetVolumetricFog(bool bNewValue)//offset:0x2DE4450;
	void SetStartDistance(float Value)//offset:0x2DE43D0;
	void SetNonDirectionalInscatteringColorDistance(float Value)//offset:0x2DE4350;
	void SetInscatteringTextureTint(const struct FLinearColor& Value)//offset:0x2DE4240;
	void SetInscatteringColorCubemapAngle(float Value)//offset:0x2DE41C0;
	void SetInscatteringColorCubemap(class UTextureCube* Value)//offset:0x2DE4130;
	void SetFullyDirectionalInscatteringColorDistance(float Value)//offset:0x2DE40B0;
	void SetFogMaxOpacity(float Value)//offset:0x2DE3FA0;
	void SetFogInscatteringColor(const struct FLinearColor& Value)//offset:0x2DE3F10;
	void SetFogHeightFalloff(float Value)//offset:0x2DA5060;
	void SetFogDensity(float Value)//offset:0x2DA5870;
	void SetFogCutoffDistance(float Value)//offset:0x2DE3E90;
	void SetDirectionalInscatteringStartDistance(float Value)//offset:0x2DE3E10;
	void SetDirectionalInscatteringExponent(float Value)//offset:0x2DE3D90;
	void SetDirectionalInscatteringColor(const struct FLinearColor& Value)//offset:0x2DE3D00;
};


// Class Engine.Exporter
// size:0x0050 (0x0028 - 0x0078)
class UExporter : public UObject
{
public:
	class UObject*                                     SupportedClass;                                           // 0x0028(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UObject*                                     ExportRootScope;                                          // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class FString>                              FormatExtension;                                          // 0x0038(0x0010) (BlueprintVisible, ZeroConstructor)
	TArray<class FString>                              FormatDescription;                                        // 0x0048(0x0010) (BlueprintVisible, ZeroConstructor)
	int                                                PreferredFormatIndex;                                     // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                TextIndent;                                               // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bText;                                                    // 0x0060(0x0001) (BlueprintVisible)
	unsigned char                                      bSelectedOnly;                                            // 0x0060(0x0001)
	unsigned char                                      bForceFileOperations;                                     // 0x0060(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
	class UAssetExportTask*                            ExportTask;                                               // 0x0068(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0070(0x0008) MISSED OFFSET

	bool ScriptRunAssetExportTask(class UAssetExportTask* Task)//offset:0x13CEB30;
	static bool RunAssetExportTasks(TArray<class UAssetExportTask*> ExportTasks)//offset:0x2DE3C50;
	static bool RunAssetExportTask(class UAssetExportTask* Task)//offset:0xF34280;
};


// Class Engine.FloatingPawnMovement
// size:0x0018 (0x0138 - 0x0150)
class UFloatingPawnMovement : public UPawnMovementComponent
{
public:
	float                                              MaxSpeed;                                                 // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Acceleration;                                             // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Deceleration;                                             // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurningBoost;                                             // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPositionCorrected;                                       // 0x0148(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0149(0x0007) MISSED OFFSET
};


// Class Engine.Font
// size:0x01A8 (0x0028 - 0x01D0)
class UFont : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	EFontCacheType                                     FontCacheType;                                            // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<struct FFontCharacter>                      Characters;                                               // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<class UTexture2D*>                          Textures;                                                 // 0x0048(0x0010) (ZeroConstructor)
	int                                                IsRemapped;                                               // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              EmScale;                                                  // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Ascent;                                                   // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Descent;                                                  // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Leading;                                                  // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Kerning;                                                  // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FFontImportOptionsData                      ImportOptions;                                            // 0x0070(0x00B0) (Edit)
	int                                                NumCharacters;                                            // 0x0120(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	TArray<int>                                        MaxCharHeight;                                            // 0x0128(0x0010) (ZeroConstructor, Transient)
	float                                              ScalingFactor;                                            // 0x0138(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                LegacyFontSize;                                           // 0x013C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       LegacyFontName;                                           // 0x0140(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FCompositeFont                              CompositeFont;                                            // 0x0148(0x0038)
	unsigned char                                      UnknownData03[0x50];                                      // 0x0180(0x0050) MISSED OFFSET
};


// Class Engine.FontFace
// size:0x0030 (0x0028 - 0x0058)
class UFontFace : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class FString                                      SourceFilename;                                           // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	EFontHinting                                       Hinting;                                                  // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EFontLoadingPolicy                                 LoadingPolicy;                                            // 0x0041(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EFontLayoutMethod                                  LayoutMethod;                                             // 0x0042(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x15];                                      // 0x0043(0x0015) MISSED OFFSET
};


// Class Engine.FontImportOptions
// size:0x00B0 (0x0028 - 0x00D8)
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      Data;                                                     // 0x0028(0x00B0) (Edit)
};


// Class Engine.ForceFeedbackAttenuation
// size:0x00B0 (0x0028 - 0x00D8)
class UForceFeedbackAttenuation : public UObject
{
public:
	struct FForceFeedbackAttenuationSettings           Attenuation;                                              // 0x0028(0x00B0) (Edit, BlueprintVisible, BlueprintReadOnly)
};


// Class Engine.ForceFeedbackComponent
// size:0x00E0 (0x0200 - 0x02E0)
class UForceFeedbackComponent : public USceneComponent
{
public:
	unsigned char                                      bAutoDestroy;                                             // 0x0200(0x0001)
	unsigned char                                      bStopWhenOwnerDestroyed;                                  // 0x0200(0x0001)
	unsigned char                                      bLooping;                                                 // 0x0200(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreTimeDilation;                                      // 0x0200(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideAttenuation;                                     // 0x0200(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0201(0x0003) MISSED OFFSET
	float                                              IntensityMultiplier;                                      // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UForceFeedbackAttenuation*                   AttenuationSettings;                                      // 0x0208(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FForceFeedbackAttenuationSettings           AttenuationOverrides;                                     // 0x0210(0x00B0) (Edit, BlueprintVisible)
	struct UEMulticastInlineDelegate                   OnForceFeedbackFinished;                                  // 0x02C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x10];                                      // 0x02D0(0x0010) MISSED OFFSET

	void Stop()//offset:0x2DE4770;
	void SetIntensityMultiplier(float NewIntensityMultiplier)//offset:0x2DE42D0;
	void SetForceFeedbackEffect(class UForceFeedbackEffect* NewForceFeedbackEffect)//offset:0x2DE4020;
	void Play(float StartTime)//offset:0x251A370;
	bool BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings* OutAttenuationSettings)//offset:0x2DE39E0;
	void AdjustAttenuation(const struct FForceFeedbackAttenuationSettings& InAttenuationSettings)//offset:0x2DE38B0;
};


// Class Engine.ForceFeedbackEffect
// size:0x0018 (0x0028 - 0x0040)
class UForceFeedbackEffect : public UObject
{
public:
	TArray<struct FForceFeedbackChannelDetails>        ChannelDetails;                                           // 0x0028(0x0010) (Edit, ZeroConstructor)
	float                                              Duration;                                                 // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
};


// Class Engine.GameEngine
// size:0x0050 (0x0DE0 - 0x0E30)
class UGameEngine : public UEngine
{
public:
	float                                              MaxDeltaTime;                                             // 0x0DE0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ServerFlushLogInterval;                                   // 0x0DE4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	class UGameInstance*                               GameInstance;                                             // 0x0DE8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x40];                                      // 0x0DF0(0x0040) MISSED OFFSET
};


// Class Engine.GameNetworkManager
// size:0x00B0 (0x0220 - 0x02D0)
class AGameNetworkManager : public AInfo
{
public:
	float                                              BadPacketLossThreshold;                                   // 0x0220(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              SeverePacketLossThreshold;                                // 0x0224(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                BadPingThreshold;                                         // 0x0228(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                SeverePingThreshold;                                      // 0x022C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                AdjustedNetSpeed;                                         // 0x0230(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastNetSpeedUpdateTime;                                   // 0x0234(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                TotalNetBandwidth;                                        // 0x0238(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MinDynamicBandwidth;                                      // 0x023C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MaxDynamicBandwidth;                                      // 0x0240(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      bIsStandbyCheckingEnabled;                                // 0x0244(0x0001) (Config)
	unsigned char                                      bHasStandbyCheatTriggered;                                // 0x0244(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0245(0x0003) MISSED OFFSET
	float                                              StandbyRxCheatTime;                                       // 0x0248(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              StandbyTxCheatTime;                                       // 0x024C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PercentMissingForRxStandby;                               // 0x0250(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PercentMissingForTxStandby;                               // 0x0254(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PercentForBadPing;                                        // 0x0258(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              JoinInProgressStandbyWaitTime;                            // 0x025C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MoveRepSize;                                              // 0x0260(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MAXPOSITIONERRORSQUARED;                                  // 0x0264(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MAXNEARZEROVELOCITYSQUARED;                               // 0x0268(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              CLIENTADJUSTUPDATECOST;                                   // 0x026C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MAXCLIENTUPDATEINTERVAL;                                  // 0x0270(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxClientForcedUpdateDuration;                            // 0x0274(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ServerForcedUpdateHitchThreshold;                         // 0x0278(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ServerForcedUpdateHitchCooldown;                          // 0x027C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxMoveDeltaTime;                                         // 0x0280(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxClientSmoothingDeltaTime;                              // 0x0284(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ClientNetSendMoveDeltaTime;                               // 0x0288(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ClientNetSendMoveDeltaTimeThrottled;                      // 0x028C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ClientNetSendMoveDeltaTimeStationary;                     // 0x0290(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                ClientNetSendMoveThrottleAtNetSpeed;                      // 0x0294(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                ClientNetSendMoveThrottleOverPlayerCount;                 // 0x0298(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               ClientAuthorativePosition;                                // 0x029C(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x029D(0x0003) MISSED OFFSET
	float                                              ClientErrorUpdateRateLimit;                               // 0x02A0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ClientNetCamUpdateDeltaTime;                              // 0x02A4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ClientNetCamUpdatePositionLimit;                          // 0x02A8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bMovementTimeDiscrepancyDetection;                        // 0x02AC(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bMovementTimeDiscrepancyResolution;                       // 0x02AD(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x02AE(0x0002) MISSED OFFSET
	float                                              MovementTimeDiscrepancyMaxTimeMargin;                     // 0x02B0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MovementTimeDiscrepancyMinTimeMargin;                     // 0x02B4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MovementTimeDiscrepancyResolutionRate;                    // 0x02B8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MovementTimeDiscrepancyDriftAllowance;                    // 0x02BC(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x02C0(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bUseDistanceBasedRelevancy;                               // 0x02C1(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData03[0xE];                                       // 0x02C2(0x000E) MISSED OFFSET
};


// Class Engine.GameplayStatics
// size:0x0000 (0x0028 - 0x0028)
class UGameplayStatics : public UBlueprintFunctionLibrary
{
public:

	static void UnloadStreamLevelBySoftObjectPtr(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, bool bShouldBlockOnUnload)//offset:0x2DF39C0;
	static void UnloadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, const struct FLatentActionInfo& LatentInfo, bool bShouldBlockOnUnload)//offset:0x2DF3850;
	static bool SuggestProjectileVelocity_CustomArc(class UObject* WorldContextObject, struct FVector* OutLaunchVelocity, const struct FVector& StartPos, const struct FVector& EndPos, float OverrideGravityZ, float ArcParam)//offset:0x2DF3660;
	static class UAudioComponent* SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy)//offset:0x2DF3270;
	static class UAudioComponent* SpawnSoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy)//offset:0x2DF2F60;
	static class UAudioComponent* SpawnSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy)//offset:0x2DF2D00;
	static class UObject* SpawnObject(class UObject* ObjectClass, class UObject* Outer)//offset:0x2DF2C30;
	static class UForceFeedbackComponent* SpawnForceFeedbackAttached(class UForceFeedbackEffect* ForceFeedbackEffect, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy)//offset:0x2DF2890;
	static class UForceFeedbackComponent* SpawnForceFeedbackAtLocation(class UObject* WorldContextObject, class UForceFeedbackEffect* ForceFeedbackEffect, const struct FVector& Location, const struct FRotator& Rotation, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy)//offset:0x2DF25D0;
	static class UParticleSystemComponent* SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate)//offset:0x2DF22C0;
	static class UParticleSystemComponent* SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem)//offset:0x2DF2040;
	static class UAudioComponent* SpawnDialogueAttached(class UDialogueWave* Dialogue, const struct FDialogueContext& Context, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy)//offset:0x2DF1C40;
	static class UAudioComponent* SpawnDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy)//offset:0x2DF1920;
	static class UAudioComponent* SpawnDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy)//offset:0x2DF16F0;
	static class UDecalComponent* SpawnDecalAttached(class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, float LifeSpan)//offset:0x2DF1270;
	static class UDecalComponent* SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan)//offset:0x2DF1070;
	static void SetWorldOriginLocation(class UObject* WorldContextObject, const struct FIntVector& NewLocation)//offset:0x2DF0F00;
	static void SetViewportMouseCaptureMode(class UObject* WorldContextObject, EMouseCaptureMode MouseCaptureMode)//offset:0x2DF0E40;
	static void SetSubtitlesEnabled(bool bEnabled)//offset:0x2DF0DC0;
	static void SetSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren)//offset:0x2DF0BA0;
	static void SetSoundClassDistanceScale(class UObject* WorldContextObject, class USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec)//offset:0x2DF0A50;
	static void SetPlayerControllerID(class APlayerController* Player, int ControllerId)//offset:0x2DF0990;
	static void SetMaxAudioChannelsScaled(class UObject* WorldContextObject, float MaxChannelCountScale)//offset:0x2DF08D0;
	static void SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation)//offset:0x2DF0810;
	static void SetGlobalPitchModulation(class UObject* WorldContextObject, float PitchModulation, float TimeSec)//offset:0x2DF0710;
	static void SetGlobalListenerFocusParameters(class UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale)//offset:0x2DF0470;
	static bool SetGamePaused(class UObject* WorldContextObject, bool bPaused)//offset:0x2DF03A0;
	static void SetForceDisableSplitscreen(class UObject* WorldContextObject, bool bDisable)//offset:0x2DF02E0;
	static void SetEnableWorldRendering(class UObject* WorldContextObject, bool bEnable)//offset:0x2DF0220;
	static void SetBaseSoundMix(class UObject* WorldContextObject, class USoundMix* InSoundMix)//offset:0x2DF0160;
	static bool SaveGameToSlot(class USaveGame* SaveGameObject, const class FString& SlotName, int UserIndex)//offset:0x2DEFF10;
	static void RemovePlayer(class APlayerController* Player, bool bDestroyPawn)//offset:0x2DEFC20;
	static struct FVector RebaseZeroOriginOntoLocal(class UObject* WorldContextObject, const struct FVector& WorldLocation)//offset:0x2DEFB30;
	static struct FVector RebaseLocalOriginOntoZero(class UObject* WorldContextObject, const struct FVector& WorldLocation)//offset:0x2DEFA40;
	static void PushSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier)//offset:0x2DEF920;
	static bool ProjectWorldToScreen(class APlayerController* Player, const struct FVector& WorldPosition, struct FVector2D* ScreenPosition, bool bPlayerViewportRelative)//offset:0x2DEF7C0;
	static void PrimeSound(class USoundBase* InSound)//offset:0x2DEF740;
	static void PopSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier)//offset:0x2DEF680;
	static void PlayWorldCameraShake(class UObject* WorldContextObject, class UCameraShakeBase* Shake, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter)//offset:0x2DEF3B0;
	static void PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor)//offset:0x2DEF0A0;
	static void PlaySound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor, bool bIsUISound)//offset:0x2DEEE40;
	static void PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings)//offset:0x2DEEB60;
	static void PlayDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime)//offset:0x2DEE970;
	static class FString ParseOption(const class FString& Options, const class FString& Key)//offset:0x2DEE7F0;
	static void OpenLevelBySoftObjectPtr(class UObject* WorldContextObject, bool bAbsolute, const class FString& Options)//offset:0x2DEE5D0;
	static void OpenLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bAbsolute, const class FString& Options)//offset:0x2DEE430;
	static struct FHitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, const struct FVector& Location, const struct FVector& ImpactPoint, const struct FVector& Normal, const struct FVector& ImpactNormal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, const struct FName& HitBoneName, int HitItem, int FaceIndex, const struct FVector& TraceStart, const struct FVector& TraceEnd)//offset:0x2DEDE20;
	static void LoadStreamLevelBySoftObjectPtr(class UObject* WorldContextObject, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo)//offset:0x2DEDBE0;
	static void LoadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo)//offset:0x2DEDA20;
	static class USaveGame* LoadGameFromSlot(const class FString& SlotName, int UserIndex)//offset:0x2DED940;
	static bool IsSplitscreenForceDisabled(class UObject* WorldContextObject)//offset:0x2DED7C0;
	static bool IsGamePaused(class UObject* WorldContextObject)//offset:0x2DED700;
	static bool HasOption(const class FString& Options, const class FString& InKey)//offset:0x2DED4F0;
	static bool HasLaunchOption(const class FString& OptionToCheck)//offset:0x2DED420;
	static int GrassOverlappingSphereCount(class UObject* WorldContextObject, class UStaticMesh* StaticMesh, const struct FVector& CenterPosition, float Radius)//offset:0x2DED230;
	static struct FIntVector GetWorldOriginLocation(class UObject* WorldContextObject)//offset:0x2DED190;
	static float GetWorldDeltaSeconds(class UObject* WorldContextObject)//offset:0x2DED100;
	static void GetViewProjectionMatrix(const struct FMinimalViewInfo& DesiredView, struct FMatrix* ViewMatrix, struct FMatrix* ProjectionMatrix, struct FMatrix* ViewProjectionMatrix)//offset:0x2DECD60;
	static EMouseCaptureMode GetViewportMouseCaptureMode(class UObject* WorldContextObject)//offset:0x2DED070;
	static float GetUnpausedTimeSeconds(class UObject* WorldContextObject)//offset:0x2DECCD0;
	static float GetTimeSeconds(class UObject* WorldContextObject)//offset:0x2DECC40;
	static TEnumAsByte<EPhysicalSurface> GetSurfaceType(const struct FHitResult& Hit)//offset:0x2DECB60;
	static class ULevelStreaming* GetStreamingLevel(class UObject* WorldContextObject, const struct FName& PackageName)//offset:0x2DECA90;
	static float GetRealTimeSeconds(class UObject* WorldContextObject)//offset:0x2DECA00;
	static class APawn* GetPlayerPawn(class UObject* WorldContextObject, int PlayerIndex)//offset:0x2DEC930;
	static int GetPlayerControllerID(class APlayerController* Player)//offset:0x2DEC8A0;
	static class APlayerController* GetPlayerControllerFromID(class UObject* WorldContextObject, int ControllerId)//offset:0x2DEC7D0;
	static class APlayerController* GetPlayerController(class UObject* WorldContextObject, int PlayerIndex)//offset:0x2DEC700;
	static class ACharacter* GetPlayerCharacter(class UObject* WorldContextObject, int PlayerIndex)//offset:0x2DEC630;
	static class APlayerCameraManager* GetPlayerCameraManager(class UObject* WorldContextObject, int PlayerIndex)//offset:0x2DEC560;
	static class FString GetPlatformName()//offset:0x2DEC4E0;
	static class UObject* GetObjectClass(class UObject* Object)//offset:0x2DEC450;
	static int GetMaxAudioChannelCount(class UObject* WorldContextObject)//offset:0x2DEC360;
	static void GetKeyValue(const class FString& Pair, class FString* Key, class FString* Value)//offset:0x2DEC1E0;
	static int GetIntOption(const class FString& Options, const class FString& Key, int DefaultValue)//offset:0x2DEC0A0;
	static float GetGlobalTimeDilation(class UObject* WorldContextObject)//offset:0x2DEC010;
	static class AGameStateBase* GetGameState(class UObject* WorldContextObject)//offset:0x2DEBF80;
	static class AGameModeBase* GetGameMode(class UObject* WorldContextObject)//offset:0x2DEBEF0;
	static class UGameInstance* GetGameInstance(class UObject* WorldContextObject)//offset:0x2DEBE60;
	static bool GetEnableWorldRendering(class UObject* WorldContextObject)//offset:0x2DEBDD0;
	static class UReverbEffect* GetCurrentReverbEffect(class UObject* WorldContextObject)//offset:0x2DEBCA0;
	static class FString GetCurrentLevelName(class UObject* WorldContextObject, bool bRemovePrefixString)//offset:0x2DEBB90;
	static bool GetClosestListenerLocation(class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange, bool bAllowAttenuationOverride, struct FVector* ListenerPosition)//offset:0x2DEB9C0;
	static float GetAudioTimeSeconds(class UObject* WorldContextObject)//offset:0x2DEB930;
	static void GetAllActorsWithTag(class UObject* WorldContextObject, const struct FName& Tag, TArray<class AActor*>* OutActors)//offset:0x2DEB810;
	static void GetAllActorsWithInterface(class UObject* WorldContextObject, class UInterface* Interface, TArray<class AActor*>* OutActors)//offset:0x2DEB6F0;
	static void GetAllActorsOfClassWithTag(class UObject* WorldContextObject, class AActor* ActorClass, const struct FName& Tag, TArray<class AActor*>* OutActors)//offset:0x2DEB590;
	static void GetAllActorsOfClass(class UObject* WorldContextObject, class AActor* ActorClass, TArray<class AActor*>* OutActors)//offset:0x2DEB470;
	static class AActor* GetActorOfClass(class UObject* WorldContextObject, class AActor* ActorClass)//offset:0x2DEB3A0;
	static void GetActorArrayBounds(TArray<class AActor*> Actors, bool bOnlyCollidingComponents, struct FVector* Center, struct FVector* BoxExtent)//offset:0x2DEB210;
	static struct FVector GetActorArrayAverageLocation(TArray<class AActor*> Actors)//offset:0x2DEB150;
	static void GetAccurateRealTime(class UObject* WorldContextObject, int* Seconds, float* PartialSeconds)//offset:0x2DEB020;
	static void FlushLevelStreaming(class UObject* WorldContextObject)//offset:0x2DEAFA0;
	static class AActor* FinishSpawningActor(class AActor* Actor, const struct FTransform& SpawnTransform)//offset:0x2DEAE80;
	static bool FindCollisionUV(const struct FHitResult& Hit, int UVChannel, struct FVector2D* UV)//offset:0x2DEAC00;
	static void EnableLiveStreaming(bool Enable)//offset:0x2DEAB60;
	static bool DoesSaveGameExist(const class FString& SlotName, int UserIndex)//offset:0x2DEAA80;
	static bool DeprojectScreenToWorld(class APlayerController* Player, const struct FVector2D& ScreenPosition, struct FVector* WorldPosition, struct FVector* WorldDirection)//offset:0x2DEA910;
	static bool DeleteGameInSlot(const class FString& SlotName, int UserIndex)//offset:0x2DEA830;
	static void DeactivateReverbEffect(class UObject* WorldContextObject, const struct FName& TagName)//offset:0x2DEA770;
	static class UAudioComponent* CreateSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy)//offset:0x2DEA510;
	static class USaveGame* CreateSaveGameObject(class USaveGame* SaveGameClass)//offset:0x2DEA480;
	static class APlayerController* CreatePlayer(class UObject* WorldContextObject, int ControllerId, bool bSpawnPlayerController)//offset:0x2DEA380;
	static void ClearSoundMixModifiers(class UObject* WorldContextObject)//offset:0x2DEA300;
	static void ClearSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float FadeOutTime)//offset:0x2DEA1B0;
	static void CancelAsyncLoading()//offset:0x2DE9FC0;
	static void BreakHitResult(const struct FHitResult& Hit, bool* bBlockingHit, bool* bInitialOverlap, float* Time, float* Distance, struct FVector* Location, struct FVector* ImpactPoint, struct FVector* Normal, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, struct FName* HitBoneName, int* HitItem, int* FaceIndex, struct FVector* TraceStart, struct FVector* TraceEnd)//offset:0x2DE98C0;
	static bool BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, struct FVector* TossVelocity, const struct FVector& StartLocation, const struct FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug)//offset:0x2DE8860;
	static bool Blueprint_PredictProjectilePath_ByTraceChannel(class UObject* WorldContextObject, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ)//offset:0x2DE9350;
	static bool Blueprint_PredictProjectilePath_ByObjectType(class UObject* WorldContextObject, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ)//offset:0x2DE8DB0;
	static bool Blueprint_PredictProjectilePath_Advanced(class UObject* WorldContextObject, const struct FPredictProjectilePathParams& PredictParams, struct FPredictProjectilePathResult* PredictResult)//offset:0x2DE8B80;
	static class AActor* BeginSpawningActorFromClass(class UObject* WorldContextObject, class AActor* ActorClass, const struct FTransform& SpawnTransform, bool bNoCollisionFail, class AActor* Owner)//offset:0x2DE8650;
	static class AActor* BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, const struct FTransform& SpawnTransform, bool bNoCollisionFail)//offset:0x2DE84A0;
	static class AActor* BeginDeferredActorSpawnFromClass(class UObject* WorldContextObject, class AActor* ActorClass, const struct FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner)//offset:0x2DE82A0;
	static bool AreSubtitlesEnabled()//offset:0x2DE8270;
	static bool AreAnyListenersWithinRange(class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange)//offset:0x2DE8150;
	static bool ApplyRadialDamageWithFalloff(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UDamageType* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, TEnumAsByte<ECollisionChannel> DamagePreventionChannel)//offset:0x2DE7DB0;
	static bool ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UDamageType* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<ECollisionChannel> DamagePreventionChannel)//offset:0x2DE7AA0;
	static float ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UDamageType* DamageTypeClass)//offset:0x2DE7820;
	static float ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UDamageType* DamageTypeClass)//offset:0x2DE7680;
	static void AnnounceAccessibleString(const class FString& AnnouncementString)//offset:0x2DE75F0;
	static void ActivateReverbEffect(class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, const struct FName& TagName, float Priority, float Volume, float FadeTime)//offset:0x2DE7420;
};


// Class Engine.GameUserSettings
// size:0x00F8 (0x0028 - 0x0120)
class UGameUserSettings : public UObject
{
public:
	bool                                               bUseVSync;                                                // 0x0028(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseDynamicResolution;                                    // 0x0029(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x56];                                      // 0x002A(0x0056) MISSED OFFSET
	uint32_t                                           ResolutionSizeX;                                          // 0x0080(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           ResolutionSizeY;                                          // 0x0084(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           LastUserConfirmedResolutionSizeX;                         // 0x0088(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           LastUserConfirmedResolutionSizeY;                         // 0x008C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                WindowPosX;                                               // 0x0090(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                WindowPosY;                                               // 0x0094(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                FullscreenMode;                                           // 0x0098(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                LastConfirmedFullscreenMode;                              // 0x009C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                PreferredFullscreenMode;                                  // 0x00A0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           VERSION;                                                  // 0x00A4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                AudioQualityLevel;                                        // 0x00A8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                LastConfirmedAudioQualityLevel;                           // 0x00AC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              FrameRateLimit;                                           // 0x00B0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
	int                                                DesiredScreenWidth;                                       // 0x00B8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseDesiredScreenHeight;                                  // 0x00BC(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	int                                                DesiredScreenHeight;                                      // 0x00C0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                LastUserConfirmedDesiredScreenWidth;                      // 0x00C4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                LastUserConfirmedDesiredScreenHeight;                     // 0x00C8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LastRecommendedScreenWidth;                               // 0x00CC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LastRecommendedScreenHeight;                              // 0x00D0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LastCPUBenchmarkResult;                                   // 0x00D4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LastGPUBenchmarkResult;                                   // 0x00D8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	TArray<float>                                      LastCPUBenchmarkSteps;                                    // 0x00E0(0x0010) (ZeroConstructor, Config)
	TArray<float>                                      LastGPUBenchmarkSteps;                                    // 0x00F0(0x0010) (ZeroConstructor, Config)
	float                                              LastGPUBenchmarkMultiplier;                               // 0x0100(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseHDRDisplayOutput;                                     // 0x0104(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0105(0x0003) MISSED OFFSET
	int                                                HDRDisplayOutputNits;                                     // 0x0108(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x010C(0x0004) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnGameUserSettingsUINeedsUpdate;                          // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	void ValidateSettings()//offset:0xF54690;
	bool SupportsHDRDisplayOutput()//offset:0x2DF7340;
	void SetVSyncEnabled(bool bEnable)//offset:0x2DF7190;
	void SetVisualEffectQuality(int Value)//offset:0x2DF72B0;
	void SetViewDistanceQuality(int Value)//offset:0x2DF7220;
	void SetToDefaults()//offset:0x2482FD0;
	void SetTextureQuality(int Value)//offset:0x2DF7100;
	void SetShadowQuality(int Value)//offset:0x2DF7070;
	void SetShadingQuality(int Value)//offset:0x2DF6FE0;
	void SetScreenResolution(const struct FIntPoint& Resolution)//offset:0x2DF6F60;
	void SetResolutionScaleValueEx(float NewScaleValue)//offset:0x2DF6EE0;
	void SetResolutionScaleValue(int NewScaleValue)//offset:0x2DF6E50;
	void SetResolutionScaleNormalized(float NewScaleNormalized)//offset:0x2DF6DD0;
	void SetPostProcessingQuality(int Value)//offset:0x2DF6D40;
	void SetOverallScalabilityLevel(int Value)//offset:0x2DF6CB0;
	void SetFullscreenMode(TEnumAsByte<EWindowMode> InFullscreenMode)//offset:0x2DF6C30;
	void SetFrameRateLimit(float NewLimit)//offset:0x2DF6BB0;
	void SetFoliageQuality(int Value)//offset:0x2DF6B20;
	void SetDynamicResolutionEnabled(bool bEnable)//offset:0x2DF6A90;
	void SetBenchmarkFallbackValues()//offset:0x2DF6A70;
	void SetAudioQualityLevel(int QualityLevel)//offset:0x2DF69E0;
	void SetAntiAliasingQuality(int Value)//offset:0x2DF6950;
	void SaveSettings()//offset:0x2DC8560;
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier)//offset:0x2DF6850;
	void RevertVideoMode()//offset:0x2DF6830;
	void ResetToCurrentSettings()//offset:0x2DF6810;
	void LoadSettings(bool bForceReload)//offset:0x2DF6760;
	bool IsVSyncEnabled()//offset:0x2DF6730;
	bool IsVSyncDirty()//offset:0x2DF6700;
	bool IsScreenResolutionDirty()//offset:0x2DF66D0;
	bool IsHDREnabled()//offset:0x2DF66A0;
	bool IsFullscreenModeDirty()//offset:0x2DF6670;
	bool IsDynamicResolutionEnabled()//offset:0x2DF6640;
	bool IsDynamicResolutionDirty()//offset:0x2DF6610;
	bool IsDirty()//offset:0x1F77F00;
	int GetVisualEffectQuality()//offset:0x2DF6580;
	int GetViewDistanceQuality()//offset:0x2DF6550;
	int GetTextureQuality()//offset:0x2DF6520;
	static int GetSyncInterval()//offset:0x2DF64F0;
	int GetShadowQuality()//offset:0x2DF64C0;
	int GetShadingQuality()//offset:0x2DF6490;
	struct FIntPoint GetScreenResolution()//offset:0x2DF6410;
	float GetResolutionScaleNormalized()//offset:0x2DF63E0;
	void GetResolutionScaleInformationEx(float* CurrentScaleNormalized, float* CurrentScaleValue, float* MinScaleValue, float* MaxScaleValue)//offset:0x2DF6240;
	void GetResolutionScaleInformation(float* CurrentScaleNormalized, int* CurrentScaleValue, int* MinScaleValue, int* MaxScaleValue)//offset:0x2DF60A0;
	float GetRecommendedResolutionScale()//offset:0x2DF6060;
	TEnumAsByte<EWindowMode> GetPreferredFullscreenMode()//offset:0x2DF6030;
	int GetPostProcessingQuality()//offset:0x2DF6000;
	int GetOverallScalabilityLevel()//offset:0x2DF5E90;
	struct FIntPoint GetLastConfirmedScreenResolution()//offset:0x2DF5E50;
	TEnumAsByte<EWindowMode> GetLastConfirmedFullscreenMode()//offset:0x2DF5E20;
	static class UGameUserSettings* GetGameUserSettings()//offset:0x2DF5DF0;
	TEnumAsByte<EWindowMode> GetFullscreenMode()//offset:0x2DF5DC0;
	float GetFrameRateLimit()//offset:0x2DF5D90;
	static int GetFramePace()//offset:0x2DF5D60;
	int GetFoliageQuality()//offset:0x2DF5D30;
	struct FIntPoint GetDesktopResolution()//offset:0x2DF5CF0;
	static struct FIntPoint GetDefaultWindowPosition()//offset:0x2DF5CB0;
	static TEnumAsByte<EWindowMode> GetDefaultWindowMode()//offset:0x2DF5C80;
	float GetDefaultResolutionScale()//offset:0x2DF5C40;
	static struct FIntPoint GetDefaultResolution()//offset:0x2DF5C00;
	int GetCurrentHDRDisplayNits()//offset:0x2DF5BD0;
	int GetAudioQualityLevel()//offset:0xDA6370;
	int GetAntiAliasingQuality()//offset:0x2DF5BA0;
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits)//offset:0x2DF5AD0;
	void ConfirmVideoMode()//offset:0x1F58050;
	void ApplySettings(bool bCheckForCommandLineOverrides)//offset:0x2DF5A40;
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides)//offset:0x2DF59B0;
	void ApplyNonResolutionSettings()//offset:0xF54880;
	void ApplyHardwareBenchmarkResults()//offset:0x2DC8650;
};


// Class Engine.SpotLight
// size:0x0008 (0x0230 - 0x0238)
class ASpotLight : public ALight
{
public:
	class USpotLightComponent*                         SpotLightComponent;                                       // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	void SetOuterConeAngle(float NewOuterConeAngle)//offset:0x2EEDF20;
	void SetInnerConeAngle(float NewInnerConeAngle)//offset:0x2EEDE20;
};


// Class Engine.GeneratedMeshAreaLight
// size:0x0000 (0x0238 - 0x0238)
class AGeneratedMeshAreaLight : public ASpotLight
{
public:
};


// Class Engine.HapticFeedbackEffect_Base
// size:0x0000 (0x0028 - 0x0028)
class UHapticFeedbackEffect_Base : public UObject
{
public:
};


// Class Engine.HapticFeedbackEffect_Buffer
// size:0x0040 (0x0028 - 0x0068)
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
{
public:
	TArray<unsigned char>                              Amplitudes;                                               // 0x0028(0x0010) (Edit, ZeroConstructor)
	int                                                SampleRate;                                               // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2C];                                      // 0x003C(0x002C) MISSED OFFSET
};


// Class Engine.HapticFeedbackEffect_Curve
// size:0x0110 (0x0028 - 0x0138)
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
{
public:
	struct FHapticFeedbackDetails_Curve                HapticDetails;                                            // 0x0028(0x0110) (Edit)
};


// Class Engine.HapticFeedbackEffect_SoundWave
// size:0x0038 (0x0028 - 0x0060)
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
{
public:
	class USoundWave*                                  SoundWave;                                                // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0030(0x0030) MISSED OFFSET
};


// Class Engine.HealthSnapshotBlueprintLibrary
// size:0x0000 (0x0028 - 0x0028)
class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static void StopPerformanceSnapshots()//offset:0x2DFCDE0;
	static void StartPerformanceSnapshots()//offset:0x2DFCDC0;
	static void LogPerformanceSnapshot(const class FString& SnapshotTitle, bool bResetStats)//offset:0x2DFBEC0;
};


// Class Engine.HLODEngineSubsystem
// size:0x0000 (0x0030 - 0x0030)
class UHLODEngineSubsystem : public UEngineSubsystem
{
public:
};


// Class Engine.HLODProxy
// size:0x0060 (0x0028 - 0x0088)
class UHLODProxy : public UObject
{
public:
	TArray<struct FHLODProxyMesh>                      ProxyMeshes;                                              // 0x0028(0x0010) (Edit, ZeroConstructor, EditConst)
	TMap<class UHLODProxyDesc*, struct FHLODProxyMesh> HLODActors;                                               // 0x0038(0x0050) (Edit, EditConst)
};


// Class Engine.HLODProxyDesc
// size:0x0000 (0x0028 - 0x0028)
class UHLODProxyDesc : public UObject
{
public:
};


// Class Engine.ImportanceSamplingLibrary
// size:0x0000 (0x0028 - 0x0028)
class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
{
public:

	static float RandomSobolFloat(int Index, int Dimension, float Seed)//offset:0x2DFC8D0;
	static struct FVector RandomSobolCell3D(int Index, int NumCells, const struct FVector& Cell, const struct FVector& Seed)//offset:0x2DFC720;
	static struct FVector2D RandomSobolCell2D(int Index, int NumCells, const struct FVector2D& Cell, const struct FVector2D& Seed)//offset:0x2DFC5D0;
	static float NextSobolFloat(int Index, int Dimension, float PreviousValue)//offset:0x2DFC400;
	static struct FVector NextSobolCell3D(int Index, int NumCells, const struct FVector& PreviousValue)//offset:0x2DFC2D0;
	static struct FVector2D NextSobolCell2D(int Index, int NumCells, const struct FVector2D& PreviousValue)//offset:0x2DFC1D0;
	static struct FImportanceTexture MakeImportanceTexture(class UTexture2D* Texture, TEnumAsByte<EImportanceWeight> WeightingFunc)//offset:0x2DFBFF0;
	static void ImportanceSample(const struct FImportanceTexture& Texture, const struct FVector2D& Rand, int Samples, float Intensity, struct FVector2D* SamplePosition, struct FLinearColor* SampleColor, float* SampleIntensity, float* SampleSize)//offset:0x2DFBBD0;
	static void BreakImportanceTexture(const struct FImportanceTexture& ImportanceTexture, class UTexture2D** Texture, TEnumAsByte<EImportanceWeight>* WeightingFunc)//offset:0x2DF9F70;
};


// Class Engine.ImportantToggleSettingInterface
// size:0x0000 (0x0028 - 0x0028)
class UImportantToggleSettingInterface : public UInterface
{
public:
};


// Class Engine.InGameAdManager
// size:0x0028 (0x0038 - 0x0060)
class UInGameAdManager : public UPlatformInterfaceBase
{
public:
	unsigned char                                      bShouldPauseWhileAdOpen;                                  // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	TArray<struct FScriptDelegate>                     ClickedBannerDelegates;                                   // 0x0040(0x0010) (ZeroConstructor)
	TArray<struct FScriptDelegate>                     ClosedAdDelegates;                                        // 0x0050(0x0010) (ZeroConstructor)
};


// Class Engine.InheritableComponentHandler
// size:0x0020 (0x0028 - 0x0048)
class UInheritableComponentHandler : public UObject
{
public:
	TArray<struct FComponentOverrideRecord>            Records;                                                  // 0x0028(0x0010) (ZeroConstructor)
	TArray<class UActorComponent*>                     UnnecessaryComponents;                                    // 0x0038(0x0010) (ExportObject, ZeroConstructor, Transient)
};


// Class Engine.InputDelegateBinding
// size:0x0000 (0x0028 - 0x0028)
class UInputDelegateBinding : public UDynamicBlueprintBinding
{
public:
};


// Class Engine.InputActionDelegateBinding
// size:0x0010 (0x0028 - 0x0038)
class UInputActionDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings;                              // 0x0028(0x0010) (ZeroConstructor)
};


// Class Engine.InputAxisDelegateBinding
// size:0x0010 (0x0028 - 0x0038)
class UInputAxisDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisDelegateBinding>  InputAxisDelegateBindings;                                // 0x0028(0x0010) (ZeroConstructor)
};


// Class Engine.InputAxisKeyDelegateBinding
// size:0x0010 (0x0028 - 0x0038)
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings;                             // 0x0028(0x0010) (ZeroConstructor)
};


// Class Engine.InputComponent
// size:0x0088 (0x00B0 - 0x0138)
class UInputComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x00B0(0x0070) MISSED OFFSET
	TArray<struct FCachedKeyToActionInfo>              CachedKeyToActionInfo;                                    // 0x0120(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0130(0x0008) MISSED OFFSET

	bool WasControllerKeyJustReleased(const struct FKey& Key)//offset:0x2E01EB0;
	bool WasControllerKeyJustPressed(const struct FKey& Key)//offset:0x2E01EB0;
	bool IsControllerKeyDown(const struct FKey& Key)//offset:0x2E01EB0;
	void GetTouchState(int FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed)//offset:0x2E01D30;
	struct FVector GetControllerVectorKeyState(const struct FKey& Key)//offset:0x2E017B0;
	void GetControllerMouseDelta(float* DeltaX, float* DeltaY)//offset:0x2E016D0;
	float GetControllerKeyTimeDown(const struct FKey& Key)//offset:0x2E014A0;
	void GetControllerAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY)//offset:0x2E015A0;
	float GetControllerAnalogKeyState(const struct FKey& Key)//offset:0x2E014A0;
};


// Class Engine.InputKeyDelegateBinding
// size:0x0010 (0x0028 - 0x0038)
class UInputKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputKeyDelegateBinding>   InputKeyDelegateBindings;                                 // 0x0028(0x0010) (ZeroConstructor)
};


// Class Engine.InputSettings
// size:0x0118 (0x0028 - 0x0140)
class UInputSettings : public UObject
{
public:
	TArray<struct FInputAxisConfigEntry>               AxisConfig;                                               // 0x0028(0x0010) (Edit, EditFixedSize, ZeroConstructor, Config)
	unsigned char                                      bAltEnterTogglesFullscreen;                               // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bF11TogglesFullscreen;                                    // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bUseMouseForTouch;                                        // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bEnableMouseSmoothing;                                    // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bEnableFOVScaling;                                        // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bCaptureMouseOnLaunch;                                    // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bDefaultViewportMouseLock;                                // 0x0038(0x0001) (Config, Deprecated)
	unsigned char                                      bAlwaysShowTouchInterface;                                // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bShowConsoleOnFourFingerTap;                              // 0x0039(0x0001) (Edit, Config)
	unsigned char                                      bEnableGestureRecognizer;                                 // 0x0039(0x0001) (Edit, Config)
	bool                                               bUseAutocorrect;                                          // 0x003A(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x003B(0x0005) MISSED OFFSET
	TArray<class FString>                              ExcludedAutocorrectOS;                                    // 0x0040(0x0010) (Edit, ZeroConstructor, Config)
	TArray<class FString>                              ExcludedAutocorrectCultures;                              // 0x0050(0x0010) (Edit, ZeroConstructor, Config)
	TArray<class FString>                              ExcludedAutocorrectDeviceModels;                          // 0x0060(0x0010) (Edit, ZeroConstructor, Config)
	EMouseCaptureMode                                  DefaultViewportMouseCaptureMode;                          // 0x0070(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	EMouseLockMode                                     DefaultViewportMouseLockMode;                             // 0x0071(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0072(0x0002) MISSED OFFSET
	float                                              FOVScale;                                                 // 0x0074(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DoubleClickTime;                                          // 0x0078(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	TArray<struct FInputActionKeyMapping>              ActionMappings;                                           // 0x0080(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FInputAxisKeyMapping>                AxisMappings;                                             // 0x0090(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FInputActionSpeechMapping>           SpeechMappings;                                           // 0x00A0(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData03[0x28];                                      // 0x00B0(0x0028) UNKNOWN PROPERTY: 
	unsigned char                                      UnknownData04[0x28];                                      // 0x00D8(0x0028) UNKNOWN PROPERTY: 
	struct FSoftObjectPath                             DefaultTouchInterface;                                    // 0x0100(0x0018) (Edit, ZeroConstructor, Config)
	struct FKey                                        ConsoleKey;                                               // 0x0118(0x0018) (Config, Deprecated)
	TArray<struct FKey>                                ConsoleKeys;                                              // 0x0130(0x0010) (Edit, ZeroConstructor, Config)

	void SaveKeyMappings()//offset:0x2E02340;
	void RemoveAxisMapping(const struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps)//offset:0x2E02110;
	void RemoveActionMapping(const struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps)//offset:0x2E01FA0;
	static class UInputSettings* GetInputSettings()//offset:0x2E018C0;
	void GetAxisNames(TArray<struct FName>* AxisNames)//offset:0x2E013F0;
	void GetAxisMappingByName(const struct FName& InAxisName, TArray<struct FInputAxisKeyMapping>* OutMappings)//offset:0x2E012B0;
	void GetActionNames(TArray<struct FName>* ActionNames)//offset:0x2E01200;
	void GetActionMappingByName(const struct FName& InActionName, TArray<struct FInputActionKeyMapping>* OutMappings)//offset:0x2E010C0;
	void ForceRebuildKeymaps()//offset:0x2E010A0;
	void AddAxisMapping(const struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps)//offset:0x2E007A0;
	void AddActionMapping(const struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps)//offset:0x2E00630;
};


// Class Engine.InputTouchDelegateBinding
// size:0x0010 (0x0028 - 0x0038)
class UInputTouchDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings;                               // 0x0028(0x0010) (ZeroConstructor)
};


// Class Engine.InputVectorAxisDelegateBinding
// size:0x0000 (0x0038 - 0x0038)
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{
public:
};


// Class Engine.Interface_AssetUserData
// size:0x0000 (0x0028 - 0x0028)
class UInterface_AssetUserData : public UInterface
{
public:
};


// Class Engine.BoneReferenceSkeletonProvider
// size:0x0000 (0x0028 - 0x0028)
class UBoneReferenceSkeletonProvider : public UInterface
{
public:
};


// Class Engine.Interface_CollisionDataProvider
// size:0x0000 (0x0028 - 0x0028)
class UInterface_CollisionDataProvider : public UInterface
{
public:
};


// Class Engine.Interface_PostProcessVolume
// size:0x0000 (0x0028 - 0x0028)
class UInterface_PostProcessVolume : public UInterface
{
public:
};


// Class Engine.Interface_PreviewMeshProvider
// size:0x0000 (0x0028 - 0x0028)
class UInterface_PreviewMeshProvider : public UInterface
{
public:
};


// Class Engine.InterpCurveEdSetup
// size:0x0018 (0x0028 - 0x0040)
class UInterpCurveEdSetup : public UObject
{
public:
	TArray<struct FCurveEdTab>                         Tabs;                                                     // 0x0028(0x0010) (ZeroConstructor)
	int                                                ActiveTab;                                                // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
};


// Class Engine.InterpData
// size:0x0048 (0x0028 - 0x0070)
class UInterpData : public UObject
{
public:
	float                                              InterpLength;                                             // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              PathBuildTime;                                            // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<class UInterpGroup*>                        InterpGroups;                                             // 0x0030(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                             // 0x0040(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	float                                              EdSectionStart;                                           // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              EdSectionEnd;                                             // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bShouldBakeAndPrune;                                      // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	class UInterpGroupDirector*                        CachedDirectorGroup;                                      // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FName>                               AllEventNames;                                            // 0x0060(0x0010) (ZeroConstructor)
};


// Class Engine.InterpFilter
// size:0x0010 (0x0028 - 0x0038)
class UInterpFilter : public UObject
{
public:
	class FString                                      Caption;                                                  // 0x0028(0x0010) (ZeroConstructor)
};


// Class Engine.InterpFilter_Classes
// size:0x0000 (0x0038 - 0x0038)
class UInterpFilter_Classes : public UInterpFilter
{
public:
};


// Class Engine.InterpFilter_Custom
// size:0x0000 (0x0038 - 0x0038)
class UInterpFilter_Custom : public UInterpFilter
{
public:
};


// Class Engine.InterpGroup
// size:0x0028 (0x0028 - 0x0050)
class UInterpGroup : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<class UInterpTrack*>                        InterpTracks;                                             // 0x0030(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	struct FName                                       GroupName;                                                // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      GroupColor;                                               // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCollapsed;                                               // 0x004C(0x0001)
	unsigned char                                      bVisible;                                                 // 0x004C(0x0001) (Transient)
	unsigned char                                      bIsFolder;                                                // 0x004C(0x0001)
	unsigned char                                      bIsParented;                                              // 0x004C(0x0001)
	unsigned char                                      bIsSelected;                                              // 0x004C(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
};


// Class Engine.InterpGroupCamera
// size:0x0010 (0x0050 - 0x0060)
class UInterpGroupCamera : public UInterpGroup
{
public:
	class UCameraAnim*                                 CameraAnimInst;                                           // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              CompressTolerance;                                        // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
};


// Class Engine.InterpGroupDirector
// size:0x0000 (0x0050 - 0x0050)
class UInterpGroupDirector : public UInterpGroup
{
public:
};


// Class Engine.InterpGroupInst
// size:0x0020 (0x0028 - 0x0048)
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                                Group;                                                    // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class AActor*                                      GroupActor;                                               // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UInterpTrackInst*>                    TrackInst;                                                // 0x0038(0x0010) (ZeroConstructor)
};


// Class Engine.InterpGroupInstCamera
// size:0x0000 (0x0048 - 0x0048)
class UInterpGroupInstCamera : public UInterpGroupInst
{
public:
};


// Class Engine.InterpGroupInstDirector
// size:0x0000 (0x0048 - 0x0048)
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:
};


// Class Engine.InterpToMovementComponent
// size:0x00A0 (0x00F0 - 0x0190)
class UInterpToMovementComponent : public UMovementComponent
{
public:
	float                                              Duration;                                                 // 0x00F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPauseOnImpact;                                           // 0x00F4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F5(0x0003) MISSED OFFSET
	bool                                               bSweep;                                                   // 0x00F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	ETeleportType                                      TeleportType;                                             // 0x00F9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EInterpToBehaviourType                             BehaviourType;                                            // 0x00FA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckIfStillInWorld;                                     // 0x00FB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bForceSubStepping;                                        // 0x00FC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00FD(0x0003) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnInterpToReverse;                                        // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnInterpToStop;                                           // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnWaitBeginDelegate;                                      // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnWaitEndDelegate;                                        // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnResetDelegate;                                          // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              MaxSimulationTimeStep;                                    // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FInterpControlPoint>                 ControlPoints;                                            // 0x0158(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0168(0x0028) MISSED OFFSET

	void StopSimulating(const struct FHitResult& HitResult)//offset:0x2E05C40;
	void RestartMovement(float InitialDirection)//offset:0x2E05BC0;
	void OnInterpToWaitEndDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)//offset:0x13CEB30;
	void OnInterpToWaitBeginDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)//offset:0x13CEB30;
	void OnInterpToStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)//offset:0x13CEB30;
	void OnInterpToReverseDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)//offset:0x13CEB30;
	void OnInterpToResetDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)//offset:0x13CEB30;
	void FinaliseControlPoints()//offset:0x2E05BA0;
};


// Class Engine.InterpTrack
// size:0x0048 (0x0028 - 0x0070)
class UInterpTrack : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TArray<class UInterpTrack*>                        SubTracks;                                                // 0x0038(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UInterpTrackInst*                            TrackInstClass;                                           // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETrackActiveCondition>                 ActiveCondition;                                          // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	class FString                                      TrackTitle;                                               // 0x0058(0x0010) (ZeroConstructor)
	unsigned char                                      bOnePerGroup;                                             // 0x0068(0x0001)
	unsigned char                                      bDirGroupOnly;                                            // 0x0068(0x0001)
	unsigned char                                      bDisableTrack;                                            // 0x0068(0x0001)
	unsigned char                                      bIsSelected;                                              // 0x0068(0x0001) (Transient)
	unsigned char                                      bIsAnimControlTrack;                                      // 0x0068(0x0001)
	unsigned char                                      bSubTrackOnly;                                            // 0x0068(0x0001)
	unsigned char                                      bVisible;                                                 // 0x0068(0x0001) (Transient)
	unsigned char                                      bIsRecording;                                             // 0x0068(0x0001) (Transient)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
};


// Class Engine.InterpTrackFloatBase
// size:0x0020 (0x0070 - 0x0090)
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                               // 0x0070(0x0018) (ZeroConstructor)
	float                                              CurveTension;                                             // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
};


// Class Engine.InterpTrackAnimControl
// size:0x0020 (0x0090 - 0x00B0)
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	struct FName                                       SlotName;                                                 // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FAnimControlTrackKey>                AnimSeqs;                                                 // 0x0098(0x0010) (ZeroConstructor)
	unsigned char                                      bSkipAnimNotifiers;                                       // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET
};


// Class Engine.InterpTrackVectorBase
// size:0x0020 (0x0070 - 0x0090)
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                              // 0x0070(0x0018) (ZeroConstructor)
	float                                              CurveTension;                                             // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
};


// Class Engine.InterpTrackAudioMaster
// size:0x0000 (0x0090 - 0x0090)
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:
};


// Class Engine.InterpTrackBoolProp
// size:0x0018 (0x0070 - 0x0088)
class UInterpTrackBoolProp : public UInterpTrack
{
public:
	TArray<struct FBoolTrackKey>                       BoolTrack;                                                // 0x0070(0x0010) (ZeroConstructor)
	struct FName                                       PropertyName;                                             // 0x0080(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
};


// Class Engine.InterpTrackColorProp
// size:0x0008 (0x0090 - 0x0098)
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
};


// Class Engine.InterpTrackColorScale
// size:0x0000 (0x0090 - 0x0090)
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:
};


// Class Engine.InterpTrackDirector
// size:0x0018 (0x0070 - 0x0088)
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray<struct FDirectorTrackCut>                   CutTrack;                                                 // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bSimulateCameraCutsOnClients;                             // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
};


// Class Engine.InterpTrackEvent
// size:0x0018 (0x0070 - 0x0088)
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray<struct FEventTrackKey>                      EventTrack;                                               // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bFireEventsWhenForwards;                                  // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenBackwards;                                 // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenJumpingForwards;                           // 0x0080(0x0001) (Edit)
	unsigned char                                      bUseCustomEventName;                                      // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
};


// Class Engine.InterpTrackFade
// size:0x0018 (0x0090 - 0x00A8)
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned char                                      bPersistFade;                                             // 0x0090(0x0001) (Edit)
	unsigned char                                      bFadeAudio;                                               // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	struct FLinearColor                                FadeColor;                                                // 0x0094(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
};


// Class Engine.InterpTrackFloatAnimBPParam
// size:0x0020 (0x0090 - 0x00B0)
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
{
public:
	class UObject*                                     AnimBlueprintClass;                                       // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimInstance*                               AnimClass;                                                // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       ParamName;                                                // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00A8(0x0008) MISSED OFFSET
};


// Class Engine.InterpTrackFloatMaterialParam
// size:0x0018 (0x0090 - 0x00A8)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                          // 0x0090(0x0010) (Edit, ZeroConstructor)
	struct FName                                       ParamName;                                                // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.InterpTrackFloatParticleParam
// size:0x0008 (0x0090 - 0x0098)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                                // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.InterpTrackFloatProp
// size:0x0008 (0x0090 - 0x0098)
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
};


// Class Engine.InterpTrackInst
// size:0x0000 (0x0028 - 0x0028)
class UInterpTrackInst : public UObject
{
public:
};


// Class Engine.InterpTrackInstAnimControl
// size:0x0008 (0x0028 - 0x0030)
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
};


// Class Engine.InterpTrackInstAudioMaster
// size:0x0000 (0x0028 - 0x0028)
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:
};


// Class Engine.InterpTrackInstProperty
// size:0x0028 (0x0028 - 0x0050)
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	TFieldPath<Property>                               InterpProperty;                                           // 0x0028(0x0020)
	class UObject*                                     PropertyOuterObjectInst;                                  // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.InterpTrackInstBoolProp
// size:0x0018 (0x0050 - 0x0068)
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0050(0x0010) MISSED OFFSET
	bool                                               ResetBool;                                                // 0x0060(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
};


// Class Engine.InterpTrackInstColorProp
// size:0x0010 (0x0050 - 0x0060)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	struct FColor                                      ResetColor;                                               // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
};


// Class Engine.InterpTrackInstColorScale
// size:0x0000 (0x0028 - 0x0028)
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:
};


// Class Engine.InterpTrackInstDirector
// size:0x0008 (0x0028 - 0x0030)
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                      OldViewTarget;                                            // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.InterpTrackInstEvent
// size:0x0008 (0x0028 - 0x0030)
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
};


// Class Engine.InterpTrackInstFade
// size:0x0000 (0x0028 - 0x0028)
class UInterpTrackInstFade : public UInterpTrackInst
{
public:
};


// Class Engine.InterpTrackInstFloatAnimBPParam
// size:0x0018 (0x0028 - 0x0040)
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
{
public:
	class UAnimInstance*                               AnimScriptInstance;                                       // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ResetFloat;                                               // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0034(0x000C) MISSED OFFSET
};


// Class Engine.InterpTrackInstFloatMaterialParam
// size:0x0038 (0x0028 - 0x0060)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                        // 0x0028(0x0010) (ZeroConstructor)
	TArray<float>                                      ResetFloats;                                              // 0x0038(0x0010) (ZeroConstructor)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefs;                                    // 0x0048(0x0010) (ZeroConstructor)
	class UInterpTrackFloatMaterialParam*              InstancedTrack;                                           // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.InterpTrackInstFloatParticleParam
// size:0x0008 (0x0028 - 0x0030)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                               // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
};


// Class Engine.InterpTrackInstFloatProp
// size:0x0010 (0x0050 - 0x0060)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	float                                              ResetFloat;                                               // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
};


// Class Engine.InterpTrackInstLinearColorProp
// size:0x0018 (0x0050 - 0x0068)
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	struct FLinearColor                                ResetColor;                                               // 0x0058(0x0010) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.InterpTrackInstMove
// size:0x0018 (0x0028 - 0x0040)
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FVector                                     ResetLocation;                                            // 0x0028(0x000C) (ZeroConstructor, IsPlainOldData)
	struct FRotator                                    ResetRotation;                                            // 0x0034(0x000C) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.InterpTrackInstParticleReplay
// size:0x0008 (0x0028 - 0x0030)
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
};


// Class Engine.InterpTrackInstSlomo
// size:0x0008 (0x0028 - 0x0030)
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                              OldTimeDilation;                                          // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
};


// Class Engine.InterpTrackInstSound
// size:0x0010 (0x0028 - 0x0038)
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
	class UAudioComponent*                             PlayAudioComp;                                            // 0x0030(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
};


// Class Engine.InterpTrackInstToggle
// size:0x0010 (0x0028 - 0x0038)
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	TEnumAsByte<ETrackToggleAction>                    Action;                                                   // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              LastUpdatePosition;                                       // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSavedActiveState;                                        // 0x0030(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
};


// Class Engine.InterpTrackInstVectorMaterialParam
// size:0x0038 (0x0028 - 0x0060)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                        // 0x0028(0x0010) (ZeroConstructor)
	TArray<struct FVector>                             ResetVectors;                                             // 0x0038(0x0010) (ZeroConstructor)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefs;                                    // 0x0048(0x0010) (ZeroConstructor)
	class UInterpTrackVectorMaterialParam*             InstancedTrack;                                           // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.InterpTrackInstVectorProp
// size:0x0018 (0x0050 - 0x0068)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	struct FVector                                     ResetVector;                                              // 0x0058(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
};


// Class Engine.InterpTrackInstVisibility
// size:0x0008 (0x0028 - 0x0030)
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	TEnumAsByte<EVisibilityTrackAction>                Action;                                                   // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              LastUpdatePosition;                                       // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.InterpTrackLinearColorBase
// size:0x0020 (0x0070 - 0x0090)
class UInterpTrackLinearColorBase : public UInterpTrack
{
public:
	struct FInterpCurveLinearColor                     LinearColorTrack;                                         // 0x0070(0x0018) (ZeroConstructor)
	float                                              CurveTension;                                             // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
};


// Class Engine.InterpTrackLinearColorProp
// size:0x0008 (0x0090 - 0x0098)
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
};


// Class Engine.InterpTrackMove
// size:0x0058 (0x0070 - 0x00C8)
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                                 // 0x0070(0x0018) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FInterpCurveVector                          EulerTrack;                                               // 0x0088(0x0018) (ZeroConstructor)
	struct FInterpLookupTrack                          LookupTrack;                                              // 0x00A0(0x0010)
	struct FName                                       LookAtGroupName;                                          // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LinCurveTension;                                          // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngCurveTension;                                          // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseQuatInterpolation;                                    // 0x00C0(0x0001) (Edit)
	unsigned char                                      bShowArrowAtKeys;                                         // 0x00C0(0x0001) (Edit)
	unsigned char                                      bDisableMovement;                                         // 0x00C0(0x0001) (Edit)
	unsigned char                                      bShowTranslationOnCurveEd;                                // 0x00C0(0x0001) (Edit)
	unsigned char                                      bShowRotationOnCurveEd;                                   // 0x00C0(0x0001) (Edit)
	unsigned char                                      bHide3DTrack;                                             // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	TEnumAsByte<EInterpTrackMoveRotMode>               RotMode;                                                  // 0x00C4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
};


// Class Engine.InterpTrackMoveAxis
// size:0x0018 (0x0090 - 0x00A8)
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{
public:
	TEnumAsByte<EInterpMoveAxis>                       MoveAxis;                                                 // 0x0090(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET
	struct FInterpLookupTrack                          LookupTrack;                                              // 0x0098(0x0010)
};


// Class Engine.InterpTrackParticleReplay
// size:0x0010 (0x0070 - 0x0080)
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	TArray<struct FParticleReplayTrackKey>             TrackKeys;                                                // 0x0070(0x0010) (ZeroConstructor)
};


// Class Engine.InterpTrackSlomo
// size:0x0000 (0x0090 - 0x0090)
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:
};


// Class Engine.InterpTrackSound
// size:0x0018 (0x0090 - 0x00A8)
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray<struct FSoundTrackKey>                      Sounds;                                                   // 0x0090(0x0010) (ZeroConstructor)
	unsigned char                                      bPlayOnReverse;                                           // 0x00A0(0x0001) (Edit)
	unsigned char                                      bContinueSoundOnMatineeEnd;                               // 0x00A0(0x0001) (Edit)
	unsigned char                                      bSuppressSubtitles;                                       // 0x00A0(0x0001) (Edit)
	unsigned char                                      bTreatAsDialogue;                                         // 0x00A0(0x0001) (Edit)
	unsigned char                                      bAttach;                                                  // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET
};


// Class Engine.InterpTrackToggle
// size:0x0018 (0x0070 - 0x0088)
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray<struct FToggleTrackKey>                     ToggleTrack;                                              // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bActivateSystemEachUpdate;                                // 0x0080(0x0001) (Edit)
	unsigned char                                      bActivateWithJustAttachedFlag;                            // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenForwards;                                  // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenBackwards;                                 // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenJumpingForwards;                           // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
};


// Class Engine.InterpTrackVectorMaterialParam
// size:0x0018 (0x0090 - 0x00A8)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                          // 0x0090(0x0010) (Edit, ZeroConstructor)
	struct FName                                       ParamName;                                                // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.InterpTrackVectorProp
// size:0x0008 (0x0090 - 0x0098)
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
};


// Class Engine.InterpTrackVisibility
// size:0x0018 (0x0070 - 0x0088)
class UInterpTrackVisibility : public UInterpTrack
{
public:
	TArray<struct FVisibilityTrackKey>                 VisibilityTrack;                                          // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bFireEventsWhenForwards;                                  // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenBackwards;                                 // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenJumpingForwards;                           // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
};


// Class Engine.IntSerialization
// size:0x0028 (0x0028 - 0x0050)
class UIntSerialization : public UObject
{
public:
	uint16_t                                           UnsignedInt16Variable;                                    // 0x0028(0x0002) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002A(0x0002) MISSED OFFSET
	uint32_t                                           UnsignedInt32Variable;                                    // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	uint64_t                                           UnsignedInt64Variable;                                    // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	int8_t                                             SignedInt8Variable;                                       // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0039(0x0001) MISSED OFFSET
	int16_t                                            SignedInt16Variable;                                      // 0x003A(0x0002) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	int64_t                                            SignedInt64Variable;                                      // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnsignedInt8Variable;                                     // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	int                                                SignedInt32Variable;                                      // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.KillZVolume
// size:0x0000 (0x0268 - 0x0268)
class AKillZVolume : public APhysicsVolume
{
public:
};


// Class Engine.KismetArrayLibrary
// size:0x0000 (0x0028 - 0x0028)
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{
public:

	static void SetArrayPropertyByName(class UObject* Object, const struct FName& PropertyName, TArray<int> Value)//offset:0x2E0B660;
	static void FilterArray(TArray<class AActor*> TargetArray, class AActor* FilterClass, TArray<class AActor*>* FilteredArray)//offset:0x2E0B510;
	static void Array_Swap(TArray<int> TargetArray, int FirstIndex, int SecondIndex)//offset:0x2E0B3D0;
	static void Array_Shuffle(TArray<int> TargetArray)//offset:0x2E0B330;
	static void Array_Set(TArray<int> TargetArray, int Index, int Item, bool bSizeToFit)//offset:0x2E0B100;
	static void Array_Reverse(TArray<int> TargetArray)//offset:0x2E0B060;
	static void Array_Resize(TArray<int> TargetArray, int Size)//offset:0x2E0AF70;
	static bool Array_RemoveItem(TArray<int> TargetArray, int Item)//offset:0x2E0ADB0;
	static void Array_Remove(TArray<int> TargetArray, int IndexToRemove)//offset:0x2E0ACC0;
	static void Array_RandomFromStream(TArray<int> TargetArray, struct FRandomStream* RandomStream, int* OutItem, int* OutIndex)//offset:0x2E0AB30;
	static void Array_Random(TArray<int> TargetArray, int* OutItem, int* OutIndex)//offset:0x2E0A9F0;
	static int Array_Length(TArray<int> TargetArray)//offset:0x2E0A940;
	static int Array_LastIndex(TArray<int> TargetArray)//offset:0x2E0A890;
	static bool Array_IsValidIndex(TArray<int> TargetArray, int IndexToTest)//offset:0x2E0A7A0;
	static void Array_Insert(TArray<int> TargetArray, int NewItem, int Index)//offset:0x2E0A5B0;
	static bool Array_Identical(TArray<int> ArrayA, TArray<int> ArrayB)//offset:0x2E0A490;
	static void Array_Get(TArray<int> TargetArray, int Index, int* Item)//offset:0x2E0A290;
	static int Array_Find(TArray<int> TargetArray, int ItemToFind)//offset:0x2E0A0D0;
	static bool Array_Contains(TArray<int> TargetArray, int ItemToFind)//offset:0x2E09F10;
	static void Array_Clear(TArray<int> TargetArray)//offset:0x2E09E70;
	static void Array_Append(TArray<int> TargetArray, TArray<int> SourceArray)//offset:0x2E09D60;
	static int Array_AddUnique(TArray<int> TargetArray, int NewItem)//offset:0x2E09BB0;
	static int Array_Add(TArray<int> TargetArray, int NewItem)//offset:0x2E09A00;
};


// Class Engine.KismetGuidLibrary
// size:0x0000 (0x0028 - 0x0028)
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{
public:

	static void Parse_StringToGuid(const class FString& GuidString, struct FGuid* OutGuid, bool* Success)//offset:0x2E0FB00;
	static bool NotEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B)//offset:0x2E0FA00;
	static struct FGuid NewGuid()//offset:0x2E0F9C0;
	static bool IsValid_Guid(const struct FGuid& InGuid)//offset:0x2E0EA60;
	static void Invalidate_Guid(struct FGuid* InGuid)//offset:0x2E0E9D0;
	static bool EqualEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B)//offset:0x2E0CE20;
	static class FString Conv_GuidToString(const struct FGuid& InGuid)//offset:0x2E0CBF0;
};


// Class Engine.KismetInputLibrary
// size:0x0000 (0x0028 - 0x0028)
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{
public:

	static bool PointerEvent_IsTouchEvent(const struct FPointerEvent& Input)//offset:0x2E10A70;
	static bool PointerEvent_IsMouseButtonDown(const struct FPointerEvent& Input, const struct FKey& MouseButton)//offset:0x2E108A0;
	static float PointerEvent_GetWheelDelta(const struct FPointerEvent& Input)//offset:0x2E10770;
	static int PointerEvent_GetUserIndex(const struct FPointerEvent& Input)//offset:0x2E10640;
	static int PointerEvent_GetTouchpadIndex(const struct FPointerEvent& Input)//offset:0x2E10510;
	static struct FVector2D PointerEvent_GetScreenSpacePosition(const struct FPointerEvent& Input)//offset:0x2E103D0;
	static int PointerEvent_GetPointerIndex(const struct FPointerEvent& Input)//offset:0x2E102A0;
	static struct FVector2D PointerEvent_GetLastScreenSpacePosition(const struct FPointerEvent& Input)//offset:0x2E10160;
	static ESlateGesture PointerEvent_GetGestureType(const struct FPointerEvent& Input)//offset:0x2E10030;
	static struct FVector2D PointerEvent_GetGestureDelta(const struct FPointerEvent& Input)//offset:0x2E0FEF0;
	static struct FKey PointerEvent_GetEffectingButton(const struct FPointerEvent& Input)//offset:0x2E0FD80;
	static struct FVector2D PointerEvent_GetCursorDelta(const struct FPointerEvent& Input)//offset:0x2E0FC40;
	static bool Key_IsVectorAxis(const struct FKey& Key)//offset:0x2E0F8F0;
	static bool Key_IsValid(const struct FKey& Key)//offset:0x2E0F820;
	static bool Key_IsMouseButton(const struct FKey& Key)//offset:0x2E0F750;
	static bool Key_IsModifierKey(const struct FKey& Key)//offset:0x2E0F680;
	static bool Key_IsKeyboardKey(const struct FKey& Key)//offset:0x2E0F5B0;
	static bool Key_IsGamepadKey(const struct FKey& Key)//offset:0x2E0F4E0;
	static bool Key_IsDigital(const struct FKey& Key)//offset:0x2E0F410;
	static bool Key_IsButtonAxis(const struct FKey& Key)//offset:0x2E0F340;
	static bool Key_IsAxis3D(const struct FKey& Key)//offset:0x2E0F270;
	static bool Key_IsAxis2D(const struct FKey& Key)//offset:0x2E0F1A0;
	static bool Key_IsAxis1D(const struct FKey& Key)//offset:0x2E0F0D0;
	static bool Key_IsAnalog(const struct FKey& Key)//offset:0x2E0F000;
	static EUINavigation Key_GetNavigationDirectionFromKey(const struct FKeyEvent& InKeyEvent)//offset:0x2E0EF00;
	static EUINavigation Key_GetNavigationDirectionFromAnalog(const struct FAnalogInputEvent& InAnalogEvent)//offset:0x2E0EDF0;
	static EUINavigationAction Key_GetNavigationActionFromKey(const struct FKeyEvent& InKeyEvent)//offset:0x2E0ECF0;
	static EUINavigationAction Key_GetNavigationAction(const struct FKey& InKey)//offset:0x2E0EC20;
	static struct FText Key_GetDisplayName(const struct FKey& Key)//offset:0x2E0EB00;
	static bool InputEvent_IsShiftDown(const struct FInputEvent& Input)//offset:0x2E0E920;
	static bool InputEvent_IsRightShiftDown(const struct FInputEvent& Input)//offset:0x2E0E870;
	static bool InputEvent_IsRightControlDown(const struct FInputEvent& Input)//offset:0x2E0E7C0;
	static bool InputEvent_IsRightCommandDown(const struct FInputEvent& Input)//offset:0x2E0E710;
	static bool InputEvent_IsRightAltDown(const struct FInputEvent& Input)//offset:0x2E0E660;
	static bool InputEvent_IsRepeat(const struct FInputEvent& Input)//offset:0x2E0E5B0;
	static bool InputEvent_IsLeftShiftDown(const struct FInputEvent& Input)//offset:0x2E0E500;
	static bool InputEvent_IsLeftControlDown(const struct FInputEvent& Input)//offset:0x2E0E450;
	static bool InputEvent_IsLeftCommandDown(const struct FInputEvent& Input)//offset:0x2E0E3A0;
	static bool InputEvent_IsLeftAltDown(const struct FInputEvent& Input)//offset:0x2E0E2F0;
	static bool InputEvent_IsControlDown(const struct FInputEvent& Input)//offset:0x2E0E240;
	static bool InputEvent_IsCommandDown(const struct FInputEvent& Input)//offset:0x2E0E190;
	static bool InputEvent_IsAltDown(const struct FInputEvent& Input)//offset:0x2E0E0E0;
	static struct FText InputChord_GetDisplayName(const struct FInputChord& Key)//offset:0x2E0DF90;
	static int GetUserIndex(const struct FKeyEvent& Input)//offset:0x2E0DD80;
	static struct FKey GetKey(const struct FKeyEvent& Input)//offset:0x2E0D680;
	static float GetAnalogValue(const struct FAnalogInputEvent& Input)//offset:0x2E0D280;
	static bool EqualEqual_KeyKey(const struct FKey& A, const struct FKey& B)//offset:0x2E0D100;
	static bool EqualEqual_InputChordInputChord(const struct FInputChord& A, const struct FInputChord& B)//offset:0x2E0CF20;
	static void CalibrateTilt()//offset:0x2E0CB10;
};


// Class Engine.KismetInternationalizationLibrary
// size:0x0000 (0x0028 - 0x0028)
class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
{
public:

	static bool SetCurrentLocale(const class FString& Culture, bool SaveToConfig)//offset:0x2E10F70;
	static bool SetCurrentLanguageAndLocale(const class FString& Culture, bool SaveToConfig)//offset:0x2E10E90;
	static bool SetCurrentLanguage(const class FString& Culture, bool SaveToConfig)//offset:0x2E10DB0;
	static bool SetCurrentCulture(const class FString& Culture, bool SaveToConfig)//offset:0x2E10CD0;
	static bool SetCurrentAssetGroupCulture(const struct FName& AssetGroup, const class FString& Culture, bool SaveToConfig)//offset:0x2E10BA0;
	static class FString GetSuitableCulture(TArray<class FString> AvailableCultures, const class FString& CultureToMatch, const class FString& FallbackCulture)//offset:0x2E0DBB0;
	static class FString GetNativeCulture(ELocalizedTextSourceCategory TextCategory)//offset:0x2E0D9E0;
	static TArray<class FString> GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional)//offset:0x2E0D7B0;
	static class FString GetCurrentLocale()//offset:0x2E0D600;
	static class FString GetCurrentLanguage()//offset:0x2E0D580;
	static class FString GetCurrentCulture()//offset:0x2E0D580;
	static class FString GetCurrentAssetGroupCulture(const struct FName& AssetGroup)//offset:0x2E0D4B0;
	static class FString GetCultureDisplayName(const class FString& Culture, bool Localized)//offset:0x2E0D390;
	static void ClearCurrentAssetGroupCulture(const struct FName& AssetGroup, bool SaveToConfig)//offset:0x2E0CB30;
};


// Class Engine.KismetMaterialLibrary
// size:0x0000 (0x0028 - 0x0028)
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{
public:

	static void SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, const struct FLinearColor& ParameterValue)//offset:0x2E111A0;
	static void SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, float ParameterValue)//offset:0x2E11050;
	static struct FLinearColor GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName)//offset:0x2E0DE80;
	static float GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName)//offset:0x2E0DAB0;
	static class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent, const struct FName& OptionalName, EMIDCreationFlags CreationFlags)//offset:0x2E0CCD0;
};


// Class Engine.KismetMathLibrary
// size:0x0000 (0x0028 - 0x0028)
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{
public:

	static int Xor_IntInt(int A, int B)//offset:0x2E41450;
	static int64_t Xor_Int64Int64(int64_t A, int64_t B)//offset:0x2E41380;
	static int Wrap(int Value, int Min, int Max)//offset:0x2E41270;
	static struct FVector WeightedMovingAverage_FVector(const struct FVector& CurrentSample, const struct FVector& PreviousSample, float Weight)//offset:0x2E41000;
	static struct FRotator WeightedMovingAverage_FRotator(const struct FRotator& CurrentSample, const struct FRotator& PreviousSample, float Weight)//offset:0x2E40EB0;
	static float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight)//offset:0x2E41150;
	static float VSizeXYSquared(const struct FVector& A)//offset:0x2E3C800;
	static float VSizeXY(const struct FVector& A)//offset:0x2E3C770;
	static float VSizeSquared(const struct FVector& A)//offset:0x2E3C6D0;
	static float VSize2DSquared(const struct FVector2D& A)//offset:0x2E3C5A0;
	static float VSize2D(const struct FVector2D& A)//offset:0x2E3C510;
	static float VSize(const struct FVector& A)//offset:0x2E3C630;
	static struct FVector VLerp(const struct FVector& A, const struct FVector& B, float Alpha)//offset:0x2E3C3D0;
	static struct FVector VInterpTo_Constant(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed)//offset:0x2E3C240;
	static struct FVector VInterpTo(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed)//offset:0x2E3C0B0;
	static struct FVector VectorSpringInterp(const struct FVector& Current, const struct FVector& Target, struct FVectorSpringState* SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass)//offset:0x2E3E160;
	static struct FVector Vector_Zero()//offset:0x2E40E80;
	static struct FVector Vector_Up()//offset:0x2E40E50;
	static void Vector_UnwindEuler(struct FVector* A)//offset:0x2E40DD0;
	static struct FVector2D Vector_UnitCartesianToSpherical(const struct FVector& A)//offset:0x2E40CE0;
	static struct FVector Vector_ToRadians(const struct FVector& A)//offset:0x2E40C40;
	static struct FVector Vector_ToDegrees(const struct FVector& A)//offset:0x2E40BA0;
	static struct FVector Vector_SnappedToGrid(const struct FVector& InVect, float InGridSize)//offset:0x2E409E0;
	static void Vector_Set(struct FVector* A, float X, float Y, float Z)//offset:0x2E40880;
	static struct FVector Vector_Right()//offset:0x2E40850;
	static struct FVector Vector_Reciprocal(const struct FVector& A)//offset:0x2E40760;
	static struct FVector Vector_ProjectOnToNormal(const struct FVector& V, const struct FVector& InNormal)//offset:0x2E40660;
	static struct FVector Vector_One()//offset:0x2E40630;
	static struct FVector Vector_NormalUnsafe(const struct FVector& A)//offset:0x2E40360;
	static void Vector_Normalize(struct FVector* A, float Tolerance)//offset:0x2E404A0;
	static struct FVector Vector_Normal2D(const struct FVector& A, float Tolerance)//offset:0x2E40180;
	static struct FVector Vector_MirrorByPlane(const struct FVector& A, const struct FPlane& InPlane)//offset:0x2E40030;
	static struct FVector Vector_Left()//offset:0x2E40000;
	static bool Vector_IsZero(const struct FVector& A)//offset:0x2E3FF50;
	static bool Vector_IsUnit(const struct FVector& A, float SquaredLenthTolerance)//offset:0x2E3FE30;
	static bool Vector_IsUniform(const struct FVector& A, float Tolerance)//offset:0x2E3FD10;
	static bool Vector_IsNormal(const struct FVector& A)//offset:0x2E3FC40;
	static bool Vector_IsNearlyZero(const struct FVector& A, float Tolerance)//offset:0x2E3FB30;
	static bool Vector_IsNAN(const struct FVector& A)//offset:0x2E3FA60;
	static float Vector_HeadingAngle(const struct FVector& A)//offset:0x2E3F910;
	static struct FVector Vector_GetSignVector(const struct FVector& A)//offset:0x2E3F850;
	static struct FVector Vector_GetProjection(const struct FVector& A)//offset:0x2E3F7B0;
	static float Vector_GetAbsMin(const struct FVector& A)//offset:0x2E3F710;
	static float Vector_GetAbsMax(const struct FVector& A)//offset:0x2E3F670;
	static struct FVector Vector_GetAbs(const struct FVector& A)//offset:0x2E3F5D0;
	static struct FVector Vector_Forward()//offset:0x2E3F5A0;
	static struct FVector Vector_Down()//offset:0x2E3F570;
	static float Vector_DistanceSquared(const struct FVector& v1, const struct FVector& v2)//offset:0x2E3F490;
	static float Vector_Distance2DSquared(const struct FVector& v1, const struct FVector& v2)//offset:0x2E3F2D0;
	static float Vector_Distance2D(const struct FVector& v1, const struct FVector& v2)//offset:0x2E3F200;
	static float Vector_Distance(const struct FVector& v1, const struct FVector& v2)//offset:0x2E3F3A0;
	static float Vector_CosineAngle2D(const struct FVector& A, const struct FVector& B)//offset:0x2E3F000;
	static struct FVector Vector_ComponentMin(const struct FVector& A, const struct FVector& B)//offset:0x2E3EF20;
	static struct FVector Vector_ComponentMax(const struct FVector& A, const struct FVector& B)//offset:0x2E3EE40;
	static struct FVector Vector_ClampSizeMax2D(const struct FVector& A, float Max)//offset:0x2E3EA60;
	static struct FVector Vector_ClampSizeMax(const struct FVector& A, float Max)//offset:0x2E3EC30;
	static struct FVector Vector_ClampSize2D(const struct FVector& A, float Min, float Max)//offset:0x2E3E8A0;
	static struct FVector Vector_BoundedToCube(const struct FVector& InVect, float InRadius)//offset:0x2E3E790;
	static struct FVector Vector_BoundedToBox(const struct FVector& InVect, const struct FVector& InBoxMin, const struct FVector& InBoxMax)//offset:0x2E3E650;
	static struct FVector Vector_Backward()//offset:0x2E3E620;
	static void Vector_Assign(struct FVector* A, const struct FVector& InVector)//offset:0x2E3E540;
	static void Vector_AddBounded(struct FVector* A, const struct FVector& InAddVect, float InRadius)//offset:0x2E3E3D0;
	static struct FVector4 Vector4_Zero()//offset:0x2E3E140;
	static float Vector4_SizeSquared3(const struct FVector4& A)//offset:0x2E3DFB0;
	static float Vector4_SizeSquared(const struct FVector4& A)//offset:0x2E3E070;
	static float Vector4_Size3(const struct FVector4& A)//offset:0x2E3DE20;
	static float Vector4_Size(const struct FVector4& A)//offset:0x2E3DEE0;
	static void Vector4_Set(struct FVector4* A, float X, float Y, float Z, float W)//offset:0x2E3DC70;
	static struct FVector4 Vector4_NormalUnsafe3(const struct FVector4& A)//offset:0x2E3D970;
	static void Vector4_Normalize3(struct FVector4* A, float Tolerance)//offset:0x2E3DAC0;
	static struct FVector4 Vector4_Normal3(const struct FVector4& A, float Tolerance)//offset:0x2E3D7C0;
	static struct FVector4 Vector4_Negated(const struct FVector4& A)//offset:0x2E3D720;
	static struct FVector4 Vector4_MirrorByVector3(const struct FVector4& Direction, const struct FVector4& SurfaceNormal)//offset:0x2E3D590;
	static bool Vector4_IsZero(const struct FVector4& A)//offset:0x2E3D4D0;
	static bool Vector4_IsUnit3(const struct FVector4& A, float SquaredLenthTolerance)//offset:0x2E3D3A0;
	static bool Vector4_IsNormal3(const struct FVector4& A)//offset:0x2E3D2D0;
	static bool Vector4_IsNearlyZero3(const struct FVector4& A, float Tolerance)//offset:0x2E3D1B0;
	static bool Vector4_IsNAN(const struct FVector4& A)//offset:0x2E3D0C0;
	static float Vector4_DotProduct3(const struct FVector4& A, const struct FVector4& B)//offset:0x2E3CE70;
	static float Vector4_DotProduct(const struct FVector4& A, const struct FVector4& B)//offset:0x2E3CF90;
	static struct FVector4 Vector4_CrossProduct3(const struct FVector4& A, const struct FVector4& B)//offset:0x2E3CD10;
	static void Vector4_Assign(struct FVector4* A, const struct FVector4& InVector)//offset:0x2E3CC20;
	static struct FVector2D Vector2DInterpTo_Constant(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed)//offset:0x2E3CA10;
	static struct FVector2D Vector2DInterpTo(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed)//offset:0x2E3C890;
	static struct FVector2D Vector2D_Zero()//offset:0x2E3CBF0;
	static struct FVector2D Vector2D_Unit45Deg()//offset:0x2E3CBC0;
	static struct FVector2D Vector2D_One()//offset:0x2E3CB90;
	static struct FVector VEase(const struct FVector& A, const struct FVector& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)//offset:0x2E3BEA0;
	static struct FDateTime UtcNow()//offset:0x2E3BE60;
	static struct FVector4 TransformVector4(const struct FMatrix& Matrix, const struct FVector4& Vec4)//offset:0x2E3BC60;
	static struct FRotator TransformRotation(const struct FTransform& T, const struct FRotator& Rotation)//offset:0x2E3BB10;
	static struct FVector TransformLocation(const struct FTransform& T, const struct FVector& Location)//offset:0x2E3B970;
	static struct FVector TransformDirection(const struct FTransform& T, const struct FVector& Direction)//offset:0x2E3B7E0;
	static float Transform_Determinant(const struct FTransform& Transform)//offset:0x2E3BD80;
	static struct FVector2D ToSign2D(const struct FVector2D& A)//offset:0x2E3B6E0;
	static struct FVector2D ToRounded2D(const struct FVector2D& A)//offset:0x2E3B5D0;
	static void ToDirectionAndLength2D(const struct FVector2D& A, struct FVector2D* OutDir, float* OutLength)//offset:0x2E3B450;
	static struct FDateTime Today()//offset:0x2E3B790;
	static struct FTransform TLerp(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<ELerpInterpolationMode> InterpMode)//offset:0x2E3AF20;
	static struct FTransform TInterpTo(const struct FTransform& Current, const struct FTransform& Target, float DeltaTime, float InterpSpeed)//offset:0x2E3AD00;
	static struct FTimespan TimespanZeroValue()//offset:0x2E1F9A0;
	static float TimespanRatio(const struct FTimespan& A, const struct FTimespan& B)//offset:0x2E3B370;
	static struct FTimespan TimespanMinValue()//offset:0x2E3B340;
	static struct FTimespan TimespanMaxValue()//offset:0x2E3B310;
	static bool TimespanFromString(const class FString& TimespanString, struct FTimespan* Result)//offset:0x2E3B1D0;
	static struct FTransform TEase(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)//offset:0x2E3AA70;
	static float Tan(float A)//offset:0x2E3B140;
	static struct FVector Subtract_VectorVector(const struct FVector& A, const struct FVector& B)//offset:0x2E3A990;
	static struct FVector Subtract_VectorInt(const struct FVector& A, int B)//offset:0x2E3A8A0;
	static struct FVector Subtract_VectorFloat(const struct FVector& A, float B)//offset:0x2E3A7C0;
	static struct FVector4 Subtract_Vector4Vector4(const struct FVector4& A, const struct FVector4& B)//offset:0x2E3A690;
	static struct FVector2D Subtract_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)//offset:0x2E3A5C0;
	static struct FVector2D Subtract_Vector2DFloat(const struct FVector2D& A, float B)//offset:0x2E3A4F0;
	static struct FTimespan Subtract_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)//offset:0x2E39E50;
	static struct FQuat Subtract_QuatQuat(const struct FQuat& A, const struct FQuat& B)//offset:0x2E3A410;
	static struct FLinearColor Subtract_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B)//offset:0x2E3A320;
	static struct FIntPoint Subtract_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B)//offset:0x2E3A250;
	static struct FIntPoint Subtract_IntPointInt(const struct FIntPoint& A, int B)//offset:0x2E3A170;
	static int Subtract_IntInt(int A, int B)//offset:0x2E3A0B0;
	static int64_t Subtract_Int64Int64(int64_t A, int64_t B)//offset:0x2E39FE0;
	static float Subtract_FloatFloat(float A, float B)//offset:0x2E39F10;
	static struct FDateTime Subtract_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B)//offset:0x2E39E50;
	static struct FTimespan Subtract_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)//offset:0x2E39E50;
	static unsigned char Subtract_ByteByte(unsigned char A, unsigned char B)//offset:0x2E39D90;
	static float Square(float A)//offset:0x2E39D10;
	static float Sqrt(float A)//offset:0x2E39C60;
	static struct FVector Spherical2DToUnitCartesian(const struct FVector2D& A)//offset:0x2E39BB0;
	static float Sin(float A)//offset:0x2E39B20;
	static int64_t SignOfInteger64(int64_t A)//offset:0x2E399D0;
	static int SignOfInteger(int A)//offset:0x2E39A80;
	static float SignOfFloat(float A)//offset:0x2E39900;
	static void SetRandomStreamSeed(struct FRandomStream* Stream, int NewSeed)//offset:0x2E39830;
	static void Set2D(struct FVector2D* A, float X, float Y)//offset:0x2E39720;
	static struct FVector SelectVector(const struct FVector& A, const struct FVector& B, bool bPickA)//offset:0x2E39280;
	static struct FTransform SelectTransform(const struct FTransform& A, const struct FTransform& B, bool bPickA)//offset:0x2E39560;
	static class FString SelectString(const class FString& A, const class FString& B, bool bPickA)//offset:0x2E393C0;
	static struct FRotator SelectRotator(const struct FRotator& A, const struct FRotator& B, bool bPickA)//offset:0x2E39280;
	static class UObject* SelectObject(class UObject* A, class UObject* B, bool bSelectA)//offset:0x2E38E40;
	static int SelectInt(int A, int B, bool bPickA)//offset:0x2E39180;
	static float SelectFloat(float A, float B, bool bPickA)//offset:0x2E39060;
	static struct FLinearColor SelectColor(const struct FLinearColor& A, const struct FLinearColor& B, bool bPickA)//offset:0x2E38F40;
	static class UObject* SelectClass(class UObject* A, class UObject* B, bool bSelectA)//offset:0x2E38E40;
	static void SeedRandomStream(struct FRandomStream* Stream)//offset:0x2E38DC0;
	static float SafeDivide(float A, float B)//offset:0x2E38CF0;
	static int64_t Round64(float A)//offset:0x2E38B90;
	static int Round(float A)//offset:0x2E38C60;
	static struct FRotator RotatorFromAxisAndAngle(const struct FVector& Axis, float Angle)//offset:0x2E38AA0;
	static struct FVector RotateAngleAxis(const struct FVector& InVect, float AngleDeg, const struct FVector& Axis)//offset:0x2E38950;
	static struct FRotator RLerp(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath)//offset:0x2E36CE0;
	static struct FRotator RInterpTo_Constant(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed)//offset:0x2E36B50;
	static struct FRotator RInterpTo(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed)//offset:0x2E369C0;
	static void RGBToHSV_Vector(const struct FLinearColor& RGB, struct FLinearColor* HSV)//offset:0x2E368E0;
	static void RGBToHSV(const struct FLinearColor& InColor, float* H, float* S, float* V, float* A)//offset:0x2E366F0;
	static struct FLinearColor RGBLinearToHSV(const struct FLinearColor& RGB)//offset:0x2E36660;
	static void ResetVectorSpringState(struct FVectorSpringState* SpringState)//offset:0x2E388B0;
	static void ResetRandomStream(const struct FRandomStream& Stream)//offset:0x2E38830;
	static void ResetFloatSpringState(struct FFloatSpringState* SpringState)//offset:0x2E387A0;
	static struct FRotator REase(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)//offset:0x2E36410;
	static struct FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(const struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, const struct FRandomStream& Stream)//offset:0x2E38610;
	static struct FVector RandomUnitVectorInEllipticalConeInRadians(const struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians)//offset:0x2E384E0;
	static struct FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, const struct FRandomStream& Stream)//offset:0x2E38340;
	static struct FVector RandomUnitVectorInEllipticalConeInDegrees(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees)//offset:0x2E38200;
	static struct FVector RandomUnitVectorInConeInRadiansFromStream(const struct FVector& ConeDir, float ConeHalfAngleInRadians, const struct FRandomStream& Stream)//offset:0x2E380D0;
	static struct FVector RandomUnitVectorInConeInRadians(const struct FVector& ConeDir, float ConeHalfAngleInRadians)//offset:0x2E37FE0;
	static struct FVector RandomUnitVectorInConeInDegreesFromStream(const struct FVector& ConeDir, float ConeHalfAngleInDegrees, const struct FRandomStream& Stream)//offset:0x2E37EA0;
	static struct FVector RandomUnitVectorInConeInDegrees(const struct FVector& ConeDir, float ConeHalfAngleInDegrees)//offset:0x2E37DB0;
	static struct FVector RandomUnitVectorFromStream(const struct FRandomStream& Stream)//offset:0x2E37D10;
	static struct FVector RandomUnitVector()//offset:0x2E37CD0;
	static struct FRotator RandomRotatorFromStream(bool bRoll, const struct FRandomStream& Stream)//offset:0x2E37BE0;
	static struct FRotator RandomRotator(bool bRoll)//offset:0x2E37B40;
	static struct FVector RandomPointInBoundingBox(const struct FVector& Origin, const struct FVector& BoxExtent)//offset:0x2E37A00;
	static int RandomIntegerInRangeFromStream(int Min, int Max, const struct FRandomStream& Stream)//offset:0x2E378F0;
	static int RandomIntegerInRange(int Min, int Max)//offset:0x2E377E0;
	static int RandomIntegerFromStream(int Max, const struct FRandomStream& Stream)//offset:0x2E37710;
	static int64_t RandomInteger64InRange(int64_t Min, int64_t Max)//offset:0x2E37530;
	static int64_t RandomInteger64(int64_t Max)//offset:0x2E37460;
	static int RandomInteger(int Max)//offset:0x2E37650;
	static float RandomFloatInRangeFromStream(float Min, float Max, const struct FRandomStream& Stream)//offset:0x2E37340;
	static float RandomFloatInRange(float Min, float Max)//offset:0x2E37240;
	static float RandomFloatFromStream(const struct FRandomStream& Stream)//offset:0x2E371B0;
	static float RandomFloat()//offset:0x2E37170;
	static bool RandomBoolWithWeightFromStream(float Weight, const struct FRandomStream& RandomStream)//offset:0x2E37090;
	static bool RandomBoolWithWeight(float Weight)//offset:0x2E37010;
	static bool RandomBoolFromStream(const struct FRandomStream& Stream)//offset:0x2E36F80;
	static bool RandomBool()//offset:0x2E36F20;
	static float RadiansToDegrees(float A)//offset:0x2E36E90;
	static struct FVector Quat_VectorUp(const struct FQuat& Q)//offset:0x2E350A0;
	static struct FVector Quat_VectorRight(const struct FQuat& Q)//offset:0x2E34FB0;
	static struct FVector Quat_VectorForward(const struct FQuat& Q)//offset:0x2E34EB0;
	static struct FVector Quat_UnrotateVector(const struct FQuat& Q, const struct FVector& V)//offset:0x2E361F0;
	static float Quat_SizeSquared(const struct FQuat& Q)//offset:0x2E36130;
	static float Quat_Size(const struct FQuat& Q)//offset:0x2E36070;
	static void Quat_SetFromEuler(struct FQuat* Q, const struct FVector& Euler)//offset:0x2E35F90;
	static void Quat_SetComponents(struct FQuat* Q, float X, float Y, float Z, float W)//offset:0x2E35DE0;
	static struct FRotator Quat_Rotator(const struct FQuat& Q)//offset:0x2E35D40;
	static struct FVector Quat_RotateVector(const struct FQuat& Q, const struct FVector& V)//offset:0x2E35B30;
	static struct FQuat Quat_Normalized(const struct FQuat& Q, float Tolerance)//offset:0x2E359D0;
	static void Quat_Normalize(struct FQuat* Q, float Tolerance)//offset:0x2E35880;
	static struct FQuat Quat_MakeFromEuler(const struct FVector& Euler)//offset:0x2E357E0;
	static struct FQuat Quat_Log(const struct FQuat& Q)//offset:0x2E35740;
	static bool Quat_IsNormalized(const struct FQuat& Q)//offset:0x2E35670;
	static bool Quat_IsNonFinite(const struct FQuat& Q)//offset:0x2E35590;
	static bool Quat_IsIdentity(const struct FQuat& Q, float Tolerance)//offset:0x2E35470;
	static bool Quat_IsFinite(const struct FQuat& Q)//offset:0x2E35390;
	static struct FQuat Quat_Inversed(const struct FQuat& Q)//offset:0x2E35300;
	static struct FQuat Quat_Identity()//offset:0x2E352E0;
	static struct FVector Quat_GetRotationAxis(const struct FQuat& Q)//offset:0x2E351B0;
	static struct FVector Quat_GetAxisZ(const struct FQuat& Q)//offset:0x2E350A0;
	static struct FVector Quat_GetAxisY(const struct FQuat& Q)//offset:0x2E34FB0;
	static struct FVector Quat_GetAxisX(const struct FQuat& Q)//offset:0x2E34EB0;
	static float Quat_GetAngle(const struct FQuat& Q)//offset:0x2E34E00;
	static struct FQuat Quat_Exp(const struct FQuat& Q)//offset:0x2E34D60;
	static struct FVector Quat_Euler(const struct FQuat& Q)//offset:0x2E34CC0;
	static void Quat_EnforceShortestArcWith(struct FQuat* A, const struct FQuat& B)//offset:0x2E34B80;
	static float Quat_AngularDistance(const struct FQuat& A, const struct FQuat& B)//offset:0x2E34A40;
	static struct FVector ProjectVectorOnToVector(const struct FVector& V, const struct FVector& Target)//offset:0x2E348D0;
	static struct FVector ProjectVectorOnToPlane(const struct FVector& V, const struct FVector& PlaneNormal)//offset:0x2E34790;
	static struct FVector ProjectPointOnToPlane(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNormal)//offset:0x2E34600;
	static bool PointsAreCoplanar(TArray<struct FVector> Points, float Tolerance)//offset:0x2E34500;
	static float PerlinNoise1D(float Value)//offset:0x2E34470;
	static int Percent_IntInt(int A, int B)//offset:0x2E34390;
	static float Percent_FloatFloat(float A, float B)//offset:0x2E34210;
	static unsigned char Percent_ByteByte(unsigned char A, unsigned char B)//offset:0x2E34130;
	static int Or_IntInt(int A, int B)//offset:0x2E34070;
	static int64_t Or_Int64Int64(int64_t A, int64_t B)//offset:0x2E33FA0;
	static struct FDateTime Now()//offset:0x2E33F60;
	static bool NotEqualExactly_VectorVector(const struct FVector& A, const struct FVector& B)//offset:0x2E32BB0;
	static bool NotEqualExactly_Vector4Vector4(const struct FVector4& A, const struct FVector4& B)//offset:0x2E32A80;
	static bool NotEqualExactly_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)//offset:0x2E329B0;
	static bool NotEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance)//offset:0x2E33C70;
	static bool NotEqual_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, float ErrorTolerance)//offset:0x2E33AE0;
	static bool NotEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance)//offset:0x2E339B0;
	static bool NotEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)//offset:0x2E32F00;
	static bool NotEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance)//offset:0x2E337C0;
	static bool NotEqual_QuatQuat(const struct FQuat& A, const struct FQuat& B, float ErrorTolerance)//offset:0x2E33660;
	static bool NotEqual_ObjectObject(class UObject* A, class UObject* B)//offset:0x2E32E30;
	static bool NotEqual_NameName(const struct FName& A, const struct FName& B)//offset:0x2E33590;
	static bool NotEqual_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, float Tolerance)//offset:0x2E33400;
	static bool NotEqual_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B)//offset:0x2E33310;
	static bool NotEqual_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B)//offset:0x2E33240;
	static bool NotEqual_IntInt(int A, int B)//offset:0x2E33170;
	static bool NotEqual_Int64Int64(int64_t A, int64_t B)//offset:0x2E330A0;
	static bool NotEqual_FloatFloat(float A, float B)//offset:0x2E32FC0;
	static bool NotEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)//offset:0x2E32F00;
	static bool NotEqual_ClassClass(class UObject* A, class UObject* B)//offset:0x2E32E30;
	static bool NotEqual_ByteByte(unsigned char A, unsigned char B)//offset:0x2E32D70;
	static bool NotEqual_BoolBool(bool A, bool B)//offset:0x2E32C90;
	static bool Not_PreBool(bool A)//offset:0x2E33ED0;
	static int64_t Not_Int64(int64_t A)//offset:0x2E33DC0;
	static int Not_Int(int A)//offset:0x2E33E50;
	static struct FVector2D NormalSafe2D(const struct FVector2D& A, float Tolerance)//offset:0x2E32430;
	static float NormalizeToRange(float Value, float RangeMin, float RangeMax)//offset:0x2E32790;
	static struct FRotator NormalizedDeltaRotator(const struct FRotator& A, const struct FRotator& B)//offset:0x2E328B0;
	static float NormalizeAxis(float Angle)//offset:0x2E32700;
	static void Normalize2D(struct FVector2D* A, float Tolerance)//offset:0x2E32580;
	static struct FVector2D Normal2D(const struct FVector2D& A)//offset:0x2E32140;
	static struct FVector Normal(const struct FVector& A, float Tolerance)//offset:0x2E32250;
	static struct FVector NegateVector(const struct FVector& A)//offset:0x2E32000;
	static struct FRotator NegateRotator(const struct FRotator& A)//offset:0x2E31F60;
	static struct FVector2D Negated2D(const struct FVector2D& A)//offset:0x2E320A0;
	static bool NearlyEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance)//offset:0x2E31D30;
	static bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance)//offset:0x2E31C10;
	static float MultiplyMultiply_FloatFloat(float Base, float Exp)//offset:0x2E308B0;
	static float MultiplyByPi(float Value)//offset:0x2E30820;
	static struct FVector Multiply_VectorVector(const struct FVector& A, const struct FVector& B)//offset:0x2E31B30;
	static struct FVector Multiply_VectorInt(const struct FVector& A, int B)//offset:0x2E316A0;
	static struct FVector Multiply_VectorFloat(const struct FVector& A, float B)//offset:0x2E315C0;
	static struct FVector4 Multiply_Vector4Vector4(const struct FVector4& A, const struct FVector4& B)//offset:0x2E31A00;
	static struct FVector2D Multiply_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)//offset:0x2E31930;
	static struct FVector2D Multiply_Vector2DFloat(const struct FVector2D& A, float B)//offset:0x2E31860;
	static struct FTimespan Multiply_TimespanFloat(const struct FTimespan& A, float Scalar)//offset:0x2E31790;
	static struct FRotator Multiply_RotatorInt(const struct FRotator& A, int B)//offset:0x2E316A0;
	static struct FRotator Multiply_RotatorFloat(const struct FRotator& A, float B)//offset:0x2E315C0;
	static struct FQuat Multiply_QuatQuat(const struct FQuat& A, const struct FQuat& B)//offset:0x2E31480;
	static struct FMatrix Multiply_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B)//offset:0x2E31270;
	static struct FMatrix Multiply_MatrixFloat(const struct FMatrix& A, float B)//offset:0x2E310F0;
	static struct FLinearColor Multiply_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B)//offset:0x2E31000;
	static struct FLinearColor Multiply_LinearColorFloat(const struct FLinearColor& A, float B)//offset:0x2E30F30;
	static struct FIntPoint Multiply_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B)//offset:0x2E30E50;
	static struct FIntPoint Multiply_IntPointInt(const struct FIntPoint& A, int B)//offset:0x2E30D70;
	static int Multiply_IntInt(int A, int B)//offset:0x2E30CB0;
	static float Multiply_IntFloat(int A, float B)//offset:0x2E30BE0;
	static int64_t Multiply_Int64Int64(int64_t A, int64_t B)//offset:0x2E30B10;
	static float Multiply_FloatFloat(float A, float B)//offset:0x2E30A40;
	static unsigned char Multiply_ByteByte(unsigned char A, unsigned char B)//offset:0x2E30980;
	static struct FVector MirrorVectorByNormal(const struct FVector& InVect, const struct FVector& InNormal)//offset:0x2E25C10;
	static void MinOfIntArray(TArray<int> IntArray, int* IndexOfMinValue, int* MinValue)//offset:0x2E30420;
	static void MinOfFloatArray(TArray<float> FloatArray, int* IndexOfMinValue, float* MinValue)//offset:0x2E302E0;
	static void MinOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMinValue, unsigned char* MinValue)//offset:0x2E301A0;
	static int64_t MinInt64(int64_t A, int64_t B)//offset:0x2E300D0;
	static void MinimumAreaRectangle(class UObject* WorldContextObject, TArray<struct FVector> InVerts, const struct FVector& SampleSurfaceNormal, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY, bool bDebugDraw)//offset:0x2E30560;
	static int Min(int A, int B)//offset:0x2E30000;
	static void MaxOfIntArray(TArray<int> IntArray, int* IndexOfMaxValue, int* MaxValue)//offset:0x2E2FEC0;
	static void MaxOfFloatArray(TArray<float> FloatArray, int* IndexOfMaxValue, float* MaxValue)//offset:0x2E2FD80;
	static void MaxOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMaxValue, unsigned char* MaxValue)//offset:0x2E2FC40;
	static int64_t MaxInt64(int64_t A, int64_t B)//offset:0x2E2FB70;
	static int Max(int A, int B)//offset:0x2E2FAA0;
	static struct FVector4 Matrix_TransformVector4(const struct FMatrix& M, const struct FVector4& V)//offset:0x2E2F840;
	static struct FVector4 Matrix_TransformVector(const struct FMatrix& M, const struct FVector& V)//offset:0x2E2F960;
	static struct FVector4 Matrix_TransformPosition(const struct FMatrix& M, const struct FVector& V)//offset:0x2E2F700;
	static struct FQuat Matrix_ToQuat(const struct FMatrix& M)//offset:0x2E2F660;
	static void Matrix_SetOrigin(struct FMatrix* M, const struct FVector& NewOrigin)//offset:0x2E2F580;
	static void Matrix_SetColumn(struct FMatrix* M, TEnumAsByte<EMatrixColumns> Column, const struct FVector& Value)//offset:0x2E2F450;
	static void Matrix_SetAxis(struct FMatrix* M, TEnumAsByte<EAxis> Axis, const struct FVector& AxisVector)//offset:0x2E2F310;
	static struct FMatrix Matrix_ScaleTranslation(const struct FMatrix& M, const struct FVector& Scale3D)//offset:0x2E2F1D0;
	static struct FMatrix Matrix_RemoveTranslation(const struct FMatrix& M)//offset:0x2E2F110;
	static void Matrix_RemoveScaling(struct FMatrix* M, float Tolerance)//offset:0x2E2F030;
	static struct FMatrix Matrix_Mirror(const struct FMatrix& M, TEnumAsByte<EAxis> MirrorAxis, TEnumAsByte<EAxis> FlipAxis)//offset:0x2E2EEB0;
	static struct FVector Matrix_InverseTransformVector(const struct FMatrix& M, const struct FVector& V)//offset:0x2E2ED50;
	static struct FVector Matrix_InverseTransformPosition(const struct FMatrix& M, const struct FVector& V)//offset:0x2E2EBF0;
	static struct FMatrix Matrix_Identity()//offset:0x2E2EBA0;
	static struct FVector Matrix_GetUnitAxis(const struct FMatrix& M, TEnumAsByte<EAxis> Axis)//offset:0x2E2EAA0;
	static void Matrix_GetUnitAxes(const struct FMatrix& M, struct FVector* X, struct FVector* Y, struct FVector* Z)//offset:0x2E2E910;
	static struct FMatrix Matrix_GetTransposed(const struct FMatrix& M)//offset:0x2E2E720;
	static struct FMatrix Matrix_GetTransposeAdjoint(const struct FMatrix& M)//offset:0x2E2E660;
	static struct FVector Matrix_GetScaleVector(const struct FMatrix& M, float Tolerance)//offset:0x2E2E260;
	static struct FVector Matrix_GetScaledAxis(const struct FMatrix& M, TEnumAsByte<EAxis> Axis)//offset:0x2E2E520;
	static void Matrix_GetScaledAxes(const struct FMatrix& M, struct FVector* X, struct FVector* Y, struct FVector* Z)//offset:0x2E2E370;
	static float Matrix_GetRotDeterminant(const struct FMatrix& M)//offset:0x2E2E150;
	static struct FRotator Matrix_GetRotator(const struct FMatrix& M)//offset:0x2E1E770;
	static struct FVector Matrix_GetOrigin(const struct FMatrix& InMatrix)//offset:0x2E2E0B0;
	static float Matrix_GetMaximumAxisScale(const struct FMatrix& M)//offset:0x2E2E020;
	static struct FMatrix Matrix_GetMatrixWithoutScale(const struct FMatrix& M, float Tolerance)//offset:0x2E2DEE0;
	static struct FMatrix Matrix_GetInverse(const struct FMatrix& M)//offset:0x2E2DE20;
	static bool Matrix_GetFrustumTopPlane(const struct FMatrix& M, struct FPlane* OutPlane)//offset:0x2E2DC30;
	static bool Matrix_GetFrustumRightPlane(const struct FMatrix& M, struct FPlane* OutPlane)//offset:0x2E2DA40;
	static bool Matrix_GetFrustumNearPlane(const struct FMatrix& M, struct FPlane* OutPlane)//offset:0x2E2D890;
	static bool Matrix_GetFrustumLeftPlane(const struct FMatrix& M, struct FPlane* OutPlane)//offset:0x2E2D6A0;
	static bool Matrix_GetFrustumFarPlane(const struct FMatrix& M, struct FPlane* OutPlane)//offset:0x2E2D4B0;
	static bool Matrix_GetFrustumBottomPlane(const struct FMatrix& M, struct FPlane* OutPlane)//offset:0x2E2D2C0;
	static float Matrix_GetDeterminant(const struct FMatrix& M)//offset:0x2E2D230;
	static struct FVector Matrix_GetColumn(const struct FMatrix& M, TEnumAsByte<EMatrixColumns> Column)//offset:0x2E2D130;
	static bool Matrix_ContainsNaN(const struct FMatrix& M)//offset:0x2E2D0A0;
	static struct FMatrix Matrix_ConcatenateTranslation(const struct FMatrix& M, const struct FVector& Translation)//offset:0x2E2CF50;
	static struct FMatrix Matrix_ApplyScale(const struct FMatrix& M, float Scale)//offset:0x2E2CCE0;
	static float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB)//offset:0x2E2CB30;
	static float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB)//offset:0x2E2C980;
	static struct FVector4 MakeVector4(float X, float Y, float Z, float W)//offset:0x2E2AE30;
	static struct FVector2D MakeVector2D(float X, float Y)//offset:0x2E2C790;
	static struct FVector MakeVector(float X, float Y, float Z)//offset:0x2E2C860;
	static struct FTransform MakeTransform(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale)//offset:0x2E2C5F0;
	static struct FTimespan MakeTimespan2(int Days, int Hours, int Minutes, int Seconds, int FractionNano)//offset:0x2E2C2D0;
	static struct FTimespan MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds)//offset:0x2E2C460;
	static struct FRotator MakeRotFromZY(const struct FVector& Z, const struct FVector& Y)//offset:0x2E2BF50;
	static struct FRotator MakeRotFromZX(const struct FVector& Z, const struct FVector& X)//offset:0x2E2BE40;
	static struct FRotator MakeRotFromZ(const struct FVector& Z)//offset:0x2E2BD80;
	static struct FRotator MakeRotFromYZ(const struct FVector& Y, const struct FVector& Z)//offset:0x2E2BC70;
	static struct FRotator MakeRotFromYX(const struct FVector& Y, const struct FVector& X)//offset:0x2E2BB60;
	static struct FRotator MakeRotFromY(const struct FVector& Y)//offset:0x2E2BAA0;
	static struct FRotator MakeRotFromXZ(const struct FVector& X, const struct FVector& Z)//offset:0x2E2B990;
	static struct FRotator MakeRotFromXY(const struct FVector& X, const struct FVector& Y)//offset:0x2E2B880;
	static struct FRotator MakeRotFromX(const struct FVector& X)//offset:0x2E2B7C0;
	static struct FRotator MakeRotator(float Roll, float Pitch, float Yaw)//offset:0x2E2C1B0;
	static struct FRotator MakeRotationFromAxes(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up)//offset:0x2E2C060;
	static struct FTransform MakeRelativeTransform(const struct FTransform& A, const struct FTransform& RelativeTo)//offset:0x2E2B630;
	static struct FRandomStream MakeRandomStream(int InitialSeed)//offset:0x2E2B5A0;
	static struct FQualifiedFrameTime MakeQualifiedFrameTime(const struct FFrameNumber& Frame, const struct FFrameRate& FrameRate, float SubFrame)//offset:0x2E2B480;
	static float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase)//offset:0x2E2B360;
	static struct FPlane MakePlaneFromPointAndNormal(const struct FVector& Point, const struct FVector& Normal)//offset:0x2E2B270;
	static struct FFrameRate MakeFrameRate(int Numerator, int Denominator)//offset:0x2E2B1B0;
	static struct FDateTime MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond)//offset:0x2E2AFA0;
	static struct FLinearColor MakeColor(float R, float G, float B, float A)//offset:0x2E2AE30;
	static struct FBox2D MakeBox2D(const struct FVector2D& Min, const struct FVector2D& Max)//offset:0x2E2AC60;
	static struct FBox MakeBox(const struct FVector& Min, const struct FVector& Max)//offset:0x2E2AD40;
	static float Loge(float A)//offset:0x2E2ABD0;
	static float Log(float A, float Base)//offset:0x2E2AB00;
	static bool LinePlaneIntersection_OriginNormal(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& PlaneOrigin, const struct FVector& PlaneNormal, float* T, struct FVector* Intersection)//offset:0x2E29650;
	static bool LinePlaneIntersection(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FPlane& APlane, float* T, struct FVector* Intersection)//offset:0x2E29460;
	static struct FLinearColor LinearColorLerpUsingHSV(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha)//offset:0x2E299E0;
	static struct FLinearColor LinearColorLerp(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha)//offset:0x2E29880;
	static struct FLinearColor LinearColor_Yellow()//offset:0x2E2AAE0;
	static struct FLinearColor LinearColor_White()//offset:0x2E2AAC0;
	static struct FLinearColor LinearColor_Transparent()//offset:0x2E2AAA0;
	static struct FColor LinearColor_ToRGBE(const struct FLinearColor& InLinearColor)//offset:0x2E2AA10;
	static struct FLinearColor LinearColor_ToNewOpacity(const struct FLinearColor& InColor, float InOpacity)//offset:0x2E2A930;
	static void LinearColor_SetTemperature(struct FLinearColor* InOutColor, float InTemperature)//offset:0x2E2A850;
	static void LinearColor_SetRGBA(struct FLinearColor* InOutColor, float R, float G, float B, float A)//offset:0x2E2A610;
	static void LinearColor_SetRandomHue(struct FLinearColor* InOutColor)//offset:0x2E2A7C0;
	static void LinearColor_SetFromSRGB(struct FLinearColor* InOutColor, const struct FColor& InSRGB)//offset:0x2E2A530;
	static void LinearColor_SetFromPow22(struct FLinearColor* InOutColor, const struct FColor& InColor)//offset:0x2E2A450;
	static void LinearColor_SetFromHSV(struct FLinearColor* InOutColor, float H, float S, float V, float A)//offset:0x2E2A2A0;
	static void LinearColor_Set(struct FLinearColor* InOutColor, const struct FLinearColor& InColor)//offset:0x2E2A1D0;
	static struct FLinearColor LinearColor_Red()//offset:0x2E2A1B0;
	static struct FColor LinearColor_QuantizeRound(const struct FLinearColor& InColor)//offset:0x2E2A120;
	static struct FColor LinearColor_Quantize(const struct FLinearColor& InColor)//offset:0x2E2A090;
	static bool LinearColor_IsNearEqual(const struct FLinearColor& A, const struct FLinearColor& B, float Tolerance)//offset:0x2E29F30;
	static struct FLinearColor LinearColor_Green()//offset:0x2E29F10;
	static struct FLinearColor LinearColor_Gray()//offset:0x2E29EF0;
	static float LinearColor_GetMin(const struct FLinearColor& InColor)//offset:0x2E29E60;
	static float LinearColor_GetMax(const struct FLinearColor& InColor)//offset:0x2E29DD0;
	static float LinearColor_GetLuminance(const struct FLinearColor& InColor)//offset:0x2E29D30;
	static float LinearColor_Distance(const struct FLinearColor& C1, const struct FLinearColor& C2)//offset:0x2E29C30;
	static struct FLinearColor LinearColor_Desaturated(const struct FLinearColor& InColor, float InDesaturation)//offset:0x2E29B50;
	static struct FLinearColor LinearColor_Blue()//offset:0x2E29B30;
	static struct FLinearColor LinearColor_Black()//offset:0x2E29B10;
	static struct FVector LessLess_VectorRotator(const struct FVector& A, const struct FRotator& B)//offset:0x2E28F70;
	static bool LessEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)//offset:0x2E28C40;
	static bool LessEqual_IntInt(int A, int B)//offset:0x2E28EA0;
	static bool LessEqual_Int64Int64(int64_t A, int64_t B)//offset:0x2E28DD0;
	static bool LessEqual_FloatFloat(float A, float B)//offset:0x2E28D00;
	static bool LessEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)//offset:0x2E28C40;
	static bool LessEqual_ByteByte(unsigned char A, unsigned char B)//offset:0x2E28B80;
	static bool Less_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)//offset:0x2E29130;
	static bool Less_IntInt(int A, int B)//offset:0x2E29390;
	static bool Less_Int64Int64(int64_t A, int64_t B)//offset:0x2E292C0;
	static bool Less_FloatFloat(float A, float B)//offset:0x2E291F0;
	static bool Less_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)//offset:0x2E29130;
	static bool Less_ByteByte(unsigned char A, unsigned char B)//offset:0x2E29070;
	static float Lerp(float A, float B, float Alpha)//offset:0x2E28A60;
	static bool IsZero2D(const struct FVector2D& A)//offset:0x2E289B0;
	static bool IsPointInBoxWithTransform(const struct FVector& Point, const struct FTransform& BoxWorldTransform, const struct FVector& BoxExtent)//offset:0x2E28820;
	static bool IsPointInBox(const struct FVector& Point, const struct FVector& BoxOrigin, const struct FVector& BoxExtent)//offset:0x2E286E0;
	static bool IsNearlyZero2D(const struct FVector2D& A, float Tolerance)//offset:0x2E285E0;
	static bool IsMorning(const struct FDateTime& A)//offset:0x2E28530;
	static bool IsLeapYear(int Year)//offset:0x2E284A0;
	static bool IsAfternoon(const struct FDateTime& A)//offset:0x2E283F0;
	static struct FTransform InvertTransform(const struct FTransform& T)//offset:0x2E281E0;
	static struct FRotator InverseTransformRotation(const struct FTransform& T, const struct FRotator& Rotation)//offset:0x2E28090;
	static struct FVector InverseTransformLocation(const struct FTransform& T, const struct FVector& Location)//offset:0x2E27E90;
	static struct FVector InverseTransformDirection(const struct FTransform& T, const struct FVector& Direction)//offset:0x2E27CF0;
	static struct FIntPoint IntPoint_Zero()//offset:0x2E27CC0;
	static struct FIntPoint IntPoint_Up()//offset:0x2E27C90;
	static struct FIntPoint IntPoint_Right()//offset:0x2E27C70;
	static struct FIntPoint IntPoint_One()//offset:0x2E27C40;
	static struct FIntPoint IntPoint_Left()//offset:0x2E27C10;
	static struct FIntPoint IntPoint_Down()//offset:0x2E27BE0;
	static bool InRange_IntInt(int Value, int Min, int Max, bool InclusiveMin, bool InclusiveMax)//offset:0x2E27A40;
	static bool InRange_Int64Int64(int64_t Value, int64_t Min, int64_t Max, bool InclusiveMin, bool InclusiveMax)//offset:0x2E278A0;
	static bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax)//offset:0x2E276F0;
	static float Hypotenuse(float Width, float Height)//offset:0x2E27620;
	static struct FLinearColor HSVToRGBLinear(const struct FLinearColor& HSV)//offset:0x2E274B0;
	static void HSVToRGB_Vector(const struct FLinearColor& HSV, struct FLinearColor* RGB)//offset:0x2E27540;
	static struct FLinearColor HSVToRGB(float H, float S, float V, float A)//offset:0x2E27320;
	static float GridSnap_Float(float Location, float GridSize)//offset:0x2E271F0;
	static struct FVector GreaterGreater_VectorRotator(const struct FVector& A, const struct FRotator& B)//offset:0x2E26D00;
	static bool GreaterEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)//offset:0x2E269D0;
	static bool GreaterEqual_IntInt(int A, int B)//offset:0x2E26C30;
	static bool GreaterEqual_Int64Int64(int64_t A, int64_t B)//offset:0x2E26B60;
	static bool GreaterEqual_FloatFloat(float A, float B)//offset:0x2E26A90;
	static bool GreaterEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)//offset:0x2E269D0;
	static bool GreaterEqual_ByteByte(unsigned char A, unsigned char B)//offset:0x2E26910;
	static bool Greater_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)//offset:0x2E26EC0;
	static bool Greater_IntInt(int A, int B)//offset:0x2E27120;
	static bool Greater_Int64Int64(int64_t A, int64_t B)//offset:0x2E27050;
	static bool Greater_FloatFloat(float A, float B)//offset:0x2E26F80;
	static bool Greater_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)//offset:0x2E26EC0;
	static bool Greater_ByteByte(unsigned char A, unsigned char B)//offset:0x2E26E00;
	static int GetYear(const struct FDateTime& A)//offset:0x2E26890;
	static void GetYawPitchFromVector(const struct FVector& InVec, float* Yaw, float* Pitch)//offset:0x2E26760;
	static struct FVector GetVectorArrayAverage(TArray<struct FVector> Vectors)//offset:0x2E266A0;
	static struct FVector GetUpVector(const struct FRotator& InRot)//offset:0x2E26600;
	static float GetTotalSeconds(const struct FTimespan& A)//offset:0x2E26570;
	static float GetTotalMinutes(const struct FTimespan& A)//offset:0x2E264E0;
	static float GetTotalMilliseconds(const struct FTimespan& A)//offset:0x2E26450;
	static float GetTotalHours(const struct FTimespan& A)//offset:0x2E263C0;
	static float GetTotalDays(const struct FTimespan& A)//offset:0x2E26330;
	static struct FTimespan GetTimeOfDay(const struct FDateTime& A)//offset:0x2E262B0;
	static float GetTAU()//offset:0x2E26290;
	static void GetSlopeDegreeAngles(const struct FVector& MyRightYAxis, const struct FVector& FloorNormal, const struct FVector& UpVector, float* OutSlopePitchDegreeAngle, float* OutSlopeRollDegreeAngle)//offset:0x2E260B0;
	static int GetSeconds(const struct FTimespan& A)//offset:0x2E25FF0;
	static int GetSecond(const struct FDateTime& A)//offset:0x2E25FF0;
	static struct FVector2D GetRotated2D(const struct FVector2D& A, float AngleDeg)//offset:0x2E25DB0;
	static struct FVector GetRightVector(const struct FRotator& InRot)//offset:0x2E25D10;
	static struct FVector GetReflectionVector(const struct FVector& Direction, const struct FVector& SurfaceNormal)//offset:0x2E25C10;
	static float GetPointDistanceToSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd)//offset:0x2E25AD0;
	static float GetPointDistanceToLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection)//offset:0x2E25990;
	static float GetPI()//offset:0x2E25970;
	static int GetMonth(const struct FDateTime& A)//offset:0x2E258F0;
	static int GetMinutes(const struct FTimespan& A)//offset:0x2E25840;
	static int GetMinute(const struct FDateTime& A)//offset:0x2E25840;
	static float GetMinElement(const struct FVector& A)//offset:0x2E257C0;
	static float GetMin2D(const struct FVector2D& A)//offset:0x2E25740;
	static int GetMilliseconds(const struct FTimespan& A)//offset:0x2E25680;
	static int GetMillisecond(const struct FDateTime& A)//offset:0x2E255D0;
	static float GetMaxElement(const struct FVector& A)//offset:0x2E25550;
	static float GetMax2D(const struct FVector2D& A)//offset:0x2E254D0;
	static int GetHours(const struct FTimespan& A)//offset:0x2E25420;
	static int GetHour12(const struct FDateTime& A)//offset:0x2E253A0;
	static int GetHour(const struct FDateTime& A)//offset:0x2E25420;
	static struct FVector GetForwardVector(const struct FRotator& InRot)//offset:0x2E25300;
	static struct FTimespan GetDuration(const struct FTimespan& A)//offset:0x2E25280;
	static struct FVector GetDirectionUnitVector(const struct FVector& From, const struct FVector& To)//offset:0x2E250B0;
	static int GetDays(const struct FTimespan& A)//offset:0x2E25030;
	static int GetDayOfYear(const struct FDateTime& A)//offset:0x2E24FB0;
	static int GetDay(const struct FDateTime& A)//offset:0x2E24F30;
	static struct FDateTime GetDate(const struct FDateTime& A)//offset:0x2E24EA0;
	static void GetAzimuthAndElevation(const struct FVector& InDirection, const struct FTransform& ReferenceFrame, float* Azimuth, float* Elevation)//offset:0x2E24CC0;
	static void GetAxes(const struct FRotator& A, struct FVector* X, struct FVector* Y, struct FVector* Z)//offset:0x2E24B40;
	static float GetAbsMax2D(const struct FVector2D& A)//offset:0x2E24AB0;
	static struct FVector2D GetAbs2D(const struct FVector2D& A)//offset:0x2E24A20;
	static float FWrap(float Value, float Min, float Max)//offset:0x2E23C20;
	static struct FIntVector FTruncVector(const struct FVector& InVector)//offset:0x2E23B80;
	static int64_t FTrunc64(float A)//offset:0x2E23A80;
	static int FTrunc(float A)//offset:0x2E23B00;
	static struct FTimespan FromSeconds(float Seconds)//offset:0x2E24990;
	static struct FTimespan FromMinutes(float Minutes)//offset:0x2E24900;
	static struct FTimespan FromMilliseconds(float Milliseconds)//offset:0x2E24870;
	static struct FTimespan FromHours(float Hours)//offset:0x2E247E0;
	static struct FTimespan FromDays(float Days)//offset:0x2E24750;
	static float Fraction(float A)//offset:0x2E246B0;
	static int FMod(float Dividend, float Divisor, float* Remainder)//offset:0x2E23960;
	static float FMin(float A, float B)//offset:0x2E23890;
	static float FMax(float A, float B)//offset:0x2E237C0;
	static float FloatSpringInterp(float Current, float Target, struct FFloatSpringState* SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass)//offset:0x2E24480;
	static float FixedTurn(float InCurrent, float InDesired, float InDeltaRate)//offset:0x2E24360;
	static float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed)//offset:0x2E23660;
	static float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed)//offset:0x2E23500;
	static float FInterpEaseInOut(float A, float B, float Alpha, float Exponent)//offset:0x2E233A0;
	static void FindNearestPointsOnLineSegments(const struct FVector& Segment1Start, const struct FVector& Segment1End, const struct FVector& Segment2Start, const struct FVector& Segment2End, struct FVector* Segment1Point, struct FVector* Segment2Point)//offset:0x2E24140;
	static struct FRotator FindLookAtRotation(const struct FVector& Start, const struct FVector& Target)//offset:0x2E24000;
	static struct FVector FindClosestPointOnSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd)//offset:0x2E23EB0;
	static struct FVector FindClosestPointOnLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection)//offset:0x2E23D60;
	static int64_t FFloor64(float A)//offset:0x2E23250;
	static int FFloor(float A)//offset:0x2E23310;
	static float FClamp(float Value, float Min, float Max)//offset:0x2E23130;
	static int64_t FCeil64(float A)//offset:0x2E22FC0;
	static int FCeil(float A)//offset:0x2E23090;
	static float Exp(float A)//offset:0x2E22F30;
	static bool EqualExactly_VectorVector(const struct FVector& A, const struct FVector& B)//offset:0x2E22D80;
	static bool EqualExactly_Vector4Vector4(const struct FVector4& A, const struct FVector4& B)//offset:0x2E22C50;
	static bool EqualExactly_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)//offset:0x2E22B80;
	static bool EqualEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance)//offset:0x2E22A30;
	static bool EqualEqual_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, float ErrorTolerance)//offset:0x2E228A0;
	static bool EqualEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance)//offset:0x2E22770;
	static bool EqualEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B)//offset:0x2E225F0;
	static bool EqualEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)//offset:0x2E21C10;
	static bool EqualEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance)//offset:0x2E22400;
	static bool EqualEqual_QuatQuat(const struct FQuat& A, const struct FQuat& B, float Tolerance)//offset:0x2E222A0;
	static bool EqualEqual_ObjectObject(class UObject* A, class UObject* B)//offset:0x2E21B40;
	static bool EqualEqual_NameName(const struct FName& A, const struct FName& B)//offset:0x2E221D0;
	static bool EqualEqual_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, float Tolerance)//offset:0x2E22040;
	static bool EqualEqual_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B)//offset:0x2E21F50;
	static bool EqualEqual_IntInt(int A, int B)//offset:0x2E21E80;
	static bool EqualEqual_Int64Int64(int64_t A, int64_t B)//offset:0x2E21DB0;
	static bool EqualEqual_FloatFloat(float A, float B)//offset:0x2E21CD0;
	static bool EqualEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)//offset:0x2E21C10;
	static bool EqualEqual_ClassClass(class UObject* A, class UObject* B)//offset:0x2E21B40;
	static bool EqualEqual_ByteByte(unsigned char A, unsigned char B)//offset:0x2E21A80;
	static bool EqualEqual_BoolBool(bool A, bool B)//offset:0x2E219A0;
	static bool Equal_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B)//offset:0x2E22E60;
	static float Ease(float A, float B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)//offset:0x2E217C0;
	static struct FVector DynamicWeightedMovingAverage_FVector(const struct FVector& CurrentSample, const struct FVector& PreviousSample, float MaxDistance, float MinWeight, float MaxWeight)//offset:0x2E21450;
	static struct FRotator DynamicWeightedMovingAverage_FRotator(const struct FRotator& CurrentSample, const struct FRotator& PreviousSample, float MaxDistance, float MinWeight, float MaxWeight)//offset:0x2E21290;
	static float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight)//offset:0x2E21610;
	static float DotProduct2D(const struct FVector2D& A, const struct FVector2D& B)//offset:0x2E210E0;
	static float Dot_VectorVector(const struct FVector& A, const struct FVector& B)//offset:0x2E211B0;
	static struct FVector Divide_VectorVector(const struct FVector& A, const struct FVector& B)//offset:0x2E20FB0;
	static struct FVector Divide_VectorInt(const struct FVector& A, int B)//offset:0x2E20E70;
	static struct FVector Divide_VectorFloat(const struct FVector& A, float B)//offset:0x2E20D30;
	static struct FVector4 Divide_Vector4Vector4(const struct FVector4& A, const struct FVector4& B)//offset:0x2E20C00;
	static struct FVector2D Divide_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)//offset:0x2E20B00;
	static struct FVector2D Divide_Vector2DFloat(const struct FVector2D& A, float B)//offset:0x2E209E0;
	static struct FTimespan Divide_TimespanFloat(const struct FTimespan& A, float Scalar)//offset:0x2E20910;
	static struct FLinearColor Divide_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B)//offset:0x2E20820;
	static struct FIntPoint Divide_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B)//offset:0x2E20720;
	static struct FIntPoint Divide_IntPointInt(const struct FIntPoint& A, int B)//offset:0x2E20620;
	static int Divide_IntInt(int A, int B)//offset:0x2E20540;
	static int64_t Divide_Int64Int64(int64_t A, int64_t B)//offset:0x2E20450;
	static float Divide_FloatFloat(float A, float B)//offset:0x2E202D0;
	static unsigned char Divide_ByteByte(unsigned char A, unsigned char B)//offset:0x2E201F0;
	static float DistanceSquared2D(const struct FVector2D& v1, const struct FVector2D& v2)//offset:0x2E20120;
	static float Distance2D(const struct FVector2D& v1, const struct FVector2D& v2)//offset:0x2E20050;
	static float DegTan(float A)//offset:0x2E1FF30;
	static float DegSin(float A)//offset:0x2E1FEA0;
	static float DegreesToRadians(float A)//offset:0x2E1FFC0;
	static float DegCos(float A)//offset:0x2E1FE10;
	static float DegAtan2(float Y, float X)//offset:0x2E1FCA0;
	static float DegAtan(float A)//offset:0x2E1FD80;
	static float DegAsin(float A)//offset:0x2E1FBF0;
	static float DegAcos(float A)//offset:0x2E1FB40;
	static int DaysInYear(int Year)//offset:0x2E1FAB0;
	static int DaysInMonth(int Year, int Month)//offset:0x2E1F9C0;
	static struct FDateTime DateTimeMinValue()//offset:0x2E1F9A0;
	static struct FDateTime DateTimeMaxValue()//offset:0x2E1F970;
	static bool DateTimeFromString(const class FString& DateTimeString, struct FDateTime* Result)//offset:0x2E1F830;
	static bool DateTimeFromIsoString(const class FString& IsoString, struct FDateTime* Result)//offset:0x2E1F6E0;
	static float CrossProduct2D(const struct FVector2D& A, const struct FVector2D& B)//offset:0x2E1F4F0;
	static struct FVector Cross_VectorVector(const struct FVector& A, const struct FVector& B)//offset:0x2E1F5C0;
	static struct FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length)//offset:0x2E1F3C0;
	static float Cos(float A)//offset:0x2E1F330;
	static struct FTransform ConvertTransformToRelative(const struct FTransform& Transform, const struct FTransform& ParentTransform)//offset:0x2E1F1A0;
	static struct FVector2D Conv_VectorToVector2D(const struct FVector& InVector)//offset:0x2E1F120;
	static struct FTransform Conv_VectorToTransform(const struct FVector& InLocation)//offset:0x2E1F080;
	static struct FRotator Conv_VectorToRotator(const struct FVector& InVec)//offset:0x2E1EFE0;
	static struct FQuat Conv_VectorToQuaternion(const struct FVector& InVec)//offset:0x2E1EF40;
	static struct FLinearColor Conv_VectorToLinearColor(const struct FVector& InVec)//offset:0x2E1EEA0;
	static struct FVector Conv_Vector4ToVector(const struct FVector4& InVector4)//offset:0x2E1EDF0;
	static struct FRotator Conv_Vector4ToRotator(const struct FVector4& InVec)//offset:0x2E1ED40;
	static struct FQuat Conv_Vector4ToQuaternion(const struct FVector4& InVec)//offset:0x2E1ECA0;
	static struct FVector Conv_Vector2DToVector(const struct FVector2D& InVector2D, float Z)//offset:0x2E1EBD0;
	static struct FIntPoint Conv_Vector2DToIntPoint(const struct FVector2D& InVector2D)//offset:0x2E1EB20;
	static struct FMatrix Conv_TransformToMatrix(const struct FTransform& Transform)//offset:0x2E1EA10;
	static struct FVector Conv_RotatorToVector(const struct FRotator& InRot)//offset:0x2E1E970;
	static struct FTransform Conv_RotatorToTransform(const struct FRotator& InRotator)//offset:0x2E1E8C0;
	static struct FTransform Conv_MatrixToTransform(const struct FMatrix& InMatrix)//offset:0x2E1E810;
	static struct FRotator Conv_MatrixToRotator(const struct FMatrix& InMatrix)//offset:0x2E1E770;
	static struct FVector Conv_LinearColorToVector(const struct FLinearColor& InLinearColor)//offset:0x2E1E6E0;
	static struct FColor Conv_LinearColorToColor(const struct FLinearColor& InLinearColor, bool InUseSRGB)//offset:0x2E1E600;
	static struct FVector Conv_IntVectorToVector(const struct FIntVector& InIntVector)//offset:0x2E1E540;
	static struct FIntVector Conv_IntToIntVector(int inInt)//offset:0x2E1E4B0;
	static int64_t Conv_IntToInt64(int inInt)//offset:0x2E1E430;
	static float Conv_IntToFloat(int inInt)//offset:0x2E1E3A0;
	static unsigned char Conv_IntToByte(int inInt)//offset:0x2E1E320;
	static bool Conv_IntToBool(int inInt)//offset:0x2E1E290;
	static struct FVector2D Conv_IntPointToVector2D(const struct FIntPoint& InIntPoint)//offset:0x2E1E200;
	static int Conv_Int64ToInt(int64_t inInt)//offset:0x2E1E180;
	static unsigned char Conv_Int64ToByte(int64_t inInt)//offset:0x2E1E100;
	static struct FVector Conv_FloatToVector(float InFloat)//offset:0x2E1E070;
	static struct FLinearColor Conv_FloatToLinearColor(float InFloat)//offset:0x2E1DFE0;
	static struct FLinearColor Conv_ColorToLinearColor(const struct FColor& InColor)//offset:0x2E1DF50;
	static int Conv_ByteToInt(unsigned char InByte)//offset:0x2E1DED0;
	static float Conv_ByteToFloat(unsigned char InByte)//offset:0x2E1DE50;
	static int Conv_BoolToInt(bool InBool)//offset:0x2E1DDC0;
	static float Conv_BoolToFloat(bool InBool)//offset:0x2E1DD30;
	static unsigned char Conv_BoolToByte(bool InBool)//offset:0x2E1DCA0;
	static struct FTransform ComposeTransforms(const struct FTransform& A, const struct FTransform& B)//offset:0x2E1DB10;
	static struct FRotator ComposeRotators(const struct FRotator& A, const struct FRotator& B)//offset:0x2E1DA10;
	static bool ClassIsChildOf(class UObject* TestClass, class UObject* ParentClass)//offset:0x2E1D940;
	static struct FVector ClampVectorSize(const struct FVector& A, float Min, float Max)//offset:0x2E1D770;
	static int64_t ClampInt64(int64_t Value, int64_t Min, int64_t Max)//offset:0x2E1D660;
	static float ClampAxis(float Angle)//offset:0x2E1D5D0;
	static struct FVector2D ClampAxes2D(const struct FVector2D& A, float MinAxisVal, float MaxAxisVal)//offset:0x2E1D4A0;
	static float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees)//offset:0x2E1D380;
	static int Clamp(int Value, int Min, int Max)//offset:0x2E1D280;
	static struct FLinearColor CInterpTo(const struct FLinearColor& Current, const struct FLinearColor& Target, float DeltaTime, float InterpSpeed)//offset:0x2E1D0F0;
	static void BreakVector4(const struct FVector4& InVec, float* X, float* Y, float* Z, float* W)//offset:0x2E1CD80;
	static void BreakVector2D(const struct FVector2D& InVec, float* X, float* Y)//offset:0x2E1CC50;
	static void BreakVector(const struct FVector& InVec, float* X, float* Y, float* Z)//offset:0x2E1CF70;
	static void BreakTransform(const struct FTransform& InTransform, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale)//offset:0x2E1CA20;
	static void BreakTimespan2(const struct FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* Seconds, int* FractionNano)//offset:0x2E1C5C0;
	static void BreakTimespan(const struct FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* Seconds, int* Milliseconds)//offset:0x2E1C7F0;
	static void BreakRotIntoAxes(const struct FRotator& InRot, struct FVector* X, struct FVector* Y, struct FVector* Z)//offset:0x2E1C2C0;
	static void BreakRotator(const struct FRotator& InRot, float* Roll, float* Pitch, float* Yaw)//offset:0x2E1C440;
	static void BreakRandomStream(const struct FRandomStream& InRandomStream, int* InitialSeed)//offset:0x2E1C1E0;
	static void BreakQualifiedFrameTime(const struct FQualifiedFrameTime& InFrameTime, struct FFrameNumber* Frame, struct FFrameRate* FrameRate, float* SubFrame)//offset:0x2E1C040;
	static void BreakFrameRate(const struct FFrameRate& InFrameRate, int* Numerator, int* Denominator)//offset:0x2E1BF10;
	static void BreakDateTime(const struct FDateTime& InDateTime, int* Year, int* Month, int* Day, int* Hour, int* Minute, int* Second, int* Millisecond)//offset:0x2E1BC60;
	static void BreakColor(const struct FLinearColor& InColor, float* R, float* G, float* B, float* A)//offset:0x2E1BA80;
	static bool BooleanXOR(bool A, bool B)//offset:0x2E1B9B0;
	static bool BooleanOR(bool A, bool B)//offset:0x2E1B8D0;
	static bool BooleanNOR(bool A, bool B)//offset:0x2E1B7F0;
	static bool BooleanNAND(bool A, bool B)//offset:0x2E1B710;
	static bool BooleanAND(bool A, bool B)//offset:0x2E1B630;
	static unsigned char BMin(unsigned char A, unsigned char B)//offset:0x2E1B560;
	static unsigned char BMax(unsigned char A, unsigned char B)//offset:0x2E1B490;
	static float Atan2(float Y, float X)//offset:0x2E1B330;
	static float Atan(float A)//offset:0x2E1B400;
	static float Asin(float A)//offset:0x2E1B290;
	static int And_IntInt(int A, int B)//offset:0x2E1B1D0;
	static int64_t And_Int64Int64(int64_t A, int64_t B)//offset:0x2E1B100;
	static struct FVector Add_VectorVector(const struct FVector& A, const struct FVector& B)//offset:0x2E1B020;
	static struct FVector Add_VectorInt(const struct FVector& A, int B)//offset:0x2E1AF30;
	static struct FVector Add_VectorFloat(const struct FVector& A, float B)//offset:0x2E1AE50;
	static struct FVector4 Add_Vector4Vector4(const struct FVector4& A, const struct FVector4& B)//offset:0x2E1AD20;
	static struct FVector2D Add_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)//offset:0x2E1AC50;
	static struct FVector2D Add_Vector2DFloat(const struct FVector2D& A, float B)//offset:0x2E1AB80;
	static struct FTimespan Add_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)//offset:0x2E1A350;
	static struct FQuat Add_QuatQuat(const struct FQuat& A, const struct FQuat& B)//offset:0x2E1AAA0;
	static struct FMatrix Add_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B)//offset:0x2E1A910;
	static struct FLinearColor Add_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B)//offset:0x2E1A820;
	static struct FIntPoint Add_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B)//offset:0x2E1A750;
	static struct FIntPoint Add_IntPointInt(const struct FIntPoint& A, int B)//offset:0x2E1A670;
	static int Add_IntInt(int A, int B)//offset:0x2E1A5B0;
	static int64_t Add_Int64Int64(int64_t A, int64_t B)//offset:0x2E1A4E0;
	static float Add_FloatFloat(float A, float B)//offset:0x2E1A410;
	static struct FDateTime Add_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B)//offset:0x2E1A350;
	static struct FDateTime Add_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)//offset:0x2E1A350;
	static unsigned char Add_ByteByte(unsigned char A, unsigned char B)//offset:0x2E1A290;
	static float Acos(float A)//offset:0x2E1A1F0;
	static int64_t Abs_Int64(int64_t A)//offset:0x2E1A0D0;
	static int Abs_Int(int A)//offset:0x2E1A160;
	static float Abs(float A)//offset:0x2E1A040;
};


// Class Engine.KismetNodeHelperLibrary
// size:0x0000 (0x0028 - 0x0028)
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{
public:

	static void MarkBit(int* Data, int Index)//offset:0x2E48430;
	static bool HasUnmarkedBit(int Data, int NumBits)//offset:0x2E47860;
	static bool HasMarkedBit(int Data, int NumBits)//offset:0x2E47790;
	static unsigned char GetValidValue(class UEnum* Enum, unsigned char EnumeratorValue)//offset:0x2E476C0;
	static int GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom)//offset:0x2E47580;
	static int GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits)//offset:0x2E47320;
	static int GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits)//offset:0x2E47220;
	static unsigned char GetEnumeratorValueFromIndex(class UEnum* Enum, unsigned char EnumeratorIndex)//offset:0x2E47150;
	static class FString GetEnumeratorUserFriendlyName(class UEnum* Enum, unsigned char EnumeratorValue)//offset:0x2E47040;
	static struct FName GetEnumeratorName(class UEnum* Enum, unsigned char EnumeratorValue)//offset:0x2E46F70;
	static void ClearBit(int* Data, int Index)//offset:0x2E444F0;
	static void ClearAllBits(int* Data)//offset:0x2E44470;
	static bool BitIsMarked(int Data, int Index)//offset:0x2E42DC0;
};


// Class Engine.KismetRenderingLibrary
// size:0x0000 (0x0028 - 0x0028)
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
{
public:

	static void SetCastInsetShadowForAllAttachments(class UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup)//offset:0x2E498E0;
	static class UTexture2D* RenderTargetCreateStaticTexture2DEditorOnly(class UTextureRenderTarget2D* RenderTarget, const class FString& Name, TEnumAsByte<ETextureCompressionSettings> CompressionSettings, TEnumAsByte<ETextureMipGenSettings> MipSettings)//offset:0x2E48FA0;
	static void ReleaseRenderTarget2D(class UTextureRenderTarget2D* TextureRenderTarget)//offset:0x2E48F20;
	static struct FColor ReadRenderTargetUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V)//offset:0x2E48DD0;
	static struct FLinearColor ReadRenderTargetRawUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V)//offset:0x2E48C60;
	static struct FLinearColor ReadRenderTargetRawPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int X, int Y)//offset:0x2E48AF0;
	static struct FColor ReadRenderTargetPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int X, int Y)//offset:0x2E489A0;
	static struct FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int Bone0, unsigned char Weight0, int Bone1, unsigned char Weight1, int Bone2, unsigned char Weight2, int Bone3, unsigned char Weight3)//offset:0x2E481B0;
	static class UTexture2D* ImportFileAsTexture2D(class UObject* WorldContextObject, const class FString& Filename)//offset:0x2E47A20;
	static class UTexture2D* ImportBufferAsTexture2D(class UObject* WorldContextObject, TArray<unsigned char> Buffer)//offset:0x2E47930;
	static void ExportTexture2D(class UObject* WorldContextObject, class UTexture2D* Texture, const class FString& FilePath, const class FString& Filename)//offset:0x2E46A80;
	static void ExportRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const class FString& FilePath, const class FString& Filename)//offset:0x2E46910;
	static void EndDrawCanvasToRenderTarget(class UObject* WorldContextObject, const struct FDrawToRenderTargetContext& Context)//offset:0x2E46520;
	static void DrawMaterialToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material)//offset:0x2E46420;
	static class UTextureRenderTargetVolume* CreateRenderTargetVolume(class UObject* WorldContextObject, int Width, int Height, int Depth, TEnumAsByte<ETextureRenderTargetFormat> Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps)//offset:0x2E460E0;
	static class UTextureRenderTarget2DArray* CreateRenderTarget2DArray(class UObject* WorldContextObject, int Width, int Height, int Slices, TEnumAsByte<ETextureRenderTargetFormat> Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps)//offset:0x2E45ED0;
	static class UTextureRenderTarget2D* CreateRenderTarget2D(class UObject* WorldContextObject, int Width, int Height, TEnumAsByte<ETextureRenderTargetFormat> Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps)//offset:0x2E45D00;
	static void ConvertRenderTargetToTexture2DEditorOnly(class UObject* WorldContextObject, class UTextureRenderTarget2D* RenderTarget, class UTexture2D* Texture)//offset:0x2E45C00;
	static void ClearRenderTarget2D(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FLinearColor& ClearColor)//offset:0x2E445C0;
	static void BreakSkinWeightInfo(const struct FSkelMeshSkinWeightInfo& InWeight, int* Bone0, unsigned char* Weight0, int* Bone1, unsigned char* Weight1, int* Bone2, unsigned char* Weight2, int* Bone3, unsigned char* Weight3)//offset:0x2E42E90;
	static void BeginDrawCanvasToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UCanvas** Canvas, struct FVector2D* Size, struct FDrawToRenderTargetContext* Context)//offset:0x2E42C00;
};


// Class Engine.KismetStringLibrary
// size:0x0000 (0x0028 - 0x0028)
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{
public:

	static class FString TrimTrailing(const class FString& SourceString)//offset:0x2E4A0E0;
	static class FString Trim(const class FString& SourceString)//offset:0x2E4A000;
	static class FString ToUpper(const class FString& SourceString)//offset:0x2E49F20;
	static class FString ToLower(const class FString& SourceString)//offset:0x2E49E40;
	static class FString TimeSecondsToString(float InSeconds)//offset:0x2E49D70;
	static bool StartsWith(const class FString& SourceString, const class FString& InPrefix, TEnumAsByte<ESearchCase> SearchCase)//offset:0x2E49C30;
	static bool Split(const class FString& SourceString, const class FString& InStr, class FString* LeftS, class FString* RightS, TEnumAsByte<ESearchCase> SearchCase, TEnumAsByte<ESearchDir> SearchDir)//offset:0x2E499F0;
	static class FString RightPad(const class FString& SourceString, int ChCount)//offset:0x2E497C0;
	static class FString RightChop(const class FString& SourceString, int Count)//offset:0x2E496A0;
	static class FString Right(const class FString& SourceString, int Count)//offset:0x2E49580;
	static class FString Reverse(const class FString& SourceString)//offset:0x2E494A0;
	static int ReplaceInline(class FString* SourceString, const class FString& SearchText, const class FString& ReplacementText, TEnumAsByte<ESearchCase> SearchCase)//offset:0x2E49300;
	static class FString Replace(const class FString& SourceString, const class FString& From, const class FString& To, TEnumAsByte<ESearchCase> SearchCase)//offset:0x2E49130;
	static TArray<class FString> ParseIntoArray(const class FString& SourceString, const class FString& Delimiter, bool CullEmptyStrings)//offset:0x2E48820;
	static bool NotEqual_StrStr(const class FString& A, const class FString& B)//offset:0x2E48640;
	static bool NotEqual_StriStri(const class FString& A, const class FString& B)//offset:0x2E48730;
	static class FString Mid(const class FString& SourceString, int Start, int Count)//offset:0x2E47420;
	static bool MatchesWildcard(const class FString& SourceString, const class FString& Wildcard, TEnumAsByte<ESearchCase> SearchCase)//offset:0x2E48500;
	static int Len(const class FString& S)//offset:0x2E48110;
	static class FString LeftPad(const class FString& SourceString, int ChCount)//offset:0x2E47FF0;
	static class FString LeftChop(const class FString& SourceString, int Count)//offset:0x2E47ED0;
	static class FString Left(const class FString& SourceString, int Count)//offset:0x2E47DB0;
	static class FString JoinStringArray(TArray<class FString> SourceArray, const class FString& Separator)//offset:0x2E47C40;
	static bool IsNumeric(const class FString& SourceString)//offset:0x2E47BA0;
	static bool IsEmpty(const class FString& inString)//offset:0x2E47B00;
	static class FString GetSubstring(const class FString& SourceString, int StartIndex, int Length)//offset:0x2E47420;
	static int GetCharacterAsNumber(const class FString& SourceString, int Index)//offset:0x2E46E90;
	static TArray<class FString> GetCharacterArrayFromString(const class FString& SourceString)//offset:0x2E46DB0;
	static int FindSubstring(const class FString& SearchIn, const class FString& Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition)//offset:0x2E46BF0;
	static bool EqualEqual_StrStr(const class FString& A, const class FString& B)//offset:0x2E46730;
	static bool EqualEqual_StriStri(const class FString& A, const class FString& B)//offset:0x2E46820;
	static bool EndsWith(const class FString& SourceString, const class FString& InSuffix, TEnumAsByte<ESearchCase> SearchCase)//offset:0x2E465F0;
	static int CullArray(const class FString& SourceString, TArray<class FString>* inArray)//offset:0x2E462F0;
	static class FString Conv_VectorToString(const struct FVector& InVec)//offset:0x2E45B20;
	static class FString Conv_Vector2dToString(const struct FVector2D& InVec)//offset:0x2E45A60;
	static class FString Conv_TransformToString(const struct FTransform& InTrans)//offset:0x2E45940;
	static void Conv_StringToVector2D(const class FString& inString, struct FVector2D* OutConvertedVector2D, bool* OutIsValid)//offset:0x2E456E0;
	static void Conv_StringToVector(const class FString& inString, struct FVector* OutConvertedVector, bool* OutIsValid)//offset:0x2E45810;
	static void Conv_StringToRotator(const class FString& inString, struct FRotator* OutConvertedRotator, bool* OutIsValid)//offset:0x2E455B0;
	static struct FName Conv_StringToName(const class FString& inString)//offset:0x2E45500;
	static int Conv_StringToInt(const class FString& inString)//offset:0x2E45460;
	static float Conv_StringToFloat(const class FString& inString)//offset:0x2E453C0;
	static void Conv_StringToColor(const class FString& inString, struct FLinearColor* OutConvertedColor, bool* OutIsValid)//offset:0x2E45290;
	static class FString Conv_RotatorToString(const struct FRotator& InRot)//offset:0x2E451B0;
	static class FString Conv_ObjectToString(class UObject* InObj)//offset:0x2E450E0;
	static class FString Conv_NameToString(const struct FName& InName)//offset:0x2E45010;
	static class FString Conv_MatrixToString(const struct FMatrix& InMatrix)//offset:0x2E44F40;
	static class FString Conv_IntVectorToString(const struct FIntVector& InIntVec)//offset:0x2E44E60;
	static class FString Conv_IntToString(int inInt)//offset:0x2E44D90;
	static class FString Conv_IntPointToString(const struct FIntPoint& InIntPoint)//offset:0x2E44CD0;
	static class FString Conv_FloatToString(float InFloat)//offset:0x2E44C00;
	static class FString Conv_ColorToString(const struct FLinearColor& InColor)//offset:0x2E44B30;
	static class FString Conv_ByteToString(unsigned char InByte)//offset:0x2E44A60;
	static class FString Conv_BoolToString(bool InBool)//offset:0x2E44990;
	static bool Contains(const class FString& SearchIn, const class FString& Substring, bool bUseCase, bool bSearchFromEnd)//offset:0x2E44810;
	static class FString Concat_StrStr(const class FString& A, const class FString& B)//offset:0x2E446D0;
	static class FString BuildString_Vector2d(const class FString& AppendTo, const class FString& Prefix, const struct FVector2D& InVector2D, const class FString& Suffix)//offset:0x2E440C0;
	static class FString BuildString_Vector(const class FString& AppendTo, const class FString& Prefix, const struct FVector& InVector, const class FString& Suffix)//offset:0x2E44290;
	static class FString BuildString_Rotator(const class FString& AppendTo, const class FString& Prefix, const struct FRotator& InRot, const class FString& Suffix)//offset:0x2E43EE0;
	static class FString BuildString_Object(const class FString& AppendTo, const class FString& Prefix, class UObject* InObj, const class FString& Suffix)//offset:0x2E43D10;
	static class FString BuildString_Name(const class FString& AppendTo, const class FString& Prefix, const struct FName& InName, const class FString& Suffix)//offset:0x2E43B40;
	static class FString BuildString_IntVector(const class FString& AppendTo, const class FString& Prefix, const struct FIntVector& InIntVector, const class FString& Suffix)//offset:0x2E43960;
	static class FString BuildString_Int(const class FString& AppendTo, const class FString& Prefix, int inInt, const class FString& Suffix)//offset:0x2E43790;
	static class FString BuildString_Float(const class FString& AppendTo, const class FString& Prefix, float InFloat, const class FString& Suffix)//offset:0x2E435C0;
	static class FString BuildString_Color(const class FString& AppendTo, const class FString& Prefix, const struct FLinearColor& InColor, const class FString& Suffix)//offset:0x2E433E0;
	static class FString BuildString_Bool(const class FString& AppendTo, const class FString& Prefix, bool InBool, const class FString& Suffix)//offset:0x2E43210;
};


// Class Engine.KismetStringTableLibrary
// size:0x0000 (0x0028 - 0x0028)
class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
{
public:

	static bool IsRegisteredTableId(const struct FName& TableId)//offset:0x2E580F0;
	static bool IsRegisteredTableEntry(const struct FName& TableId, const class FString& Key)//offset:0x2E58010;
	static class FString GetTableNamespace(const struct FName& TableId)//offset:0x2E57C90;
	static class FString GetTableEntrySourceString(const struct FName& TableId, const class FString& Key)//offset:0x2E57B70;
	static class FString GetTableEntryMetaData(const struct FName& TableId, const class FString& Key, const struct FName& MetaDataId)//offset:0x2E57A00;
	static TArray<struct FName> GetRegisteredStringTables()//offset:0x2E57600;
	static TArray<struct FName> GetMetaDataIdsFromStringTableEntry(const struct FName& TableId, const class FString& Key)//offset:0x2E56830;
	static TArray<class FString> GetKeysFromStringTable(const struct FName& TableId)//offset:0x2E56760;
};


// Class Engine.KismetSystemLibrary
// size:0x0000 (0x0028 - 0x0028)
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{
public:

	static void UnregisterForRemoteNotifications()//offset:0x2E5D6E0;
	static void UnloadPrimaryAssetList(TArray<struct FPrimaryAssetId> PrimaryAssetIdList)//offset:0x2E61300;
	static void UnloadPrimaryAsset(const struct FPrimaryAssetId& PrimaryAssetId)//offset:0x2E61270;
	static void TransactObject(class UObject* Object)//offset:0xF7BB40;
	static void StackTrace()//offset:0x2E61250;
	static bool SphereTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E60DA0;
	static bool SphereTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E60910;
	static bool SphereTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E60480;
	static bool SphereTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E60010;
	static bool SphereTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E5FBC0;
	static bool SphereTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E5F770;
	static bool SphereOverlapComponents(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UObject* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)//offset:0x2E5F4E0;
	static bool SphereOverlapActors(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UObject* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)//offset:0x2E5F250;
	static void SnapshotObject(class UObject* Object)//offset:0xF7BB40;
	static void ShowPlatformSpecificLeaderboardScreen(const class FString& CategoryName)//offset:0x2E5F1C0;
	static void ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer)//offset:0x2E5F140;
	static void ShowInterstitialAd()//offset:0x2E5F120;
	static void ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen)//offset:0x2E5F060;
	static void SetWindowTitle(const struct FText& Title)//offset:0x2E5EFA0;
	static void SetVolumeButtonsHandledBySystem(bool bEnabled)//offset:0x2E525B0;
	static void SetVectorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FVector& Value)//offset:0x2E5EE90;
	static void SetUserActivity(const struct FUserActivity& UserActivity)//offset:0x2E5EDF0;
	static void SetTransformPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FTransform& Value)//offset:0x2E5ECA0;
	static void SetTextPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FText& Value)//offset:0x2E5EB50;
	static void SetSuppressViewportTransitionMessage(class UObject* WorldContextObject, bool bState)//offset:0x2E5EA90;
	static void SetStructurePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FGenericStruct& Value)//offset:0x2E5DB60;
	static void SetStringPropertyByName(class UObject* Object, const struct FName& PropertyName, const class FString& Value)//offset:0x2E5E970;
	static void SetSoftObjectPropertyByName(class UObject* Object, const struct FName& PropertyName)//offset:0x2E5E830;
	static void SetSoftClassPropertyByName(class UObject* Object, const struct FName& PropertyName)//offset:0x2E5E6F0;
	static void SetRotatorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FRotator& Value)//offset:0x2E5E5E0;
	static void SetObjectPropertyByName(class UObject* Object, const struct FName& PropertyName, class UObject* Value)//offset:0x2E5E4E0;
	static void SetNamePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FName& Value)//offset:0x2E5E3D0;
	static void SetLinearColorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FLinearColor& Value)//offset:0x2E5E2C0;
	static void SetIntPropertyByName(class UObject* Object, const struct FName& PropertyName, int Value)//offset:0x2E5E0B0;
	static void SetInterfacePropertyByName(class UObject* Object, const struct FName& PropertyName, const TScriptInterface<class UInterface>& Value)//offset:0x2E5E1B0;
	static void SetInt64PropertyByName(class UObject* Object, const struct FName& PropertyName, int64_t Value)//offset:0x2E5DFB0;
	static void SetGamepadsBlockDeviceFeedback(bool bBlock)//offset:0x2E525B0;
	static void SetFloatPropertyByName(class UObject* Object, const struct FName& PropertyName, float Value)//offset:0x2E5DEA0;
	static void SetFieldPathPropertyByName(class UObject* Object, const struct FName& PropertyName, const TFieldPath<Field>& Value)//offset:0x2E5DD70;
	static void SetColorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FColor& Value)//offset:0x2E5DC60;
	static void SetCollisionProfileNameProperty(class UObject* Object, const struct FName& PropertyName, const struct FCollisionProfileName& Value)//offset:0x2E5DB60;
	static void SetClassPropertyByName(class UObject* Object, const struct FName& PropertyName, class UObject* Value)//offset:0x2E5DA60;
	static void SetBytePropertyByName(class UObject* Object, const struct FName& PropertyName, unsigned char Value)//offset:0x2E5D960;
	static void SetBoolPropertyByName(class UObject* Object, const struct FName& PropertyName, bool Value)//offset:0x2E5D860;
	static void RetriggerableDelay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo)//offset:0x2E5D720;
	static void ResetGamepadAssignmentToController(int ControllerId)//offset:0xD670F0;
	static void ResetGamepadAssignments()//offset:0x2E5D700;
	static void RegisterForRemoteNotifications()//offset:0x2E5D6E0;
	static void QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, TEnumAsByte<EQuitPreference> QuitPreference, bool bIgnorePlatformRestrictions)//offset:0x2E5D590;
	static void PrintWarning(const class FString& inString)//offset:0x2E5D500;
	static void PrintText(class UObject* WorldContextObject, const struct FText& InText, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration)//offset:0x2E5D2B0;
	static void PrintString(class UObject* WorldContextObject, const class FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration)//offset:0x2E5D0B0;
	static bool ParseParamValue(const class FString& inString, const class FString& InParam, class FString* OutValue)//offset:0x2E5CF50;
	static bool ParseParam(const class FString& inString, const class FString& InParam)//offset:0x2E5CE60;
	static void ParseCommandLine(const class FString& InCmdLine, TArray<class FString>* OutTokens, TArray<class FString>* OutSwitches, TMap<class FString, class FString>* OutParams)//offset:0x2E5CBF0;
	void OnAssetLoaded__DelegateSignature(class UObject* Loaded)//offset:0x13CEB30;
	void OnAssetClassLoaded__DelegateSignature(class UObject* Loaded)//offset:0x13CEB30;
	static bool NotEqual_SoftObjectReference()//offset:0x2E5CAA0;
	static bool NotEqual_SoftClassReference()//offset:0x2E5CAA0;
	static bool NotEqual_PrimaryAssetType(const struct FPrimaryAssetType& A, const struct FPrimaryAssetType& B)//offset:0x257CF10;
	static bool NotEqual_PrimaryAssetId(const struct FPrimaryAssetId& A, const struct FPrimaryAssetId& B)//offset:0x2E5C9B0;
	static class FString NormalizeFilename(const class FString& InFilename)//offset:0x2E5C8D0;
	static void MoveComponentTo(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, TEnumAsByte<EMoveComponentAction> MoveAction, const struct FLatentActionInfo& LatentInfo)//offset:0x2E5C5E0;
	static struct FSoftObjectPath MakeSoftObjectPath(const class FString& PathString)//offset:0x2E5C4F0;
	static struct FSoftClassPath MakeSoftClassPath(const class FString& PathString)//offset:0x2E5C430;
	static struct FText MakeLiteralText(const struct FText& Value)//offset:0x2E5C2D0;
	static class FString MakeLiteralString(const class FString& Value)//offset:0x2E5C1C0;
	static struct FName MakeLiteralName(const struct FName& Value)//offset:0x2E5C140;
	static int MakeLiteralInt(int Value)//offset:0x8061F0;
	static float MakeLiteralFloat(float Value)//offset:0x2E5C0C0;
	static unsigned char MakeLiteralByte(unsigned char Value)//offset:0x2E5C040;
	static bool MakeLiteralBool(bool Value)//offset:0x2E1DCA0;
	static void LoadInterstitialAd(int AdIdIndex)//offset:0x2E5BFC0;
	static class UObject* LoadClassAsset_Blocking()//offset:0x2E5BEB0;
	static void LoadAssetClass(class UObject* WorldContextObject, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo)//offset:0x2E5BBB0;
	static class UObject* LoadAsset_Blocking()//offset:0x2E5BDA0;
	static void LoadAsset(class UObject* WorldContextObject, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo)//offset:0x2E5B9C0;
	static bool LineTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E5B550;
	static bool LineTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E5B100;
	static bool LineTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E5ACB0;
	static bool LineTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E5A890;
	static bool LineTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E5A490;
	static bool LineTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E5A090;
	static void LaunchURL(const class FString& URL)//offset:0x2E5A000;
	static void K2_UnPauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)//offset:0x2E59F40;
	static void K2_UnPauseTimerDelegate(const struct FScriptDelegate& Delegate)//offset:0x2E59EB0;
	static void K2_UnPauseTimer(class UObject* Object, const class FString& FunctionName)//offset:0x2E59D90;
	static bool K2_TimerExistsHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)//offset:0x2E59CC0;
	static bool K2_TimerExistsDelegate(const struct FScriptDelegate& Delegate)//offset:0x2E59C20;
	static bool K2_TimerExists(class UObject* Object, const class FString& FunctionName)//offset:0x2E59AF0;
	static struct FTimerHandle K2_SetTimerDelegate(const struct FScriptDelegate& Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance)//offset:0x2E59940;
	static struct FTimerHandle K2_SetTimer(class UObject* Object, const class FString& FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance)//offset:0x2E59700;
	static void K2_PauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)//offset:0x2E59640;
	static void K2_PauseTimerDelegate(const struct FScriptDelegate& Delegate)//offset:0x2E595B0;
	static void K2_PauseTimer(class UObject* Object, const class FString& FunctionName)//offset:0x2E59490;
	static bool K2_IsValidTimerHandle(const struct FTimerHandle& Handle)//offset:0x2E59400;
	static bool K2_IsTimerPausedHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)//offset:0x2E59330;
	static bool K2_IsTimerPausedDelegate(const struct FScriptDelegate& Delegate)//offset:0x2E59290;
	static bool K2_IsTimerPaused(class UObject* Object, const class FString& FunctionName)//offset:0x2E59160;
	static bool K2_IsTimerActiveHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)//offset:0x2E59090;
	static bool K2_IsTimerActiveDelegate(const struct FScriptDelegate& Delegate)//offset:0x2E58FF0;
	static bool K2_IsTimerActive(class UObject* Object, const class FString& FunctionName)//offset:0x2E58EC0;
	static struct FTimerHandle K2_InvalidateTimerHandle(struct FTimerHandle* Handle)//offset:0x2E58E20;
	static float K2_GetTimerRemainingTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)//offset:0x2E58D50;
	static float K2_GetTimerRemainingTimeDelegate(const struct FScriptDelegate& Delegate)//offset:0x2E58CB0;
	static float K2_GetTimerRemainingTime(class UObject* Object, const class FString& FunctionName)//offset:0x2E58B80;
	static float K2_GetTimerElapsedTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)//offset:0x2E58AB0;
	static float K2_GetTimerElapsedTimeDelegate(const struct FScriptDelegate& Delegate)//offset:0x2E58A10;
	static float K2_GetTimerElapsedTime(class UObject* Object, const class FString& FunctionName)//offset:0x2E588E0;
	static void K2_ClearTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)//offset:0x2E58820;
	static void K2_ClearTimerDelegate(const struct FScriptDelegate& Delegate)//offset:0x2E58790;
	static void K2_ClearTimer(class UObject* Object, const class FString& FunctionName)//offset:0x2E58670;
	static void K2_ClearAndInvalidateTimerHandle(class UObject* WorldContextObject, struct FTimerHandle* Handle)//offset:0x2E585A0;
	static bool IsValidSoftObjectReference()//offset:0x2E584E0;
	static bool IsValidSoftClassReference()//offset:0x2E584E0;
	static bool IsValidPrimaryAssetType(const struct FPrimaryAssetType& PrimaryAssetType)//offset:0x257C700;
	static bool IsValidPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId)//offset:0x2E58440;
	static bool IsValidClass(class UObject* Class)//offset:0x2E58360;
	static bool IsValid(class UObject* Object)//offset:0x2E58360;
	static bool IsUnattended()//offset:0x2E58330;
	static bool IsStandalone(class UObject* WorldContextObject)//offset:0x2E582A0;
	static bool IsSplitScreen(class UObject* WorldContextObject)//offset:0x2E58210;
	static bool IsServer(class UObject* WorldContextObject)//offset:0x2E58180;
	static bool IsScreensaverEnabled()//offset:0xF33AF0;
	static bool IsPackagedForDistribution()//offset:0xF7CA10;
	static bool IsLoggedIn(class APlayerController* SpecificPlayer)//offset:0x2E57F80;
	static bool IsInterstitialAdRequested()//offset:0x2E57F50;
	static bool IsInterstitialAdAvailable()//offset:0x2E57F20;
	static bool IsDedicatedServer(class UObject* WorldContextObject)//offset:0x2E57E90;
	static bool IsControllerAssignedToGamepad(int ControllerId)//offset:0x2E57E00;
	static void HideAdBanner()//offset:0x2E57DE0;
	static bool GetVolumeButtonsHandledBySystem()//offset:0xF7CA10;
	static class FString GetUniqueDeviceId()//offset:0x2E57D60;
	static class FString GetSystemPath(class UObject* Object)//offset:0x2E57930;
	static bool GetSupportedFullscreenResolutions(TArray<struct FIntPoint>* Resolutions)//offset:0x2E57880;
	static void GetSoftObjectReferenceFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId)//offset:0x2E577B0;
	static void GetSoftClassReferenceFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId)//offset:0x2E576E0;
	static int GetRenderingMaterialQualityLevel()//offset:0x2E576B0;
	static int GetRenderingDetailMode()//offset:0x2E57680;
	static class FString GetProjectSavedDirectory()//offset:0x2E57580;
	static class FString GetProjectDirectory()//offset:0x2E57500;
	static class FString GetProjectContentDirectory()//offset:0x2E57480;
	static void GetPrimaryAssetsWithBundleState(TArray<struct FName> RequiredBundles, TArray<struct FName> ExcludedBundles, TArray<struct FPrimaryAssetType> ValidTypes, bool bForceCurrentState, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIdList)//offset:0x2E57260;
	static void GetPrimaryAssetIdList(const struct FPrimaryAssetType& PrimaryAssetType, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIdList)//offset:0x2E57180;
	static struct FPrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference()//offset:0x2E57060;
	static struct FPrimaryAssetId GetPrimaryAssetIdFromSoftClassReference()//offset:0x2E56F40;
	static struct FPrimaryAssetId GetPrimaryAssetIdFromObject(class UObject* Object)//offset:0x2E56EA0;
	static struct FPrimaryAssetId GetPrimaryAssetIdFromClass(class UObject* Class)//offset:0x2E56E00;
	static TArray<class FString> GetPreferredLanguages()//offset:0x2E56D80;
	static class FString GetPlatformUserName()//offset:0x2E56D00;
	static class FString GetPlatformUserDir()//offset:0x2E56C80;
	static class FString GetPathName(class UObject* Object)//offset:0x2E56BB0;
	static class UObject* GetOuterObject(class UObject* Object)//offset:0x2E56B20;
	static class FString GetObjectName(class UObject* Object)//offset:0x2E56A50;
	static class UObject* GetObjectFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId)//offset:0x2E569B0;
	static int GetMinYResolutionForUI()//offset:0x2E56980;
	static int GetMinYResolutionFor3DView()//offset:0x2E56950;
	static class FString GetLocalCurrencySymbol()//offset:0x2E562B0;
	static class FString GetLocalCurrencyCode()//offset:0x2E562B0;
	static float GetGameTimeInSeconds(class UObject* WorldContextObject)//offset:0x2DECC40;
	static class FString GetGamepadControllerName(int ControllerId)//offset:0x2E56690;
	static class UTexture2D* GetGamepadButtonGlyph(const class FString& ButtonKey, int ControllerIndex)//offset:0x2E565B0;
	static class FString GetGameName()//offset:0x2E56530;
	static class FString GetGameBundleId()//offset:0x2E564B0;
	static int64_t GetFrameCount()//offset:0x2E56480;
	static class FString GetEngineVersion()//offset:0x2E56400;
	static class FString GetDisplayName(class UObject* Object)//offset:0x2E56330;
	static class FString GetDeviceId()//offset:0x2E562B0;
	static class FString GetDefaultLocale()//offset:0x2E56230;
	static class FString GetDefaultLanguage()//offset:0x2E561B0;
	static bool GetCurrentBundleState(const struct FPrimaryAssetId& PrimaryAssetId, bool bForceCurrentState, TArray<struct FName>* OutBundles)//offset:0x2E56060;
	static bool GetConvenientWindowedResolutions(TArray<struct FIntPoint>* Resolutions)//offset:0x2E55FB0;
	static int GetConsoleVariableIntValue(const class FString& VariableName)//offset:0x2E55F10;
	static float GetConsoleVariableFloatValue(const class FString& VariableName)//offset:0x2E55E70;
	static bool GetConsoleVariableBoolValue(const class FString& VariableName)//offset:0x2E55DD0;
	static void GetComponentBounds(class USceneComponent* Component, struct FVector* Origin, struct FVector* BoxExtent, float* SphereRadius)//offset:0x2E55C60;
	static class FString GetCommandLine()//offset:0x2E55BE0;
	static class UObject* GetClassFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId)//offset:0x2E55B40;
	static class FString GetClassDisplayName(class UObject* Class)//offset:0x2E55A70;
	static int GetAdIDCount()//offset:0x2E55A40;
	static void GetActorListFromComponentList(TArray<class UPrimitiveComponent*> ComponentList, class UObject* ActorClassFilter, TArray<class AActor*>* OutActorList)//offset:0x2E558F0;
	static void GetActorBounds(class AActor* Actor, struct FVector* Origin, struct FVector* BoxExtent)//offset:0x2E557D0;
	static void ForceCloseAdBanner()//offset:0x2E557B0;
	static void FlushPersistentDebugLines(class UObject* WorldContextObject)//offset:0xF7BB40;
	static void FlushDebugStrings(class UObject* WorldContextObject)//offset:0xF7BB40;
	static void ExecuteConsoleCommand(class UObject* WorldContextObject, const class FString& Command, class APlayerController* SpecificPlayer)//offset:0x2E55690;
	static bool EqualEqual_SoftObjectReference()//offset:0x2E55540;
	static bool EqualEqual_SoftClassReference()//offset:0x2E55540;
	static bool EqualEqual_PrimaryAssetType(const struct FPrimaryAssetType& A, const struct FPrimaryAssetType& B)//offset:0x257B740;
	static bool EqualEqual_PrimaryAssetId(const struct FPrimaryAssetId& A, const struct FPrimaryAssetId& B)//offset:0x2E55450;
	static int EndTransaction()//offset:0x2E55420;
	static void DrawDebugString(class UObject* WorldContextObject, const struct FVector& TextLocation, const class FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration)//offset:0x2E55220;
	static void DrawDebugSphere(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, float Thickness)//offset:0x2E54FF0;
	static void DrawDebugPoint(class UObject* WorldContextObject, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration)//offset:0x2E54E50;
	static void DrawDebugPlane(class UObject* WorldContextObject, const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration)//offset:0x2E54C60;
	static void DrawDebugLine(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness)//offset:0x2E54A60;
	static void DrawDebugFrustum(class UObject* WorldContextObject, const struct FTransform& FrustumTransform, const struct FLinearColor& FrustumColor, float Duration, float Thickness)//offset:0x2E54860;
	static void DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FTransform& DrawTransform, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration)//offset:0x2E54600;
	static void DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FVector& DrawLocation, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration)//offset:0x2E543F0;
	static void DrawDebugCylinder(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, float Thickness)//offset:0x2E54170;
	static void DrawDebugCoordinateSystem(class UObject* WorldContextObject, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness)//offset:0x2E53F80;
	static void DrawDebugConeInDegrees(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness)//offset:0x2E53C70;
	static void DrawDebugCone(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness)//offset:0x2E53C70;
	static void DrawDebugCircle(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int NumSegments, const struct FLinearColor& LineColor, float Duration, float Thickness, const struct FVector& YAxis, const struct FVector& ZAxis, bool bDrawAxis)//offset:0x2E53950;
	static void DrawDebugCapsule(class UObject* WorldContextObject, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, float Thickness)//offset:0x2E536D0;
	static void DrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration)//offset:0x2E535C0;
	static void DrawDebugBox(class UObject* WorldContextObject, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, float Thickness)//offset:0x2E53370;
	static void DrawDebugArrow(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, float Thickness)//offset:0x2E53130;
	static bool DoesImplementInterface(class UObject* TestObject, class UInterface* Interface)//offset:0x2E53060;
	static void Delay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo)//offset:0x2E52F20;
	static void CreateCopyForUndoBuffer(class UObject* ObjectToModify)//offset:0xF7BB40;
	static class FString ConvertToRelativePath(const class FString& Filename)//offset:0x2E52E40;
	static class FString ConvertToAbsolutePath(const class FString& Filename)//offset:0x2E52D60;
	static void Conv_SoftObjPathToSoftObjRef(const struct FSoftObjectPath& SoftObjectPath)//offset:0x2E52BC0;
	static class FString Conv_SoftObjectReferenceToString()//offset:0x2E52AC0;
	static class UObject* Conv_SoftObjectReferenceToObject()//offset:0x2E52CA0;
	static class FString Conv_SoftClassReferenceToString()//offset:0x2E52AC0;
	static class UObject* Conv_SoftClassReferenceToClass()//offset:0x2E52A00;
	static void Conv_SoftClassPathToSoftClassRef(const struct FSoftClassPath& SoftClassPath)//offset:0x2E52920;
	static class FString Conv_PrimaryAssetTypeToString(const struct FPrimaryAssetType& PrimaryAssetType)//offset:0x257BB40;
	static class FString Conv_PrimaryAssetIdToString(const struct FPrimaryAssetId& PrimaryAssetId)//offset:0x2E52840;
	static void Conv_ObjectToSoftObjectReference(class UObject* Object)//offset:0x2E52790;
	static class UObject* Conv_InterfaceToObject(const TScriptInterface<class UInterface>& Interface)//offset:0x2E526F0;
	static void Conv_ClassToSoftClassReference(class UObject* Class)//offset:0x2E52630;
	static void ControlScreensaver(bool bAllowScreenSaver)//offset:0x2E525B0;
	static bool ComponentOverlapComponents(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UObject* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)//offset:0x2E52320;
	static bool ComponentOverlapActors(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UObject* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)//offset:0x2E52090;
	static void CollectGarbage()//offset:0x2E52070;
	static bool CapsuleTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E51B80;
	static bool CapsuleTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E516B0;
	static bool CapsuleTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E511E0;
	static bool CapsuleTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E50D20;
	static bool CapsuleTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E50890;
	static bool CapsuleTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E503F0;
	static bool CapsuleOverlapComponents(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UObject* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)//offset:0x2E50120;
	static bool CapsuleOverlapActors(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UObject* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)//offset:0x2E4FE50;
	static bool CanLaunchURL(const class FString& URL)//offset:0x2E4FDB0;
	static void CancelTransaction(int Index)//offset:0xD670F0;
	static void BreakSoftObjectPath(const struct FSoftObjectPath& InSoftObjectPath, class FString* PathString)//offset:0x2E4FC60;
	static void BreakSoftClassPath(const struct FSoftClassPath& InSoftClassPath, class FString* PathString)//offset:0x2E4FC60;
	static bool BoxTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E4F750;
	static bool BoxTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E4F250;
	static bool BoxTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E4ED50;
	static bool BoxTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E4E880;
	static bool BoxTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E4E3C0;
	static bool BoxTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)//offset:0x2E4DF00;
	static bool BoxOverlapComponents(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UObject* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)//offset:0x2E4DC70;
	static bool BoxOverlapActors(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UObject* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)//offset:0x2E4D9E0;
	static int BeginTransaction(const class FString& Context, const struct FText& Description, class UObject* PrimaryObject)//offset:0x2E4D850;
	static struct FDebugFloatHistory AddFloatHistorySample(float Value, const struct FDebugFloatHistory& FloatHistory)//offset:0x2E4D6E0;
};


// Class Engine.KismetTextLibrary
// size:0x0000 (0x0028 - 0x0028)
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{
public:

	static struct FText TextTrimTrailing(const struct FText& InText)//offset:0x2E66CB0;
	static struct FText TextTrimPrecedingAndTrailing(const struct FText& InText)//offset:0x2E66B80;
	static struct FText TextTrimPreceding(const struct FText& InText)//offset:0x2E66A50;
	static struct FText TextToUpper(const struct FText& InText)//offset:0x2E66920;
	static struct FText TextToLower(const struct FText& InText)//offset:0x2E667F0;
	static bool TextIsTransient(const struct FText& InText)//offset:0x2E66720;
	static bool TextIsFromStringTable(const struct FText& Text)//offset:0x2E66650;
	static bool TextIsEmpty(const struct FText& InText)//offset:0x2E66580;
	static bool TextIsCultureInvariant(const struct FText& InText)//offset:0x2E664B0;
	static struct FText TextFromStringTable(const struct FName& TableId, const class FString& Key)//offset:0x2E66370;
	static bool StringTableIdAndKeyFromText(const struct FText& Text, struct FName* OutTableId, class FString* OutKey)//offset:0x2E661C0;
	static struct FText PolyglotDataToText(const struct FPolyglotTextData& PolyglotData)//offset:0x2E65FB0;
	static bool NotEqual_TextText(const struct FText& A, const struct FText& B)//offset:0x2E65E40;
	static bool NotEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B)//offset:0x2E65CD0;
	static void IsPolyglotDataValid(const struct FPolyglotTextData& PolyglotData, bool* IsValid, struct FText* ErrorMessage)//offset:0x2E65A30;
	static struct FText GetEmptyText()//offset:0x2E659A0;
	static struct FText Format(const struct FText& InPattern, TArray<struct FFormatArgumentData> InArgs)//offset:0x2E65770;
	static bool FindTextInLocalizationTable(const class FString& Namespace, const class FString& Key, struct FText* OutText)//offset:0x2E655F0;
	static bool EqualEqual_TextText(const struct FText& A, const struct FText& B)//offset:0x2E65480;
	static bool EqualEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B)//offset:0x2E65310;
	static struct FText Conv_VectorToText(const struct FVector& InVec)//offset:0x2E65220;
	static struct FText Conv_Vector2dToText(const struct FVector2D& InVec)//offset:0x2E65140;
	static struct FText Conv_TransformToText(const struct FTransform& InTrans)//offset:0x2E65000;
	static class FString Conv_TextToString(const struct FText& InText)//offset:0x2E64EF0;
	static struct FText Conv_StringToText(const class FString& inString)//offset:0x2E64DF0;
	static struct FText Conv_RotatorToText(const struct FRotator& InRot)//offset:0x2E64D00;
	static struct FText Conv_ObjectToText(class UObject* InObj)//offset:0x2E64C10;
	static struct FText Conv_NameToText(const struct FName& InName)//offset:0x2E64B20;
	static struct FText Conv_IntToText(int Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits)//offset:0x2E64900;
	static struct FText Conv_Int64ToText(int64_t Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits)//offset:0x2E646E0;
	static struct FText Conv_FloatToText(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits)//offset:0x2E64410;
	static struct FText Conv_ColorToText(const struct FLinearColor& InColor)//offset:0x2E64330;
	static struct FText Conv_ByteToText(unsigned char Value)//offset:0x2E64250;
	static struct FText Conv_BoolToText(bool InBool)//offset:0x2E64160;
	static struct FText AsTimeZoneTime_DateTime(const struct FDateTime& InDateTime, const class FString& InTimeZone)//offset:0x2E63E30;
	static struct FText AsTimeZoneDateTime_DateTime(const struct FDateTime& InDateTime, const class FString& InTimeZone)//offset:0x2E63B90;
	static struct FText AsTimeZoneDate_DateTime(const struct FDateTime& InDateTime, const class FString& InTimeZone)//offset:0x2E63CE0;
	static struct FText AsTimespan_Timespan(const struct FTimespan& InTimespan)//offset:0x2E64070;
	static struct FText AsTime_DateTime(const struct FDateTime& In)//offset:0x2E63F80;
	static struct FText AsPercent_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits)//offset:0x2E638C0;
	static struct FText AsDateTime_DateTime(const struct FDateTime& In)//offset:0x2E636E0;
	static struct FText AsDate_DateTime(const struct FDateTime& InDateTime)//offset:0x2E637D0;
	static struct FText AsCurrencyBase(int BaseValue, const class FString& CurrencyCode)//offset:0x2E62F60;
	static struct FText AsCurrency_Integer(int Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const class FString& CurrencyCode)//offset:0x2E633C0;
	static struct FText AsCurrency_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const class FString& CurrencyCode)//offset:0x2E630A0;
};


// Class Engine.Layer
// size:0x0020 (0x0028 - 0x0048)
class ULayer : public UObject
{
public:
	struct FName                                       LayerName;                                                // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsVisible;                                               // 0x0030(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<struct FLayerActorStats>                    ActorStats;                                               // 0x0038(0x0010) (ZeroConstructor, Transient)
};


// Class Engine.LevelPartitionInterface
// size:0x0000 (0x0028 - 0x0028)
class ULevelPartitionInterface : public UInterface
{
public:
};


// Class Engine.Level
// size:0x0270 (0x0028 - 0x0298)
class ULevel : public UObject
{
public:
	unsigned char                                      UnknownData00[0x90];                                      // 0x0028(0x0090) MISSED OFFSET
	class UWorld*                                      OwningWorld;                                              // 0x00B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UModel*                                      Model;                                                    // 0x00C0(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UModelComponent*>                     ModelComponents;                                          // 0x00C8(0x0010) (ExportObject, ZeroConstructor)
	class ULevelActorContainer*                        ActorCluster;                                             // 0x00D8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	int                                                NumTextureStreamingUnbuiltComponents;                     // 0x00E0(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NumTextureStreamingDirtyResources;                        // 0x00E4(0x0004) (ZeroConstructor, IsPlainOldData)
	class ALevelScriptActor*                           LevelScriptActor;                                         // 0x00E8(0x0008) (ZeroConstructor, IsPlainOldData)
	class ANavigationObjectBase*                       NavListStart;                                             // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData)
	class ANavigationObjectBase*                       NavListEnd;                                               // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UNavigationDataChunk*>                NavDataChunks;                                            // 0x0100(0x0010) (ZeroConstructor)
	float                                              LightmapTotalSize;                                        // 0x0110(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              ShadowmapTotalSize;                                       // 0x0114(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<struct FVector>                             StaticNavigableGeometry;                                  // 0x0118(0x0010) (ZeroConstructor)
	TArray<struct FGuid>                               StreamingTextureGuids;                                    // 0x0128(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x98];                                      // 0x0138(0x0098) MISSED OFFSET
	struct FGuid                                       LevelBuildDataId;                                         // 0x01D0(0x0010) (ZeroConstructor, IsPlainOldData)
	class UMapBuildDataRegistry*                       MapBuildData;                                             // 0x01E0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FIntVector                                  LightBuildLevelOffset;                                    // 0x01E8(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsLightingScenario;                                      // 0x01F4(0x0001)
	unsigned char                                      bTextureStreamingRotationChanged;                         // 0x01F4(0x0001)
	unsigned char                                      bStaticComponentsRegisteredInStreamingManager;            // 0x01F4(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bIsVisible;                                               // 0x01F4(0x0001) (Transient)
	unsigned char                                      UnknownData02[0x63];                                      // 0x01F5(0x0063) MISSED OFFSET
	class AWorldSettings*                              WorldSettings;                                            // 0x0258(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0260(0x0008) MISSED OFFSET
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0268(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0278(0x0010) MISSED OFFSET
	TArray<struct FReplicatedStaticActorDestructionInfo> DestroyedReplicatedStaticActors;                          // 0x0288(0x0010) (ZeroConstructor, Transient)
};


// Class Engine.LevelActorContainer
// size:0x0010 (0x0028 - 0x0038)
class ULevelActorContainer : public UObject
{
public:
	TArray<class AActor*>                              Actors;                                                   // 0x0028(0x0010) (ZeroConstructor, Transient)
};


// Class Engine.LevelBounds
// size:0x0010 (0x0220 - 0x0230)
class ALevelBounds : public AActor
{
public:
	class UBoxComponent*                               BoxComponent;                                             // 0x0220(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bAutoUpdateBounds;                                        // 0x0228(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0229(0x0007) MISSED OFFSET
};


// Class Engine.LevelScriptActor
// size:0x0008 (0x0220 - 0x0228)
class ALevelScriptActor : public AActor
{
public:
	unsigned char                                      bInputEnabled;                                            // 0x0220(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0221(0x0007) MISSED OFFSET

	void WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation)//offset:0x13CEB30;
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning)//offset:0x2E6A070;
	bool RemoteEvent(const struct FName& EventName)//offset:0x2E697B0;
	void LevelReset()//offset:0x13CEB30;
};


// Class Engine.LevelScriptBlueprint
// size:0x0000 (0x00A0 - 0x00A0)
class ULevelScriptBlueprint : public UBlueprint
{
public:
};


// Class Engine.World
// size:0x0760 (0x0028 - 0x0788)
class UWorld : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class ULevel*                                      PersistentLevel;                                          // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UNetDriver*                                  NetDriver;                                                // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ULineBatchComponent*                         LineBatcher;                                              // 0x0040(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ULineBatchComponent*                         PersistentLineBatcher;                                    // 0x0048(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ULineBatchComponent*                         ForegroundLineBatcher;                                    // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class AGameNetworkManager*                         NetworkManager;                                           // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UPhysicsCollisionHandler*                    PhysicsCollisionHandler;                                  // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UObject*>                             ExtraReferencedObjects;                                   // 0x0068(0x0010) (ZeroConstructor, Transient)
	TArray<class UObject*>                             PerModuleDataObjects;                                     // 0x0078(0x0010) (ZeroConstructor, Transient)
	TArray<class ULevelStreaming*>                     StreamingLevels;                                          // 0x0088(0x0010) (ZeroConstructor, Transient)
	struct FStreamingLevelsToConsider                  StreamingLevelsToConsider;                                // 0x0098(0x0028) (Transient, DuplicateTransient)
	class FString                                      StreamingLevelsPrefix;                                    // 0x00C0(0x0010) (ZeroConstructor)
	class ULevel*                                      CurrentLevelPendingVisibility;                            // 0x00D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ULevel*                                      CurrentLevelPendingInvisibility;                          // 0x00D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDemoNetDriver*                              DemoNetDriver;                                            // 0x00E0(0x0008) (ZeroConstructor, IsPlainOldData)
	class AParticleEventManager*                       MyParticleEventManager;                                   // 0x00E8(0x0008) (ZeroConstructor, IsPlainOldData)
	class APhysicsVolume*                              DefaultPhysicsVolume;                                     // 0x00F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x16];                                      // 0x00F8(0x0016) MISSED OFFSET
	unsigned char                                      bAreConstraintsDirty;                                     // 0x010E(0x0001) (Transient)
	unsigned char                                      UnknownData02[0x1];                                       // 0x010F(0x0001) MISSED OFFSET
	class UNavigationSystemBase*                       NavigationSystem;                                         // 0x0110(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AGameModeBase*                               AuthorityGameMode;                                        // 0x0118(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AGameStateBase*                              GameState;                                                // 0x0120(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAISystemBase*                               AISystem;                                                 // 0x0128(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAvoidanceManager*                           AvoidanceManager;                                         // 0x0130(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class ULevel*>                              Levels;                                                   // 0x0138(0x0010) (ZeroConstructor, Transient)
	TArray<struct FLevelCollection>                    LevelCollections;                                         // 0x0148(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0x28];                                      // 0x0158(0x0028) MISSED OFFSET
	class UGameInstance*                               OwningGameInstance;                                       // 0x0180(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UMaterialParameterCollectionInstance*> ParameterCollectionInstances;                             // 0x0188(0x0010) (ZeroConstructor, Transient)
	class UCanvas*                                     CanvasForRenderingToTarget;                               // 0x0198(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCanvas*                                     CanvasForDrawMaterialToRenderTarget;                      // 0x01A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x50];                                      // 0x01A8(0x0050) MISSED OFFSET
	unsigned char                                      UnknownData05[0x50];                                      // 0x01A8(0x0050) UNKNOWN PROPERTY: 
	TArray<class UActorComponent*>                     ComponentsThatNeedEndOfFrameUpdate;                       // 0x0248(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UActorComponent*>                     ComponentsThatNeedEndOfFrameUpdate_OnGameThread;          // 0x0258(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData06[0x370];                                     // 0x0268(0x0370) MISSED OFFSET
	class UWorldComposition*                           WorldComposition;                                         // 0x05D8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x88];                                      // 0x05E0(0x0088) MISSED OFFSET
	struct FWorldPSCPool                               PSCPool;                                                  // 0x0668(0x0058)
	unsigned char                                      UnknownData08[0xC8];                                      // 0x06C0(0x00C8) MISSED OFFSET

	class AWorldSettings* K2_GetWorldSettings()//offset:0x2F00410;
	void HandleTimelineScrubbed()//offset:0x2F003F0;
};


// Class Engine.LevelStreaming
// size:0x0128 (0x0028 - 0x0150)
class ULevelStreaming : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0028(0x0028) UNKNOWN PROPERTY: 
	struct FName                                       PackageNameToLoad;                                        // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               LODPackageNames;                                          // 0x0058(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0068(0x0018) MISSED OFFSET
	struct FTransform                                  LevelTransform;                                           // 0x0080(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	int                                                LevelLODIndex;                                            // 0x00B0(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	int                                                StreamingPriority;                                        // 0x00B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x00B8(0x0002) MISSED OFFSET
	unsigned char                                      bShouldBeVisible;                                         // 0x00BA(0x0001) (BlueprintVisible)
	unsigned char                                      bShouldBeLoaded;                                          // 0x00BA(0x0001) (BlueprintVisible)
	unsigned char                                      bLocked;                                                  // 0x00BA(0x0001)
	unsigned char                                      bIsStatic;                                                // 0x00BA(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bShouldBlockOnLoad;                                       // 0x00BA(0x0001) (BlueprintVisible)
	unsigned char                                      bShouldBlockOnUnload;                                     // 0x00BB(0x0001) (BlueprintVisible)
	unsigned char                                      bDisableDistanceStreaming;                                // 0x00BB(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bDrawOnLevelStatusMap;                                    // 0x00BB(0x0001) (Edit)
	struct FLinearColor                                LevelColor;                                               // 0x00BC(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	TArray<class ALevelStreamingVolume*>               EditorStreamingVolumes;                                   // 0x00D0(0x0010) (Edit, ZeroConstructor)
	float                                              MinTimeBetweenVolumeUnloadRequests;                       // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnLevelLoaded;                                            // 0x00E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnLevelUnloaded;                                          // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnLevelShown;                                             // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnLevelHidden;                                            // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class ULevel*                                      LoadedLevel;                                              // 0x0128(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ULevel*                                      PendingUnloadLevel;                                       // 0x0130(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x18];                                      // 0x0138(0x0018) MISSED OFFSET

	bool ShouldBeLoaded()//offset:0x25F8150;
	void SetShouldBeVisible(bool bInShouldBeVisible)//offset:0x2E6AFB0;
	void SetShouldBeLoaded(bool bInShouldBeLoaded)//offset:0x2DF5A40;
	void SetPriority(int NewPriority)//offset:0x2E6AD90;
	void SetLevelLODIndex(int LODIndex)//offset:0x2E6A6A0;
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval)//offset:0x2E6A610;
	bool IsStreamingStatePending()//offset:0x2E692A0;
	bool IsLevelVisible()//offset:0x2E69270;
	bool IsLevelLoaded()//offset:0x2E69240;
	struct FName GetWorldAssetPackageFName()//offset:0x2E691D0;
	class ULevel* GetLoadedLevel()//offset:0x1F811C0;
	class ALevelScriptActor* GetLevelScriptActor()//offset:0x2E69120;
	bool GetIsRequestingUnloadAndRemoval()//offset:0x2E690F0;
	class ULevelStreaming* CreateInstance(const class FString& UniqueInstanceName)//offset:0x2E69010;
};


// Class Engine.LevelStreamingAlwaysLoaded
// size:0x0000 (0x0150 - 0x0150)
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:
};


// Class Engine.LevelStreamingDynamic
// size:0x0000 (0x0150 - 0x0150)
class ULevelStreamingDynamic : public ULevelStreaming
{
public:

	static class ULevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(class UObject* WorldContextObject, const struct FVector& Location, const struct FRotator& Rotation, bool* bOutSuccess, const class FString& OptionalLevelNameOverride)//offset:0x2E69530;
	static class ULevelStreamingDynamic* LoadLevelInstance(class UObject* WorldContextObject, const class FString& LevelName, const struct FVector& Location, const struct FRotator& Rotation, bool* bOutSuccess, const class FString& OptionalLevelNameOverride)//offset:0x2E692D0;
};


// Class Engine.LevelStreamingPersistent
// size:0x0000 (0x0150 - 0x0150)
class ULevelStreamingPersistent : public ULevelStreaming
{
public:
};


// Class Engine.LevelStreamingVolume
// size:0x0018 (0x0258 - 0x0270)
class ALevelStreamingVolume : public AVolume
{
public:
	TArray<struct FName>                               StreamingLevelNames;                                      // 0x0258(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	unsigned char                                      bEditorPreVisOnly;                                        // 0x0268(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisabled;                                                // 0x0268(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0269(0x0003) MISSED OFFSET
	TEnumAsByte<EStreamingVolumeUsage>                 StreamingUsage;                                           // 0x026C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x026D(0x0003) MISSED OFFSET
};


// Class Engine.LightmappedSurfaceCollection
// size:0x0018 (0x0028 - 0x0040)
class ULightmappedSurfaceCollection : public UObject
{
public:
	class UModel*                                      SourceModel;                                              // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<int>                                        Surfaces;                                                 // 0x0030(0x0010) (Edit, ZeroConstructor)
};


// Class Engine.LightMapTexture2D
// size:0x0008 (0x0100 - 0x0108)
class ULightMapTexture2D : public UTexture2D
{
public:
};


// Class Engine.LightMapVirtualTexture2D
// size:0x0018 (0x0100 - 0x0118)
class ULightMapVirtualTexture2D : public UTexture2D
{
public:
	TArray<int8_t>                                     TypeToLayer;                                              // 0x0100(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) MISSED OFFSET
};


// Class Engine.LightmassCharacterIndirectDetailVolume
// size:0x0000 (0x0258 - 0x0258)
class ALightmassCharacterIndirectDetailVolume : public AVolume
{
public:
};


// Class Engine.LightmassImportanceVolume
// size:0x0000 (0x0258 - 0x0258)
class ALightmassImportanceVolume : public AVolume
{
public:
};


// Class Engine.LightmassPortal
// size:0x0008 (0x0220 - 0x0228)
class ALightmassPortal : public AActor
{
public:
	class ULightmassPortalComponent*                   PortalComponent;                                          // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
};


// Class Engine.LightmassPortalComponent
// size:0x0000 (0x0200 - 0x0200)
class ULightmassPortalComponent : public USceneComponent
{
public:
};


// Class Engine.LightmassPrimitiveSettingsObject
// size:0x0018 (0x0028 - 0x0040)
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x0028(0x0018) (Edit)
};


// Class Engine.LineBatchComponent
// size:0x0040 (0x0450 - 0x0490)
class ULineBatchComponent : public UPrimitiveComponent
{
public:
};


// Class Engine.LocalLightComponent
// size:0x0020 (0x0340 - 0x0360)
class ULocalLightComponent : public ULightComponent
{
public:
	ELightUnits                                        IntensityUnits;                                           // 0x0340(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0341(0x0003) MISSED OFFSET
	float                                              Radius;                                                   // 0x0344(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              AttenuationRadius;                                        // 0x0348(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLightmassPointLightSettings                LightmassSettings;                                        // 0x034C(0x000C) (Edit)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0358(0x0008) MISSED OFFSET

	void SetIntensityUnits(ELightUnits NewIntensityUnits)//offset:0x2E6D6A0;
	void SetAttenuationRadius(float NewRadius)//offset:0x2E6D620;
	static float GetUnitsConversionFactor(ELightUnits SrcUnits, ELightUnits TargetUnits, float CosHalfConeAngle)//offset:0x2E6D510;
};


// Class Engine.LocalPlayer
// size:0x0210 (0x0048 - 0x0258)
class ULocalPlayer : public UPlayer
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0048(0x0028) MISSED OFFSET
	class UGameViewportClient*                         ViewportClient;                                           // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x0078(0x001C) MISSED OFFSET
	TEnumAsByte<EAspectRatioAxisConstraint>            AspectRatioAxisConstraint;                                // 0x0094(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0095(0x0003) MISSED OFFSET
	class APlayerController*                           PendingLevelPlayerControllerClass;                        // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSentSplitJoin;                                           // 0x00A0(0x0001) (Edit, Transient, EditConst)
	unsigned char                                      UnknownData03[0x17];                                      // 0x00A1(0x0017) MISSED OFFSET
	int                                                ControllerId;                                             // 0x00B8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x19C];                                     // 0x00BC(0x019C) MISSED OFFSET
};


// Class Engine.LocalPlayerSubsystem
// size:0x0000 (0x0030 - 0x0030)
class ULocalPlayerSubsystem : public USubsystem
{
public:
};


// Class Engine.LODActor
// size:0x0088 (0x0220 - 0x02A8)
class ALODActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x0220(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TMap<class UMaterialInterface*, class UInstancedStaticMeshComponent*> ImpostersStaticMeshComponents;                            // 0x0228(0x0050) (Edit, ExportObject, EditConst)
	class UHLODProxy*                                  Proxy;                                                    // 0x0278(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       Key;                                                      // 0x0280(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              LODDrawDistance;                                          // 0x0288(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                LODLevel;                                                 // 0x028C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<class AActor*>                              SubActors;                                                // 0x0290(0x0010) (Edit, ZeroConstructor, EditConst)
	unsigned char                                      CachedNumHLODLevels;                                      // 0x02A0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02A1(0x0007) MISSED OFFSET
};


// Class Engine.LODSyncComponent
// size:0x0090 (0x00B0 - 0x0140)
class ULODSyncComponent : public UActorComponent
{
public:
	int                                                NumLODs;                                                  // 0x00B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                ForcedLOD;                                                // 0x00B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FComponentSync>                      ComponentsToSync;                                         // 0x00B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TMap<struct FName, struct FLODMappingData>         CustomLODMapping;                                         // 0x00C8(0x0050) (Edit, BlueprintVisible)
	int                                                CurrentLOD;                                               // 0x0118(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CurrentNumLODs;                                           // 0x011C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UPrimitiveComponent*>                 DriveComponents;                                          // 0x0120(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UPrimitiveComponent*>                 SubComponents;                                            // 0x0130(0x0010) (ExportObject, ZeroConstructor, Transient)

	class FString GetLODSyncDebugText()//offset:0x2E6D490;
};


// Class Engine.LODSyncInterface
// size:0x0000 (0x0028 - 0x0028)
class ULODSyncInterface : public UInterface
{
public:
};


// Class Engine.MapBuildDataRegistry
// size:0x0210 (0x0028 - 0x0238)
class UMapBuildDataRegistry : public UObject
{
public:
	TEnumAsByte<ELightingBuildQuality>                 LevelLightingQuality;                                     // 0x0028(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20F];                                     // 0x0029(0x020F) MISSED OFFSET
};


// Class Engine.Material
// size:0x0408 (0x0088 - 0x0490)
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UPhysicalMaterialMask*                       PhysMaterialMask;                                         // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UPhysicalMaterial*                           PhysicalMaterialMap[0x8];                                 // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FScalarMaterialInput                        Metallic;                                                 // 0x00D8(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00E4(0x0008) MISSED OFFSET
	struct FScalarMaterialInput                        Specular;                                                 // 0x00EC(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00F8(0x0008) MISSED OFFSET
	struct FScalarMaterialInput                        Anisotropy;                                               // 0x0100(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x010C(0x0008) MISSED OFFSET
	struct FVectorMaterialInput                        Normal;                                                   // 0x0114(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0120(0x0008) MISSED OFFSET
	struct FVectorMaterialInput                        Tangent;                                                  // 0x0128(0x000C)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0134(0x0008) MISSED OFFSET
	struct FColorMaterialInput                         EmissiveColor;                                            // 0x013C(0x000C)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0148(0x0008) MISSED OFFSET
	TEnumAsByte<EMaterialDomain>                       MaterialDomain;                                           // 0x0150(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBlendMode>                            BlendMode;                                                // 0x0151(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDecalBlendMode>                       DecalBlendMode;                                           // 0x0152(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialDecalResponse>                MaterialDecalResponse;                                    // 0x0153(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialShadingModel>                 ShadingModel;                                             // 0x0154(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCastDynamicShadowAsMasked;                               // 0x0155(0x0001) (Edit)
	struct FMaterialShadingModelField                  ShadingModels;                                            // 0x0156(0x0002)
	float                                              OpacityMaskClipValue;                                     // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVectorMaterialInput                        WorldPositionOffset;                                      // 0x015C(0x000C)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0168(0x0008) MISSED OFFSET
	struct FScalarMaterialInput                        Refraction;                                               // 0x0170(0x000C)
	unsigned char                                      UnknownData07[0x8];                                       // 0x017C(0x0008) MISSED OFFSET
	struct FMaterialAttributesInput                    MaterialAttributes;                                       // 0x0184(0x0010)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0194(0x0008) MISSED OFFSET
	struct FScalarMaterialInput                        PixelDepthOffset;                                         // 0x019C(0x000C)
	unsigned char                                      UnknownData09[0x8];                                       // 0x01A8(0x0008) MISSED OFFSET
	struct FShadingModelMaterialInput                  ShadingModelFromMaterialExpression;                       // 0x01B0(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x8];                                       // 0x01BC(0x0008) MISSED OFFSET
	unsigned char                                      bEnableSeparateTranslucency;                              // 0x01C4(0x0001) (Edit)
	unsigned char                                      bEnableResponsiveAA;                                      // 0x01C4(0x0001) (Edit)
	unsigned char                                      bScreenSpaceReflections;                                  // 0x01C4(0x0001) (Edit)
	unsigned char                                      bContactShadows;                                          // 0x01C4(0x0001) (Edit)
	unsigned char                                      TwoSided;                                                 // 0x01C4(0x0001) (Edit)
	unsigned char                                      DitheredLODTransition;                                    // 0x01C4(0x0001) (Edit)
	unsigned char                                      DitherOpacityMask;                                        // 0x01C4(0x0001) (Edit)
	unsigned char                                      bAllowNegativeEmissiveColor;                              // 0x01C4(0x0001) (Edit)
	TEnumAsByte<ETranslucencyLightingMode>             TranslucencyLightingMode;                                 // 0x01C5(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableMobileSeparateTranslucency;                        // 0x01C6(0x0001) (Edit)
	unsigned char                                      UnknownData11[0x1];                                       // 0x01C7(0x0001) MISSED OFFSET
	int                                                NumCustomizedUVs;                                         // 0x01C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucencyDirectionalLightingIntensity;                 // 0x01CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentShadowDensityScale;                            // 0x01D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentSelfShadowDensityScale;                        // 0x01D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentSelfShadowSecondDensityScale;                  // 0x01D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentSelfShadowSecondOpacity;                       // 0x01DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentBackscatteringExponent;                        // 0x01E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                TranslucentMultipleScatteringExtinction;                  // 0x01E4(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentShadowStartOffset;                             // 0x01F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDisableDepthTest;                                        // 0x01F8(0x0001) (Edit)
	unsigned char                                      bWriteOnlyAlpha;                                          // 0x01F8(0x0001) (Edit)
	unsigned char                                      bGenerateSphericalParticleNormals;                        // 0x01F8(0x0001) (Edit)
	unsigned char                                      bTangentSpaceNormal;                                      // 0x01F8(0x0001) (Edit)
	unsigned char                                      bUseEmissiveForDynamicAreaLighting;                       // 0x01F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bBlockGI;                                                 // 0x01F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUsedAsSpecialEngineMaterial;                             // 0x01F8(0x0001) (DuplicateTransient)
	unsigned char                                      bUsedWithSkeletalMesh;                                    // 0x01F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithEditorCompositing;                               // 0x01F9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithParticleSprites;                                 // 0x01F9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithBeamTrails;                                      // 0x01F9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithMeshParticles;                                   // 0x01F9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithNiagaraSprites;                                  // 0x01F9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithNiagaraRibbons;                                  // 0x01F9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithNiagaraMeshParticles;                            // 0x01F9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithGeometryCache;                                   // 0x01F9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithStaticLighting;                                  // 0x01FA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithMorphTargets;                                    // 0x01FA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithSplineMeshes;                                    // 0x01FA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithInstancedStaticMeshes;                           // 0x01FA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithGeometryCollections;                             // 0x01FA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsesDistortion;                                          // 0x01FA(0x0001)
	unsigned char                                      bUsedWithClothing;                                        // 0x01FA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData12[0x1];                                       // 0x01FB(0x0001) MISSED OFFSET
	unsigned char                                      bUsedWithWater;                                           // 0x01FC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithHairStrands;                                     // 0x01FC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithLidarPointCloud;                                 // 0x01FC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithVirtualHeightfieldMesh;                          // 0x01FC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData13[0x3];                                       // 0x01FD(0x0003) MISSED OFFSET
	unsigned char                                      bUsedWithUI;                                              // 0x0200(0x0001) (Deprecated)
	unsigned char                                      bAutomaticallySetUsageInEditor;                           // 0x0200(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bFullyRough;                                              // 0x0200(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseFullPrecision;                                        // 0x0200(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseLightmapDirectionality;                               // 0x0200(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseAlphaToCoverage;                                      // 0x0200(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0201(0x0003) MISSED OFFSET
	unsigned char                                      bForwardRenderUsePreintegratedGFForSimpleIBL;             // 0x0204(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData15[0x3];                                       // 0x0205(0x0003) MISSED OFFSET
	unsigned char                                      bUseHQForwardReflections;                                 // 0x0208(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsePlanarForwardReflections;                             // 0x0208(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bNormalCurvatureToRoughness;                              // 0x0208(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	TEnumAsByte<EMaterialTessellationMode>             D3D11TessellationMode;                                    // 0x0209(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableCrackFreeDisplacement;                             // 0x020A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableAdaptiveTessellation;                              // 0x020A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      AllowTranslucentCustomDepthWrites;                        // 0x020A(0x0001) (Edit)
	unsigned char                                      Wireframe;                                                // 0x020A(0x0001) (Edit)
	TEnumAsByte<EMaterialShadingRate>                  ShadingRate;                                              // 0x020B(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCanMaskedBeAssumedOpaque;                                // 0x020C(0x0001)
	unsigned char                                      bIsMasked;                                                // 0x020C(0x0001) (Deprecated)
	unsigned char                                      bIsPreviewMaterial;                                       // 0x020C(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bIsFunctionPreviewMaterial;                               // 0x020C(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bUseMaterialAttributes;                                   // 0x020C(0x0001) (Edit)
	unsigned char                                      bCastRayTracedShadows;                                    // 0x020C(0x0001) (Edit)
	unsigned char                                      bUseTranslucencyVertexFog;                                // 0x020C(0x0001) (Edit)
	unsigned char                                      bApplyCloudFogging;                                       // 0x020C(0x0001) (Edit)
	unsigned char                                      bIsSky;                                                   // 0x020D(0x0001) (Edit)
	unsigned char                                      bComputeFogPerPixel;                                      // 0x020D(0x0001) (Edit)
	unsigned char                                      bOutputTranslucentVelocity;                               // 0x020D(0x0001) (Edit)
	unsigned char                                      bAllowDevelopmentShaderCompile;                           // 0x020D(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bIsMaterialEditorStatsMaterial;                           // 0x020D(0x0001) (Transient, DuplicateTransient)
	TEnumAsByte<EBlendableLocation>                    BlendableLocation;                                        // 0x020E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      BlendableOutputAlpha;                                     // 0x020F(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableStencilTest;                                       // 0x020F(0x0001) (Edit)
	TEnumAsByte<EMaterialStencilCompare>               StencilCompare;                                           // 0x0210(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      StencilRefValue;                                          // 0x0211(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERefractionMode>                       RefractionMode;                                           // 0x0212(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x1];                                       // 0x0213(0x0001) MISSED OFFSET
	int                                                BlendablePriority;                                        // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsBlendable;                                             // 0x0218(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData17[0x3];                                       // 0x0219(0x0003) MISSED OFFSET
	uint32_t                                           UsageFlagWarnings;                                        // 0x021C(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	float                                              RefractionDepthBias;                                      // 0x0220(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       StateId;                                                  // 0x0224(0x0010) (ZeroConstructor, IsPlainOldData)
	float                                              MaxDisplacement;                                          // 0x0234(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData18[0x30];                                      // 0x0238(0x0030) MISSED OFFSET
	struct FMaterialCachedExpressionData               CachedExpressionData;                                     // 0x0268(0x0228)
};


// Class Engine.MaterialBillboardComponent
// size:0x0010 (0x0450 - 0x0460)
class UMaterialBillboardComponent : public UPrimitiveComponent
{
public:
	TArray<struct FMaterialSpriteElement>              Elements;                                                 // 0x0450(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	void SetElements(TArray<struct FMaterialSpriteElement> NewElements)//offset:0x2E71580;
	void AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve)//offset:0x2E71390;
};


// Class Engine.MaterialExpressionAbs
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionActorPositionWS
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionAdd
// size:0x0030 (0x0040 - 0x0070)
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionTextureBase
// size:0x0008 (0x0040 - 0x0048)
class UMaterialExpressionTextureBase : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                                  // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionTextureSample
// size:0x0018 (0x0048 - 0x0060)
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0048(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0054(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionTextureSampleParameter
// size:0x0020 (0x0060 - 0x0080)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	struct FName                                       ParameterName;                                            // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                           // 0x0068(0x0010) (ZeroConstructor, IsPlainOldData)
	struct FName                                       Group;                                                    // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionTextureSampleParameter2D
// size:0x0000 (0x0080 - 0x0080)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:
};


// Class Engine.MaterialExpressionAntialiasedTextureMask
// size:0x0008 (0x0080 - 0x0088)
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                              Threshold;                                                // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureColorChannel>                  Channel;                                                  // 0x0084(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
};


// Class Engine.MaterialExpressionAppendVector
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionArccosine
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionArccosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionArccosineFast
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionArccosineFast : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionArcsine
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionArcsine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionArcsineFast
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionArcsineFast : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionArctangent
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionArctangent : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionArctangent2
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionArctangent2 : public UMaterialExpression
{
public:
	struct FExpressionInput                            Y;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            X;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionArctangent2Fast
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionArctangent2Fast : public UMaterialExpression
{
public:
	struct FExpressionInput                            Y;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            X;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionArctangentFast
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionArctangentFast : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionAtmosphericFogColor
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{
public:
	struct FExpressionInput                            WorldPosition;                                            // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionAtmosphericLightColor
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionAtmosphericLightVector
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionBentNormalCustomOutput
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionBlackBody
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionBlackBody : public UMaterialExpression
{
public:
	struct FExpressionInput                            Temp;                                                     // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionBlendMaterialAttributes
// size:0x0048 (0x0040 - 0x0088)
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    A;                                                        // 0x0040(0x0010)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	struct FMaterialAttributesInput                    B;                                                        // 0x0058(0x0010)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0068(0x0008) MISSED OFFSET
	struct FExpressionInput                            Alpha;                                                    // 0x0070(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x007C(0x0008) MISSED OFFSET
	TEnumAsByte<EMaterialAttributeBlend>               PixelAttributeBlendType;                                  // 0x0084(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialAttributeBlend>               VertexAttributeBlendType;                                 // 0x0085(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0086(0x0002) MISSED OFFSET
};


// Class Engine.MaterialExpressionBreakMaterialAttributes
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    MaterialAttributes;                                       // 0x0040(0x0010)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionBumpOffset
// size:0x0048 (0x0040 - 0x0088)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Height;                                                   // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FExpressionInput                            HeightRatioInput;                                         // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	float                                              HeightRatio;                                              // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ReferencePlane;                                           // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionCameraPositionWS
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionCameraVectorWS
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionCeil
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionParameter
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                            // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                           // 0x0048(0x0010) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionVectorParameter
// size:0x0018 (0x0058 - 0x0070)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                             // 0x0058(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCustomPrimitiveData;                                  // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      PrimitiveDataIndex;                                       // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x006A(0x0006) MISSED OFFSET
};


// Class Engine.MaterialExpressionChannelMaskParameter
// size:0x0008 (0x0070 - 0x0078)
class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
{
public:
	TEnumAsByte<EChannelMaskParameterColor>            MaskChannel;                                              // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
};


// Class Engine.MaterialExpressionClamp
// size:0x0048 (0x0040 - 0x0088)
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Min;                                                      // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FExpressionInput                            Max;                                                      // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	TEnumAsByte<EClampMode>                            ClampMode;                                                // 0x007C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	float                                              MinDefault;                                               // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxDefault;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionCloudSampleAttribute
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionCloudSampleAttribute : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionCollectionParameter
// size:0x0020 (0x0040 - 0x0060)
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{
public:
	class UMaterialParameterCollection*                Collection;                                               // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       ParameterName;                                            // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ParameterId;                                              // 0x0050(0x0010) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionComment
// size:0x0030 (0x0040 - 0x0070)
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int                                                SizeX;                                                    // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                SizeY;                                                    // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData)
	class FString                                      Text;                                                     // 0x0048(0x0010) (Edit, ZeroConstructor)
	struct FLinearColor                                CommentColor;                                             // 0x0058(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                FontSize;                                                 // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
};


// Class Engine.MaterialExpressionComponentMask
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	unsigned char                                      R;                                                        // 0x0054(0x0001) (Edit)
	unsigned char                                      G;                                                        // 0x0054(0x0001) (Edit)
	unsigned char                                      B;                                                        // 0x0054(0x0001) (Edit)
	unsigned char                                      A;                                                        // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
};


// Class Engine.MaterialExpressionConstant
// size:0x0008 (0x0040 - 0x0048)
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
};


// Class Engine.MaterialExpressionConstant2Vector
// size:0x0008 (0x0040 - 0x0048)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              G;                                                        // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionConstant3Vector
// size:0x0010 (0x0040 - 0x0050)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	struct FLinearColor                                Constant;                                                 // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionConstant4Vector
// size:0x0010 (0x0040 - 0x0050)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	struct FLinearColor                                Constant;                                                 // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionConstantBiasScale
// size:0x0020 (0x0040 - 0x0060)
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	float                                              Bias;                                                     // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Scale;                                                    // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
};


// Class Engine.MaterialExpressionCosine
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	float                                              Period;                                                   // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionCrossProduct
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionScalarParameter
// size:0x0008 (0x0058 - 0x0060)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                             // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCustomPrimitiveData;                                  // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      PrimitiveDataIndex;                                       // 0x005D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x005E(0x0002) MISSED OFFSET
};


// Class Engine.MaterialExpressionCurveAtlasRowParameter
// size:0x0028 (0x0060 - 0x0088)
class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
{
public:
	class UCurveLinearColor*                           Curve;                                                    // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveLinearColorAtlas*                      Atlas;                                                    // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FExpressionInput                            InputTime;                                                // 0x0070(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x007C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionCustom
// size:0x0068 (0x0040 - 0x00A8)
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	class FString                                      Code;                                                     // 0x0040(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<ECustomMaterialOutputType>             OutputType;                                               // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	class FString                                      Description;                                              // 0x0058(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomInput>                        Inputs;                                                   // 0x0068(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomOutput>                       AdditionalOutputs;                                        // 0x0078(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomDefine>                       AdditionalDefines;                                        // 0x0088(0x0010) (Edit, ZeroConstructor)
	TArray<class FString>                              IncludeFilePaths;                                         // 0x0098(0x0010) (Edit, ZeroConstructor)
};


// Class Engine.MaterialExpressionDDX
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionDDX : public UMaterialExpression
{
public:
	struct FExpressionInput                            Value;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionDDY
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionDDY : public UMaterialExpression
{
public:
	struct FExpressionInput                            Value;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionDecalDerivative
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionDecalDerivative : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionDecalLifetimeOpacity
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionDecalMipmapLevel
// size:0x0020 (0x0040 - 0x0060)
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{
public:
	struct FExpressionInput                            TextureSize;                                              // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	float                                              ConstWidth;                                               // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstHeight;                                              // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
};


// Class Engine.MaterialExpressionDeltaTime
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionDeltaTime : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionDepthFade
// size:0x0030 (0x0040 - 0x0070)
class UMaterialExpressionDepthFade : public UMaterialExpression
{
public:
	struct FExpressionInput                            InOpacity;                                                // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            FadeDistance;                                             // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              OpacityDefault;                                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FadeDistanceDefault;                                      // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionDepthOfFieldFunction
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{
public:
	TEnumAsByte<EDepthOfFieldFunctionValue>            FunctionValue;                                            // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	struct FExpressionInput                            Depth;                                                    // 0x0044(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionDeriveNormalZ
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                            InXY;                                                     // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionDesaturation
// size:0x0038 (0x0040 - 0x0078)
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Fraction;                                                 // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FLinearColor                                LuminanceFactors;                                         // 0x0068(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionDistance
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionDistanceCullFade
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionDistanceFieldGradient
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                 // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionDistanceToNearestSurface
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                 // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionDivide
// size:0x0030 (0x0040 - 0x0070)
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionDotProduct
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionDynamicParameter
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray<class FString>                              ParamNames;                                               // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	struct FLinearColor                                DefaultValue;                                             // 0x0050(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ParameterIndex;                                           // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
};


// Class Engine.MaterialExpressionEyeAdaptation
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionFeatureLevelSwitch
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionFloor
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionFmod
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionFontSample
// size:0x0010 (0x0040 - 0x0050)
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                                     // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                FontTexturePage;                                          // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
};


// Class Engine.MaterialExpressionFontSampleParameter
// size:0x0020 (0x0050 - 0x0070)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	struct FName                                       ParameterName;                                            // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                           // 0x0058(0x0010) (ZeroConstructor, IsPlainOldData)
	struct FName                                       Group;                                                    // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionFrac
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionFresnel
// size:0x0048 (0x0040 - 0x0088)
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	struct FExpressionInput                            ExponentIn;                                               // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	float                                              Exponent;                                                 // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FExpressionInput                            BaseReflectFractionIn;                                    // 0x0058(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0064(0x0008) MISSED OFFSET
	float                                              BaseReflectFraction;                                      // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FExpressionInput                            Normal;                                                   // 0x0070(0x000C)
	unsigned char                                      UnknownData02[0xC];                                       // 0x007C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionFunctionInput
// size:0x0080 (0x0040 - 0x00C0)
class UMaterialExpressionFunctionInput : public UMaterialExpression
{
public:
	struct FExpressionInput                            Preview;                                                  // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FName                                       InputName;                                                // 0x0054(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	class FString                                      Description;                                              // 0x0060(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       ID;                                                       // 0x0070(0x0010) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EFunctionInputType>                    InputType;                                                // 0x0080(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xF];                                       // 0x0081(0x000F) MISSED OFFSET
	struct FVector4                                    PreviewValue;                                             // 0x0090(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUsePreviewValueAsDefault;                                // 0x00A0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	int                                                SortPriority;                                             // 0x00A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCompilingFunctionPreview;                                // 0x00A8(0x0001) (Transient)
	unsigned char                                      UnknownData04[0x17];                                      // 0x00A9(0x0017) MISSED OFFSET
};


// Class Engine.MaterialExpressionFunctionOutput
// size:0x0048 (0x0040 - 0x0088)
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{
public:
	struct FName                                       OutputName;                                               // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class FString                                      Description;                                              // 0x0048(0x0010) (Edit, ZeroConstructor)
	int                                                SortPriority;                                             // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FExpressionInput                            A;                                                        // 0x005C(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0068(0x0008) MISSED OFFSET
	unsigned char                                      bLastPreviewed;                                           // 0x0070(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	struct FGuid                                       ID;                                                       // 0x0074(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
};


// Class Engine.MaterialExpressionGetMaterialAttributes
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    MaterialAttributes;                                       // 0x0040(0x0010)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	TArray<struct FGuid>                               AttributeGetTypes;                                        // 0x0058(0x0010) (Edit, ZeroConstructor)
};


// Class Engine.MaterialExpressionGIReplace
// size:0x0040 (0x0040 - 0x0080)
class UMaterialExpressionGIReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            StaticIndirect;                                           // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FExpressionInput                            DynamicIndirect;                                          // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0074(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionHairAttributes
// size:0x0008 (0x0040 - 0x0048)
class UMaterialExpressionHairAttributes : public UMaterialExpression
{
public:
	unsigned char                                      bUseTangentSpace;                                         // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
};


// Class Engine.MaterialExpressionHairColor
// size:0x0040 (0x0040 - 0x0080)
class UMaterialExpressionHairColor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Melanin;                                                  // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Redness;                                                  // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FExpressionInput                            DyeColor;                                                 // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0074(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionIf
// size:0x0070 (0x0040 - 0x00B0)
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FExpressionInput                            AGreaterThanB;                                            // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	struct FExpressionInput                            AEqualsB;                                                 // 0x007C(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0088(0x0008) MISSED OFFSET
	struct FExpressionInput                            ALessThanB;                                               // 0x0090(0x000C)
	unsigned char                                      UnknownData04[0x8];                                       // 0x009C(0x0008) MISSED OFFSET
	float                                              EqualsThreshold;                                          // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstAEqualsB;                                            // 0x00AC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
};


// Class Engine.MaterialExpressionInverseLinearInterpolate
// size:0x0050 (0x0040 - 0x0090)
class UMaterialExpressionInverseLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FExpressionInput                            Value;                                                    // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	float                                              ConstA;                                                   // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstValue;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bClampResult;                                             // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0089(0x0007) MISSED OFFSET
};


// Class Engine.MaterialExpressionLightmapUVs
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionLightmassReplace
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                                 // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Lightmass;                                                // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionLightVector
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionLinearInterpolate
// size:0x0048 (0x0040 - 0x0088)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FExpressionInput                            Alpha;                                                    // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	float                                              ConstA;                                                   // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstAlpha;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionLogarithm10
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionLogarithm10 : public UMaterialExpression
{
public:
	struct FExpressionInput                            X;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionLogarithm2
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{
public:
	struct FExpressionInput                            X;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionMakeMaterialAttributes
// size:0x0230 (0x0040 - 0x0270)
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{
public:
	struct FExpressionInput                            BaseColor;                                                // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Metallic;                                                 // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FExpressionInput                            Specular;                                                 // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	struct FExpressionInput                            Roughness;                                                // 0x007C(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0088(0x0008) MISSED OFFSET
	struct FExpressionInput                            Anisotropy;                                               // 0x0090(0x000C)
	unsigned char                                      UnknownData04[0x8];                                       // 0x009C(0x0008) MISSED OFFSET
	struct FExpressionInput                            EmissiveColor;                                            // 0x00A4(0x000C)
	unsigned char                                      UnknownData05[0x8];                                       // 0x00B0(0x0008) MISSED OFFSET
	struct FExpressionInput                            Opacity;                                                  // 0x00B8(0x000C)
	unsigned char                                      UnknownData06[0x8];                                       // 0x00C4(0x0008) MISSED OFFSET
	struct FExpressionInput                            OpacityMask;                                              // 0x00CC(0x000C)
	unsigned char                                      UnknownData07[0x8];                                       // 0x00D8(0x0008) MISSED OFFSET
	struct FExpressionInput                            Normal;                                                   // 0x00E0(0x000C)
	unsigned char                                      UnknownData08[0x8];                                       // 0x00EC(0x0008) MISSED OFFSET
	struct FExpressionInput                            Tangent;                                                  // 0x00F4(0x000C)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0100(0x0008) MISSED OFFSET
	struct FExpressionInput                            WorldPositionOffset;                                      // 0x0108(0x000C)
	unsigned char                                      UnknownData10[0x8];                                       // 0x0114(0x0008) MISSED OFFSET
	struct FExpressionInput                            WorldDisplacement;                                        // 0x011C(0x000C)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0128(0x0008) MISSED OFFSET
	struct FExpressionInput                            TessellationMultiplier;                                   // 0x0130(0x000C)
	unsigned char                                      UnknownData12[0x8];                                       // 0x013C(0x0008) MISSED OFFSET
	struct FExpressionInput                            SubsurfaceColor;                                          // 0x0144(0x000C)
	unsigned char                                      UnknownData13[0x8];                                       // 0x0150(0x0008) MISSED OFFSET
	struct FExpressionInput                            ClearCoat;                                                // 0x0158(0x000C)
	unsigned char                                      UnknownData14[0x8];                                       // 0x0164(0x0008) MISSED OFFSET
	struct FExpressionInput                            ClearCoatRoughness;                                       // 0x016C(0x000C)
	unsigned char                                      UnknownData15[0x8];                                       // 0x0178(0x0008) MISSED OFFSET
	struct FExpressionInput                            AmbientOcclusion;                                         // 0x0180(0x000C)
	unsigned char                                      UnknownData16[0x8];                                       // 0x018C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Refraction;                                               // 0x0194(0x000C)
	unsigned char                                      UnknownData17[0x8];                                       // 0x01A0(0x0008) MISSED OFFSET
	struct FExpressionInput                            CustomizedUVs[0x8];                                       // 0x01A8(0x000C)
	unsigned char                                      UnknownData18[0x40];                                      // 0x0208(0x0040) MISSED OFFSET
	struct FExpressionInput                            PixelDepthOffset;                                         // 0x0248(0x000C)
	unsigned char                                      UnknownData19[0x8];                                       // 0x0254(0x0008) MISSED OFFSET
	struct FExpressionInput                            ShadingModel;                                             // 0x025C(0x000C)
	unsigned char                                      UnknownData20[0x8];                                       // 0x0268(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionMapARPassthroughCameraUV
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionMaterialAttributeLayers
// size:0x00A8 (0x0040 - 0x00E8)
class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                            // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                           // 0x0048(0x0010) (ZeroConstructor, IsPlainOldData)
	struct FMaterialAttributesInput                    Input;                                                    // 0x0058(0x0010)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0068(0x0008) MISSED OFFSET
	struct FMaterialLayersFunctions                    DefaultLayers;                                            // 0x0070(0x0040) (Edit)
	TArray<class UMaterialExpressionMaterialFunctionCall*> LayerCallers;                                             // 0x00B0(0x0010) (ZeroConstructor, Transient)
	int                                                NumActiveLayerCallers;                                    // 0x00C0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	TArray<class UMaterialExpressionMaterialFunctionCall*> BlendCallers;                                             // 0x00C8(0x0010) (ZeroConstructor, Transient)
	int                                                NumActiveBlendCallers;                                    // 0x00D8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsLayerGraphBuilt;                                       // 0x00DC(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0xB];                                       // 0x00DD(0x000B) MISSED OFFSET
};


// Class Engine.MaterialExpressionMaterialFunctionCall
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{
public:
	class UMaterialFunctionInterface*                  MaterialFunction;                                         // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FMaterialParameterInfo                      FunctionParameterInfo;                                    // 0x0048(0x0010) (Transient)
};


// Class Engine.MaterialExpressionMaterialLayerOutput
// size:0x0000 (0x0088 - 0x0088)
class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
{
public:
};


// Class Engine.MaterialExpressionMaterialProxyReplace
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                                 // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            MaterialProxy;                                            // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionMax
// size:0x0030 (0x0040 - 0x0070)
class UMaterialExpressionMax : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionMin
// size:0x0030 (0x0040 - 0x0070)
class UMaterialExpressionMin : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionMultiply
// size:0x0030 (0x0040 - 0x0070)
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionNoise
// size:0x0050 (0x0040 - 0x0090)
class UMaterialExpressionNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                 // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            FilterWidth;                                              // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              Scale;                                                    // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Quality;                                                  // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ENoiseFunction>                        NoiseFunction;                                            // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	unsigned char                                      bTurbulence;                                              // 0x0074(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	int                                                Levels;                                                   // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OutputMin;                                                // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OutputMax;                                                // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LevelScale;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTiling;                                                  // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	uint32_t                                           RepeatSize;                                               // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionNormalize
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                              // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionObjectBounds
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionObjectBounds : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionObjectOrientation
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionObjectPositionWS
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionObjectRadius
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionOneMinus
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionPanner
// size:0x0050 (0x0040 - 0x0090)
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Time;                                                     // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FExpressionInput                            Speed;                                                    // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	float                                              SpeedX;                                                   // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpeedY;                                                   // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFractionalPart;                                          // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0089(0x0007) MISSED OFFSET
};


// Class Engine.MaterialExpressionParticleColor
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleColor : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionParticleDirection
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleDirection : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionParticleMacroUV
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionParticleMotionBlurFade
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionParticlePositionWS
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionParticleRadius
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleRadius : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionParticleRandom
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleRandom : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionParticleRelativeTime
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionParticleSize
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleSize : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionParticleSpeed
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionParticleSubUV
// size:0x0008 (0x0060 - 0x0068)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:
	unsigned char                                      bBlend;                                                   // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
};


// Class Engine.MaterialExpressionParticleSubUVProperties
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionPerInstanceCustomData
// size:0x0020 (0x0040 - 0x0060)
class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
{
public:
	struct FExpressionInput                            DefaultValue;                                             // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	float                                              ConstDefaultValue;                                        // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           DataIndex;                                                // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
};


// Class Engine.MaterialExpressionPerInstanceFadeAmount
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionPerInstanceRandom
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionPixelDepth
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionPixelNormalWS
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionPower
// size:0x0030 (0x0040 - 0x0070)
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                                     // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Exponent;                                                 // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              ConstExponent;                                            // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
};


// Class Engine.MaterialExpressionPrecomputedAOMask
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionPreSkinnedLocalBounds
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionPreSkinnedNormal
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionPreSkinnedPosition
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionPreviousFrameSwitch
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            CurrentFrame;                                             // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            PreviousFrame;                                            // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionQualitySwitch
// size:0x0068 (0x0040 - 0x00A8)
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Inputs[0x4];                                              // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x24];                                      // 0x0084(0x0024) MISSED OFFSET
};


// Class Engine.MaterialExpressionRayTracingQualitySwitch
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Normal;                                                   // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            RayTraced;                                                // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionReflectionCapturePassSwitch
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionReflectionCapturePassSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Reflection;                                               // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionReflectionVectorWS
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{
public:
	struct FExpressionInput                            CustomWorldNormal;                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	unsigned char                                      bNormalizeCustomWorldNormal;                              // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
};


// Class Engine.MaterialExpressionReroute
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionReroute : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionRotateAboutAxis
// size:0x0058 (0x0040 - 0x0098)
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                            NormalizedRotationAxis;                                   // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            RotationAngle;                                            // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FExpressionInput                            PivotPoint;                                               // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	struct FExpressionInput                            Position;                                                 // 0x007C(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0088(0x0008) MISSED OFFSET
	float                                              Period;                                                   // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
};


// Class Engine.MaterialExpressionRotator
// size:0x0038 (0x0040 - 0x0078)
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Time;                                                     // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              CenterX;                                                  // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenterY;                                                  // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Speed;                                                    // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionRound
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionRound : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
// size:0x0090 (0x0040 - 0x00D0)
class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            BaseColor;                                                // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Specular;                                                 // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FExpressionInput                            Roughness;                                                // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	struct FExpressionInput                            Normal;                                                   // 0x007C(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0088(0x0008) MISSED OFFSET
	struct FExpressionInput                            WorldHeight;                                              // 0x0090(0x000C)
	unsigned char                                      UnknownData04[0x8];                                       // 0x009C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Opacity;                                                  // 0x00A4(0x000C)
	unsigned char                                      UnknownData05[0x8];                                       // 0x00B0(0x0008) MISSED OFFSET
	struct FExpressionInput                            mask;                                                     // 0x00B8(0x000C)
	unsigned char                                      UnknownData06[0xC];                                       // 0x00C4(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            VirtualTextureOutput;                                     // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
// size:0x0050 (0x0040 - 0x0090)
class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            WorldPosition;                                            // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FExpressionInput                            MipValue;                                                 // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0074(0x000C) MISSED OFFSET
	class URuntimeVirtualTexture*                      VirtualTexture;                                           // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	ERuntimeVirtualTextureMaterialType                 MaterialType;                                             // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSinglePhysicalSpace;                                     // 0x0089(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAdaptive;                                                // 0x008A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERuntimeVirtualTextureMipValueMode>    MipValueMode;                                             // 0x008B(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERuntimeVirtualTextureTextureAddressMode> TextureAddressMode;                                       // 0x008C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
};


// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
// size:0x0020 (0x0090 - 0x00B0)
class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
{
public:
	struct FName                                       ParameterName;                                            // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                           // 0x0098(0x0010) (ZeroConstructor, IsPlainOldData)
	struct FName                                       Group;                                                    // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionSaturate
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionSaturate : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionSceneColor
// size:0x0038 (0x0040 - 0x0078)
class UMaterialExpressionSceneColor : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	struct FExpressionInput                            Input;                                                    // 0x0044(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	struct FExpressionInput                            OffsetFraction;                                           // 0x0058(0x000C) (Deprecated)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0064(0x0008) MISSED OFFSET
	struct FVector2D                                   ConstInput;                                               // 0x006C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
};


// Class Engine.MaterialExpressionSceneDepth
// size:0x0038 (0x0040 - 0x0078)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	struct FExpressionInput                            Input;                                                    // 0x0044(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	struct FExpressionInput                            Coordinates;                                              // 0x0058(0x000C) (Deprecated)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0064(0x0008) MISSED OFFSET
	struct FVector2D                                   ConstInput;                                               // 0x006C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
};


// Class Engine.MaterialExpressionSceneDepthWithoutWater
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	struct FExpressionInput                            Input;                                                    // 0x0044(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	struct FVector2D                                   ConstInput;                                               // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FallbackDepth;                                            // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
};


// Class Engine.MaterialExpressionSceneTexelSize
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionSceneTexture
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	TEnumAsByte<ESceneTextureId>                       SceneTextureId;                                           // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFiltered;                                                // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0056(0x0002) MISSED OFFSET
};


// Class Engine.MaterialExpressionScreenPosition
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionSetMaterialAttributes
// size:0x0020 (0x0040 - 0x0060)
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
{
public:
	TArray<struct FExpressionInput>                    Inputs;                                                   // 0x0040(0x0010) (ZeroConstructor)
	TArray<struct FGuid>                               AttributeSetTypes;                                        // 0x0050(0x0010) (Edit, ZeroConstructor)
};


// Class Engine.MaterialExpressionShaderStageSwitch
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            PixelShader;                                              // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            VertexShader;                                             // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionShadingModel
// size:0x0008 (0x0040 - 0x0048)
class UMaterialExpressionShadingModel : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialShadingModel>                 ShadingModel;                                             // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
};


// Class Engine.MaterialExpressionShadingPathSwitch
// size:0x0050 (0x0040 - 0x0090)
class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Inputs[0x3];                                              // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0078(0x0018) MISSED OFFSET
};


// Class Engine.MaterialExpressionShadowReplace
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionShadowReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Shadow;                                                   // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionSign
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionSign : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionSine
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	float                                              Period;                                                   // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
// size:0x0050 (0x0040 - 0x0090)
class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            ScatteringCoefficients;                                   // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            AbsorptionCoefficients;                                   // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FExpressionInput                            PhaseG;                                                   // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	struct FExpressionInput                            ColorScaleBehindWater;                                    // 0x007C(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0088(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionSkinningVertexOffsets
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionSkinningVertexOffsets : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
// size:0x0008 (0x0040 - 0x0048)
class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
{
public:
	int                                                LightIndex;                                               // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
};


// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
{
public:
	int                                                LightIndex;                                               // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FExpressionInput                            WorldPosition;                                            // 0x0044(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
// size:0x0008 (0x0040 - 0x0048)
class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
{
public:
	int                                                LightIndex;                                               // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
};


// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
{
public:
	struct FExpressionInput                            WorldPosition;                                            // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionSkyAtmosphereViewLuminance
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionSmoothStep
// size:0x0048 (0x0040 - 0x0088)
class UMaterialExpressionSmoothStep : public UMaterialExpression
{
public:
	struct FExpressionInput                            Min;                                                      // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Max;                                                      // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FExpressionInput                            Value;                                                    // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	float                                              ConstMin;                                                 // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstMax;                                                 // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstValue;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionSobol
// size:0x0048 (0x0040 - 0x0088)
class UMaterialExpressionSobol : public UMaterialExpression
{
public:
	struct FExpressionInput                            Cell;                                                     // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Index;                                                    // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FExpressionInput                            Seed;                                                     // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	uint32_t                                           ConstIndex;                                               // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   ConstSeed;                                                // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionSpeedTree
// size:0x0060 (0x0040 - 0x00A0)
class UMaterialExpressionSpeedTree : public UMaterialExpression
{
public:
	struct FExpressionInput                            GeometryInput;                                            // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            WindInput;                                                // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FExpressionInput                            LODInput;                                                 // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	struct FExpressionInput                            ExtraBendWS;                                              // 0x007C(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0088(0x0008) MISSED OFFSET
	TEnumAsByte<ESpeedTreeGeometryType>                GeometryType;                                             // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESpeedTreeWindType>                    WindType;                                                 // 0x0091(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESpeedTreeLODType>                     LODType;                                                  // 0x0092(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x0093(0x0001) MISSED OFFSET
	float                                              BillboardThreshold;                                       // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAccurateWindVelocities;                                  // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0099(0x0007) MISSED OFFSET
};


// Class Engine.MaterialExpressionSphereMask
// size:0x0058 (0x0040 - 0x0098)
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FExpressionInput                            Radius;                                                   // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	struct FExpressionInput                            Hardness;                                                 // 0x007C(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0088(0x0008) MISSED OFFSET
	float                                              AttenuationRadius;                                        // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              HardnessPercent;                                          // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionSphericalParticleOpacity
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{
public:
	struct FExpressionInput                            Density;                                                  // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	float                                              ConstantDensity;                                          // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionSquareRoot
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionStaticBool
// size:0x0008 (0x0040 - 0x0048)
class UMaterialExpressionStaticBool : public UMaterialExpression
{
public:
	unsigned char                                      Value;                                                    // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
};


// Class Engine.MaterialExpressionStaticBoolParameter
// size:0x0008 (0x0058 - 0x0060)
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{
public:
	unsigned char                                      DefaultValue;                                             // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
};


// Class Engine.MaterialExpressionStaticComponentMaskParameter
// size:0x0008 (0x0058 - 0x0060)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	unsigned char                                      DefaultR;                                                 // 0x0058(0x0001) (Edit)
	unsigned char                                      DefaultG;                                                 // 0x0058(0x0001) (Edit)
	unsigned char                                      DefaultB;                                                 // 0x0058(0x0001) (Edit)
	unsigned char                                      DefaultA;                                                 // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
};


// Class Engine.MaterialExpressionStaticSwitch
// size:0x0040 (0x0040 - 0x0080)
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{
public:
	unsigned char                                      DefaultValue;                                             // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	struct FExpressionInput                            A;                                                        // 0x0044(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	struct FExpressionInput                            B;                                                        // 0x0058(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0064(0x0008) MISSED OFFSET
	struct FExpressionInput                            Value;                                                    // 0x006C(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0078(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionStaticSwitchParameter
// size:0x0000 (0x0060 - 0x0060)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{
public:
};


// Class Engine.MaterialExpressionStep
// size:0x0030 (0x0040 - 0x0070)
class UMaterialExpressionStep : public UMaterialExpression
{
public:
	struct FExpressionInput                            Y;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            X;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              ConstY;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstX;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionSubtract
// size:0x0030 (0x0040 - 0x0070)
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionTangent
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionTangent : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	float                                              Period;                                                   // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionTangentOutput
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionTemporalSobol
// size:0x0038 (0x0040 - 0x0078)
class UMaterialExpressionTemporalSobol : public UMaterialExpression
{
public:
	struct FExpressionInput                            Index;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Seed;                                                     // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	uint32_t                                           ConstIndex;                                               // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   ConstSeed;                                                // 0x006C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
};


// Class Engine.MaterialExpressionTextureCoordinate
// size:0x0010 (0x0040 - 0x0050)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                          // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UTiling;                                                  // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VTiling;                                                  // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnMirrorU;                                                // 0x004C(0x0001) (Edit)
	unsigned char                                      UnMirrorV;                                                // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
};


// Class Engine.MaterialExpressionTextureObject
// size:0x0000 (0x0048 - 0x0048)
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{
public:
};


// Class Engine.MaterialExpressionTextureObjectParameter
// size:0x0000 (0x0080 - 0x0080)
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{
public:
};


// Class Engine.MaterialExpressionTextureProperty
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionTextureProperty : public UMaterialExpression
{
public:
	struct FExpressionInput                            TextureObject;                                            // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	TEnumAsByte<EMaterialExposedTextureProperty>       Property;                                                 // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
};


// Class Engine.MaterialExpressionTextureSampleParameter2DArray
// size:0x0000 (0x0080 - 0x0080)
class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
{
public:
};


// Class Engine.MaterialExpressionTextureSampleParameterCube
// size:0x0000 (0x0080 - 0x0080)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:
};


// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// size:0x0008 (0x0080 - 0x0088)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:
	unsigned char                                      bBlend;                                                   // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
};


// Class Engine.MaterialExpressionTextureSampleParameterVolume
// size:0x0000 (0x0080 - 0x0080)
class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
{
public:
};


// Class Engine.MaterialExpressionThinTranslucentMaterialOutput
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            TransmittanceColor;                                       // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionTime
// size:0x0008 (0x0040 - 0x0048)
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned char                                      bIgnorePause;                                             // 0x0040(0x0001) (Edit)
	unsigned char                                      bOverride_Period;                                         // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              Period;                                                   // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.MaterialExpressionTransform
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	TEnumAsByte<EMaterialVectorCoordTransformSource>   TransformSourceType;                                      // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialVectorCoordTransform>         TransformType;                                            // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0056(0x0002) MISSED OFFSET
};


// Class Engine.MaterialExpressionTransformPosition
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	TEnumAsByte<EMaterialPositionTransformSource>      TransformSourceType;                                      // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialPositionTransformSource>      TransformType;                                            // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0056(0x0002) MISSED OFFSET
};


// Class Engine.MaterialExpressionTruncate
// size:0x0018 (0x0040 - 0x0058)
class UMaterialExpressionTruncate : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};


// Class Engine.MaterialExpressionTwoSidedSign
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionVectorNoise
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionVectorNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                 // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	TEnumAsByte<EVectorNoiseFunction>                  NoiseFunction;                                            // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	int                                                Quality;                                                  // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTiling;                                                  // 0x005C(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	uint32_t                                           TileSize;                                                 // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
};


// Class Engine.MaterialExpressionVertexColor
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionVertexInterpolator
// size:0x0020 (0x0040 - 0x0060)
class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x14];                                      // 0x004C(0x0014) MISSED OFFSET
};


// Class Engine.MaterialExpressionVertexNormalWS
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionVertexTangentWS
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionVertexTangentWS : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionViewProperty
// size:0x0008 (0x0040 - 0x0048)
class UMaterialExpressionViewProperty : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialExposedViewProperty>          Property;                                                 // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
};


// Class Engine.MaterialExpressionViewSize
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionViewSize : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
// size:0x0028 (0x0040 - 0x0068)
class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            No;                                                       // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            Yes;                                                      // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
};


// Class Engine.MaterialExpressionVolumetricAdvancedMaterialInput
// size:0x0000 (0x0040 - 0x0040)
class UMaterialExpressionVolumetricAdvancedMaterialInput : public UMaterialExpression
{
public:
};


// Class Engine.MaterialExpressionVolumetricAdvancedMaterialOutput
// size:0x00B0 (0x0040 - 0x00F0)
class UMaterialExpressionVolumetricAdvancedMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            PhaseG;                                                   // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FExpressionInput                            PhaseG2;                                                  // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FExpressionInput                            PhaseBlend;                                               // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	struct FExpressionInput                            MultiScatteringContribution;                              // 0x007C(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0088(0x0008) MISSED OFFSET
	struct FExpressionInput                            MultiScatteringOcclusion;                                 // 0x0090(0x000C)
	unsigned char                                      UnknownData04[0x8];                                       // 0x009C(0x0008) MISSED OFFSET
	struct FExpressionInput                            MultiScatteringEccentricity;                              // 0x00A4(0x000C)
	unsigned char                                      UnknownData05[0x8];                                       // 0x00B0(0x0008) MISSED OFFSET
	struct FExpressionInput                            ConservativeDensity;                                      // 0x00B8(0x000C)
	unsigned char                                      UnknownData06[0x8];                                       // 0x00C4(0x0008) MISSED OFFSET
	float                                              ConstPhaseG;                                              // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstPhaseG2;                                             // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstPhaseBlend;                                          // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               PerSamplePhaseEvaluation;                                 // 0x00D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x00D9(0x0003) MISSED OFFSET
	uint32_t                                           MultiScatteringApproximationOctaveCount;                  // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstMultiScatteringContribution;                         // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstMultiScatteringOcclusion;                            // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstMultiScatteringEccentricity;                         // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bGroundContribution;                                      // 0x00EC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bGrayScaleMaterial;                                       // 0x00ED(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRayMarchVolumeShadow;                                    // 0x00EE(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x1];                                       // 0x00EF(0x0001) MISSED OFFSET
};


// Class Engine.MaterialExpressionWorldPosition
// size:0x0008 (0x0040 - 0x0048)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:
	TEnumAsByte<EWorldPositionIncludedOffsets>         WorldPositionShaderOffset;                                // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
};


// Class Engine.MaterialFunctionInterface
// size:0x0018 (0x0028 - 0x0040)
class UMaterialFunctionInterface : public UObject
{
public:
	struct FGuid                                       StateId;                                                  // 0x0028(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	EMaterialFunctionUsage                             MaterialFunctionUsage;                                    // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
};


// Class Engine.MaterialFunction
// size:0x0018 (0x0040 - 0x0058)
class UMaterialFunction : public UMaterialFunctionInterface
{
public:
	class FString                                      Description;                                              // 0x0040(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bExposeToLibrary;                                         // 0x0050(0x0001) (Edit)
	unsigned char                                      bPrefixParameterNames;                                    // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
};


// Class Engine.MaterialFunctionInstance
// size:0x0080 (0x0040 - 0x00C0)
class UMaterialFunctionInstance : public UMaterialFunctionInterface
{
public:
	class UMaterialFunctionInterface*                  Parent;                                                   // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterialFunctionInterface*                  Base;                                                     // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                    // 0x0050(0x0010) (Edit, ZeroConstructor)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                    // 0x0060(0x0010) (Edit, ZeroConstructor)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                                   // 0x0070(0x0010) (Edit, ZeroConstructor)
	TArray<struct FFontParameterValue>                 FontParameterValues;                                      // 0x0080(0x0010) (Edit, ZeroConstructor)
	TArray<struct FStaticSwitchParameter>              StaticSwitchParameterValues;                              // 0x0090(0x0010) (Edit, ZeroConstructor)
	TArray<struct FStaticComponentMaskParameter>       StaticComponentMaskParameterValues;                       // 0x00A0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues;                     // 0x00B0(0x0010) (Edit, ZeroConstructor)
};


// Class Engine.MaterialFunctionMaterialLayer
// size:0x0000 (0x0058 - 0x0058)
class UMaterialFunctionMaterialLayer : public UMaterialFunction
{
public:
};


// Class Engine.MaterialFunctionMaterialLayerInstance
// size:0x0000 (0x00C0 - 0x00C0)
class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
{
public:
};


// Class Engine.MaterialFunctionMaterialLayerBlend
// size:0x0000 (0x0058 - 0x0058)
class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
{
public:
};


// Class Engine.MaterialFunctionMaterialLayerBlendInstance
// size:0x0000 (0x00C0 - 0x00C0)
class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
{
public:
};


// Class Engine.MaterialInstanceActor
// size:0x0010 (0x0220 - 0x0230)
class AMaterialInstanceActor : public AActor
{
public:
	TArray<class AActor*>                              TargetActors;                                             // 0x0220(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};


// Class Engine.MaterialInstanceDynamic
// size:0x0050 (0x0360 - 0x03B0)
class UMaterialInstanceDynamic : public UMaterialInstance
{
public:

	void SetVectorParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, const struct FLinearColor& Value)//offset:0x2E82A60;
	void SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value)//offset:0x2E82990;
	void SetTextureParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, class UTexture* Value)//offset:0x2E828A0;
	void SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value)//offset:0x2E827D0;
	void SetScalarParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, float Value)//offset:0x2E826E0;
	void SetScalarParameterValue(const struct FName& ParameterName, float Value)//offset:0x2E82610;
	void K2_InterpolateMaterialInstanceParams(class UMaterialInstance* SourceA, class UMaterialInstance* SourceB, float Alpha)//offset:0x2E821A0;
	struct FLinearColor K2_GetVectorParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo)//offset:0x2E820F0;
	struct FLinearColor K2_GetVectorParameterValue(const struct FName& ParameterName)//offset:0x2E82050;
	class UTexture* K2_GetTextureParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo)//offset:0x2E81FA0;
	class UTexture* K2_GetTextureParameterValue(const struct FName& ParameterName)//offset:0x2E81F00;
	float K2_GetScalarParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo)//offset:0x2E81E50;
	float K2_GetScalarParameterValue(const struct FName& ParameterName)//offset:0x2E81DB0;
	void K2_CopyMaterialInstanceParameters(class UMaterialInterface* Source, bool bQuickParametersOnly)//offset:0x2E81CE0;
	void CopyParameterOverrides(class UMaterialInstance* MaterialInstance)//offset:0x2E81900;
	void CopyInterpParameters(class UMaterialInstance* Source)//offset:0x2E81870;
};


// Class Engine.MaterialParameterCollection
// size:0x0048 (0x0028 - 0x0070)
class UMaterialParameterCollection : public UObject
{
public:
	struct FGuid                                       StateId;                                                  // 0x0028(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	TArray<struct FCollectionScalarParameter>          ScalarParameters;                                         // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCollectionVectorParameter>          VectorParameters;                                         // 0x0048(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0058(0x0018) MISSED OFFSET
};


// Class Engine.MaterialParameterCollectionInstance
// size:0x00E0 (0x0028 - 0x0108)
class UMaterialParameterCollectionInstance : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class UMaterialParameterCollection*                Collection;                                               // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xD0];                                      // 0x0038(0x00D0) MISSED OFFSET
};


// Class Engine.MatineeActor
// size:0x00A8 (0x0220 - 0x02C8)
class AMatineeActor : public AActor
{
public:
	class UInterpData*                                 MatineeData;                                              // 0x0220(0x0008) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	struct FName                                       MatineeControllerName;                                    // 0x0228(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              PlayRate;                                                 // 0x0230(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPlayOnLevelLoad;                                         // 0x0234(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceStartPos;                                           // 0x0234(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0235(0x0003) MISSED OFFSET
	float                                              ForceStartPosition;                                       // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLooping;                                                 // 0x023C(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bRewindOnPlay;                                            // 0x023C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNoResetOnRewind;                                         // 0x023C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bRewindIfAlreadyPlaying;                                  // 0x023C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableRadioFilter;                                      // 0x023C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bClientSideOnly;                                          // 0x023C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSkipUpdateIfNotVisible;                                  // 0x023C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsSkippable;                                             // 0x023C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x023D(0x0003) MISSED OFFSET
	int                                                PreferredSplitScreenNum;                                  // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDisableMovementInput;                                    // 0x0244(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableLookAtInput;                                      // 0x0244(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHidePlayer;                                              // 0x0244(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHideHud;                                                 // 0x0244(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0245(0x0003) MISSED OFFSET
	TArray<struct FInterpGroupActorInfo>               GroupActorInfos;                                          // 0x0248(0x0010) (Net, ZeroConstructor)
	unsigned char                                      bShouldShowGore;                                          // 0x0258(0x0001) (Transient)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0259(0x0007) MISSED OFFSET
	TArray<class UInterpGroupInst*>                    GroupInst;                                                // 0x0260(0x0010) (ZeroConstructor, Transient)
	TArray<struct FCameraCutInfo>                      CameraCuts;                                               // 0x0270(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      bIsPlaying;                                               // 0x0280(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, Transient, EditConst)
	unsigned char                                      bReversePlayback;                                         // 0x0280(0x0001) (Net)
	unsigned char                                      bPaused;                                                  // 0x0280(0x0001) (Net, Transient)
	unsigned char                                      bPendingStop;                                             // 0x0280(0x0001) (Net, Transient)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0281(0x0003) MISSED OFFSET
	float                                              InterpPosition;                                           // 0x0284(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0288(0x0004) MISSED OFFSET
	unsigned char                                      ReplicationForceIsPlaying;                                // 0x028C(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x028D(0x0003) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnPlay;                                                   // 0x0290(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnStop;                                                   // 0x02A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnPause;                                                  // 0x02B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData07[0x8];                                       // 0x02C0(0x0008) MISSED OFFSET

	void Stop()//offset:0xF6E9A0;
	void SetPosition(float NewPosition, bool bJump)//offset:0x2E82530;
	void SetLoopingState(bool bNewLooping)//offset:0x2E824A0;
	void Reverse()//offset:0x2E822C0;
	void Play()//offset:0xF45DD0;
	void Pause()//offset:0x939270;
	void EnableGroupByName(const class FString& GroupName, bool bEnable)//offset:0x2E81990;
	void ChangePlaybackDirection()//offset:0x2DA8FC0;
};


// Class Engine.MatineeActorCameraAnim
// size:0x0008 (0x02C8 - 0x02D0)
class AMatineeActorCameraAnim : public AMatineeActor
{
public:
	class UCameraAnim*                                 CameraAnim;                                               // 0x02C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
};


// Class Engine.MatineeAnimInterface
// size:0x0000 (0x0028 - 0x0028)
class UMatineeAnimInterface : public UInterface
{
public:
};


// Class Engine.MatineeInterface
// size:0x0000 (0x0028 - 0x0028)
class UMatineeInterface : public UInterface
{
public:
};


// Class Engine.MeshMergeCullingVolume
// size:0x0000 (0x0258 - 0x0258)
class AMeshMergeCullingVolume : public AVolume
{
public:
};


// Class Engine.MeshSimplificationSettings
// size:0x0008 (0x0038 - 0x0040)
class UMeshSimplificationSettings : public UDeveloperSettings
{
public:
	struct FName                                       MeshReductionModuleName;                                  // 0x0038(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
};


// Class Engine.MeshVertexPainterKismetLibrary
// size:0x0000 (0x0028 - 0x0028)
class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
{
public:

	static void RemovePaintedVertices(class UStaticMeshComponent* StaticMeshComponent)//offset:0x2E85DC0;
	static void PaintVerticesSingleColor(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& FillColor, bool bConvertToSRGB)//offset:0x2E85B80;
	static void PaintVerticesLerpAlongAxis(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& StartColor, const struct FLinearColor& EndColor, EVertexPaintAxis Axis, bool bConvertToSRGB)//offset:0x2E859C0;
};


// Class Engine.MicroTransactionBase
// size:0x0030 (0x0038 - 0x0068)
class UMicroTransactionBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FPurchaseInfo>                       AvailableProducts;                                        // 0x0038(0x0010) (ZeroConstructor)
	class FString                                      LastError;                                                // 0x0048(0x0010) (ZeroConstructor)
	class FString                                      LastErrorSolution;                                        // 0x0058(0x0010) (ZeroConstructor)
};


// Class Engine.ModelComponent
// size:0x0040 (0x0450 - 0x0490)
class UModelComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0450(0x0018) MISSED OFFSET
	class UBodySetup*                                  ModelBodySetup;                                           // 0x0468(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0470(0x0020) MISSED OFFSET
};


// Class Engine.MorphTarget
// size:0x0018 (0x0028 - 0x0040)
class UMorphTarget : public UObject
{
public:
	class USkeletalMesh*                               BaseSkelMesh;                                             // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET
};


// Class Engine.NavAgentInterface
// size:0x0000 (0x0028 - 0x0028)
class UNavAgentInterface : public UInterface
{
public:
};


// Class Engine.NavAreaBase
// size:0x0008 (0x0028 - 0x0030)
class UNavAreaBase : public UObject
{
public:
};


// Class Engine.NavCollisionBase
// size:0x0048 (0x0028 - 0x0070)
class UNavCollisionBase : public UObject
{
public:
	unsigned char                                      bIsDynamicObstacle;                                       // 0x0028(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x47];                                      // 0x0029(0x0047) MISSED OFFSET
};


// Class Engine.NavEdgeProviderInterface
// size:0x0000 (0x0028 - 0x0028)
class UNavEdgeProviderInterface : public UInterface
{
public:
};


// Class Engine.NavigationDataChunk
// size:0x0008 (0x0028 - 0x0030)
class UNavigationDataChunk : public UObject
{
public:
	struct FName                                       NavigationDataName;                                       // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.NavigationDataInterface
// size:0x0000 (0x0028 - 0x0028)
class UNavigationDataInterface : public UInterface
{
public:
};


// Class Engine.NavigationSystemBase
// size:0x0000 (0x0028 - 0x0028)
class UNavigationSystemBase : public UObject
{
public:
};


// Class Engine.NavigationSystemConfig
// size:0x0028 (0x0028 - 0x0050)
class UNavigationSystemConfig : public UObject
{
public:
	struct FSoftClassPath                              NavigationSystemClass;                                    // 0x0028(0x0018) (Edit, ZeroConstructor)
	struct FNavAgentSelector                           SupportedAgentsMask;                                      // 0x0040(0x0004) (Edit)
	struct FName                                       DefaultAgentName;                                         // 0x0044(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsOverriden;                                             // 0x004C(0x0001) (Edit, EditConst)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
};


// Class Engine.NullNavSysConfig
// size:0x0000 (0x0050 - 0x0050)
class UNullNavSysConfig : public UNavigationSystemConfig
{
public:
};


// Class Engine.NavLinkDefinition
// size:0x0028 (0x0028 - 0x0050)
class UNavLinkDefinition : public UObject
{
public:
	TArray<struct FNavigationLink>                     Links;                                                    // 0x0028(0x0010) (Edit, ZeroConstructor)
	TArray<struct FNavigationSegmentLink>              SegmentLinks;                                             // 0x0038(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
};


// Class Engine.NavPathObserverInterface
// size:0x0000 (0x0028 - 0x0028)
class UNavPathObserverInterface : public UInterface
{
public:
};


// Class Engine.NavRelevantInterface
// size:0x0000 (0x0028 - 0x0028)
class UNavRelevantInterface : public UInterface
{
public:
};


// Class Engine.SimulatedClientNetConnection
// size:0x0000 (0x1B58 - 0x1B58)
class USimulatedClientNetConnection : public UNetConnection
{
public:
};


// Class Engine.NetPushModelHelpers
// size:0x0000 (0x0028 - 0x0028)
class UNetPushModelHelpers : public UBlueprintFunctionLibrary
{
public:

	static void MarkPropertyDirtyFromRepIndex(class UObject* Object, int RepIndex, const struct FName& PropertyName)//offset:0x2E8CC30;
	static void MarkPropertyDirty(class UObject* Object, const struct FName& PropertyName)//offset:0x2E8CB70;
};


// Class Engine.NetworkPredictionInterface
// size:0x0000 (0x0028 - 0x0028)
class UNetworkPredictionInterface : public UInterface
{
public:
};


// Class Engine.NetworkSettings
// size:0x0020 (0x0038 - 0x0058)
class UNetworkSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bVerifyPeer;                                              // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bEnableMultiplayerWorldOriginRebasing;                    // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                MaxRepArraySize;                                          // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxRepArrayMemory;                                        // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	TArray<struct FNetworkEmulationProfileDescription> NetworkEmulationProfiles;                                 // 0x0048(0x0010) (ZeroConstructor, Config)
};


// Class Engine.NodeMappingContainer
// size:0x0140 (0x0028 - 0x0168)
class UNodeMappingContainer : public UObject
{
public:
	TMap<struct FName, struct FNodeItem>               SourceItems;                                              // 0x0028(0x0050) (Edit, EditConst)
	TMap<struct FName, struct FNodeItem>               TargetItems;                                              // 0x0078(0x0050) (Edit, EditConst)
	TMap<struct FName, struct FName>                   SourceToTarget;                                           // 0x00C8(0x0050) (Edit)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0118(0x0028) UNKNOWN PROPERTY: 
	unsigned char                                      UnknownData01[0x28];                                      // 0x0140(0x0028) UNKNOWN PROPERTY: 
};


// Class Engine.NodeMappingProviderInterface
// size:0x0000 (0x0028 - 0x0028)
class UNodeMappingProviderInterface : public UInterface
{
public:
};


// Class Engine.Note
// size:0x0000 (0x0220 - 0x0220)
class ANote : public AActor
{
public:
};


// Class Engine.ObjectLibrary
// size:0x0080 (0x0028 - 0x00A8)
class UObjectLibrary : public UObject
{
public:
	class UObject*                                     ObjectBaseClass;                                          // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHasBlueprintClasses;                                     // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<class UObject*>                             Objects;                                                  // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<TWeakObjectPtr<class UObject>>              WeakObjects;                                              // 0x0048(0x0010) (ZeroConstructor)
	bool                                               bUseWeakReferences;                                       // 0x0058(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsFullyLoaded;                                           // 0x0059(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4E];                                      // 0x005A(0x004E) MISSED OFFSET
};


// Class Engine.ObjectReferencer
// size:0x0010 (0x0028 - 0x0038)
class UObjectReferencer : public UObject
{
public:
	TArray<class UObject*>                             ReferencedObjects;                                        // 0x0028(0x0010) (Edit, ZeroConstructor)
};


// Class Engine.ObjectTraceWorldSubsystem
// size:0x0008 (0x0030 - 0x0038)
class UObjectTraceWorldSubsystem : public UWorldSubsystem
{
public:
};


// Class Engine.PackageMapClient
// size:0x0318 (0x00E0 - 0x03F8)
class UPackageMapClient : public UPackageMap
{
public:
};


// Class Engine.PainCausingVolume
// size:0x0028 (0x0268 - 0x0290)
class APainCausingVolume : public APhysicsVolume
{
public:
	unsigned char                                      bPainCausing;                                             // 0x0268(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0269(0x0003) MISSED OFFSET
	float                                              DamagePerSec;                                             // 0x026C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UDamageType*                                 DamageType;                                               // 0x0270(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PainInterval;                                             // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEntryPain;                                               // 0x027C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      BACKUP_bPainCausing;                                      // 0x027C(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x027D(0x0003) MISSED OFFSET
	class AController*                                 DamageInstigator;                                         // 0x0280(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0288(0x0008) MISSED OFFSET
};


// Class Engine.ParticleEmitter
// size:0x0190 (0x0028 - 0x01B8)
class UParticleEmitter : public UObject
{
public:
	struct FName                                       EmitterName;                                              // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubUVDataOffset;                                          // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EEmitterRenderMode>                    EmitterRenderMode;                                        // 0x0034(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EParticleSignificanceLevel                         SignificanceLevel;                                        // 0x0035(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0036(0x0001) MISSED OFFSET
	unsigned char                                      bUseLegacySpawningBehavior;                               // 0x0037(0x0001) (Edit)
	unsigned char                                      ConvertedModules;                                         // 0x0037(0x0001)
	unsigned char                                      bIsSoloing;                                               // 0x0037(0x0001) (Transient)
	unsigned char                                      bCookedOut;                                               // 0x0037(0x0001)
	unsigned char                                      bDisabledLODsKeepEmitterAlive;                            // 0x0037(0x0001) (Edit)
	unsigned char                                      bDisableWhenInsignficant;                                 // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	TArray<class UParticleLODLevel*>                   LODLevels;                                                // 0x0040(0x0010) (ExportObject, ZeroConstructor)
	int                                                PeakActiveParticles;                                      // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                InitialAllocationCount;                                   // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              QualityLevelSpawnRateScale;                               // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           DetailModeBitmask;                                        // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x158];                                     // 0x0060(0x0158) MISSED OFFSET
};


// Class Engine.ParticleEventManager
// size:0x0000 (0x0220 - 0x0220)
class AParticleEventManager : public AActor
{
public:
};


// Class Engine.ParticleLODLevel
// size:0x0090 (0x0028 - 0x00B8)
class UParticleLODLevel : public UObject
{
public:
	int                                                Level;                                                    // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled;                                                 // 0x002C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	class UParticleModuleRequired*                     RequiredModule;                                           // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UParticleModule*>                     Modules;                                                  // 0x0038(0x0010) (ExportObject, ZeroConstructor)
	class UParticleModuleTypeDataBase*                 TypeDataModule;                                           // 0x0048(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	class UParticleModuleSpawn*                        SpawnModule;                                              // 0x0050(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	class UParticleModuleEventGenerator*               EventGenerator;                                           // 0x0058(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	TArray<class UParticleModuleSpawnBase*>            SpawningModules;                                          // 0x0060(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModule*>                     SpawnModules;                                             // 0x0070(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModule*>                     UpdateModules;                                            // 0x0080(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModuleOrbit*>                OrbitModules;                                             // 0x0090(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModuleEventReceiverBase*>    EventReceiverModules;                                     // 0x00A0(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      ConvertedModules;                                         // 0x00B0(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	int                                                PeakActiveParticles;                                      // 0x00B4(0x0004) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.ParticleModule
// size:0x0008 (0x0028 - 0x0030)
class UParticleModule : public UObject
{
public:
	unsigned char                                      bSpawnModule;                                             // 0x0028(0x0001)
	unsigned char                                      bUpdateModule;                                            // 0x0028(0x0001)
	unsigned char                                      bFinalUpdateModule;                                       // 0x0028(0x0001)
	unsigned char                                      bUpdateForGPUEmitter;                                     // 0x0028(0x0001)
	unsigned char                                      bCurvesAsColor;                                           // 0x0028(0x0001)
	unsigned char                                      b3DDrawMode;                                              // 0x0028(0x0001) (Edit)
	unsigned char                                      bSupported3DDrawMode;                                     // 0x0028(0x0001)
	unsigned char                                      bEnabled;                                                 // 0x0028(0x0001)
	unsigned char                                      bEditable;                                                // 0x0029(0x0001)
	unsigned char                                      LODDuplicate;                                             // 0x0029(0x0001)
	unsigned char                                      bSupportsRandomSeed;                                      // 0x0029(0x0001)
	unsigned char                                      bRequiresLoopingNotification;                             // 0x0029(0x0001)
	unsigned char                                      LODValidity;                                              // 0x002A(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x002B(0x0005) MISSED OFFSET
};


// Class Engine.ParticleModuleAccelerationBase
// size:0x0008 (0x0030 - 0x0038)
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	unsigned char                                      bAlwaysInWorldSpace;                                      // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleAcceleration
// size:0x0050 (0x0038 - 0x0088)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      Acceleration;                                             // 0x0038(0x0048) (Edit)
	unsigned char                                      bApplyOwnerScale;                                         // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleAccelerationConstant
// size:0x0010 (0x0038 - 0x0048)
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{
public:
	struct FVector                                     Acceleration;                                             // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
};


// Class Engine.ParticleModuleAccelerationDrag
// size:0x0038 (0x0038 - 0x0070)
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                          DragCoefficient;                                          // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FRawDistributionFloat                       DragCoefficientRaw;                                       // 0x0040(0x0030) (Edit)
};


// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// size:0x0038 (0x0038 - 0x0070)
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                          DragScale;                                                // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FRawDistributionFloat                       DragScaleRaw;                                             // 0x0040(0x0030) (Edit)
};


// Class Engine.ParticleModuleAccelerationOverLifetime
// size:0x0048 (0x0038 - 0x0080)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      AccelOverLife;                                            // 0x0038(0x0048) (Edit)
};


// Class Engine.ParticleModuleAttractorBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleAttractorBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleAttractorLine
// size:0x0078 (0x0030 - 0x00A8)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     EndPoint0;                                                // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     EndPoint1;                                                // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRawDistributionFloat                       Range;                                                    // 0x0048(0x0030) (Edit)
	struct FRawDistributionFloat                       Strength;                                                 // 0x0078(0x0030) (Edit)
};


// Class Engine.ParticleModuleAttractorParticle
// size:0x0080 (0x0030 - 0x00B0)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData)
	struct FRawDistributionFloat                       Range;                                                    // 0x0038(0x0030) (Edit)
	unsigned char                                      bStrengthByDistance;                                      // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       Strength;                                                 // 0x0070(0x0030) (Edit)
	unsigned char                                      bAffectBaseVelocity;                                      // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	TEnumAsByte<EAttractorParticleSelectionMethod>     SelectionMethod;                                          // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	unsigned char                                      bRenewSource;                                             // 0x00A8(0x0001) (Edit)
	unsigned char                                      bInheritSourceVel;                                        // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	int                                                LastSelIndex;                                             // 0x00AC(0x0004) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.ParticleModuleAttractorPoint
// size:0x00B0 (0x0030 - 0x00E0)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                      Position;                                                 // 0x0030(0x0048) (Edit)
	struct FRawDistributionFloat                       Range;                                                    // 0x0078(0x0030) (Edit)
	struct FRawDistributionFloat                       Strength;                                                 // 0x00A8(0x0030) (Edit)
	unsigned char                                      StrengthByDistance;                                       // 0x00D8(0x0001) (Edit)
	unsigned char                                      bAffectBaseVelocity;                                      // 0x00D8(0x0001) (Edit)
	unsigned char                                      bOverrideVelocity;                                        // 0x00D8(0x0001) (Edit)
	unsigned char                                      bUseWorldSpacePosition;                                   // 0x00D8(0x0001) (Edit)
	unsigned char                                      Positive_X;                                               // 0x00D8(0x0001) (Edit)
	unsigned char                                      Positive_Y;                                               // 0x00D8(0x0001) (Edit)
	unsigned char                                      Positive_Z;                                               // 0x00D8(0x0001) (Edit)
	unsigned char                                      Negative_X;                                               // 0x00D8(0x0001) (Edit)
	unsigned char                                      Negative_Y;                                               // 0x00D9(0x0001) (Edit)
	unsigned char                                      Negative_Z;                                               // 0x00D9(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00DA(0x0006) MISSED OFFSET
};


// Class Engine.ParticleModuleAttractorPointGravity
// size:0x0048 (0x0030 - 0x0078)
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     Position;                                                 // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Radius;                                                   // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UDistributionFloat*                          Strength;                                                 // 0x0040(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FRawDistributionFloat                       StrengthRaw;                                              // 0x0048(0x0030) (Edit, NoClear)
};


// Class Engine.ParticleModuleBeamBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleBeamBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleBeamModifier
// size:0x00D8 (0x0030 - 0x0108)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeamModifierType>                     ModifierType;                                             // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FBeamModifierOptions                        PositionOptions;                                          // 0x0034(0x0004) (Edit)
	struct FRawDistributionVector                      Position;                                                 // 0x0038(0x0048) (Edit)
	struct FBeamModifierOptions                        TangentOptions;                                           // 0x0080(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      Tangent;                                                  // 0x0088(0x0048) (Edit)
	unsigned char                                      bAbsoluteTangent;                                         // 0x00D0(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	struct FBeamModifierOptions                        StrengthOptions;                                          // 0x00D4(0x0004) (Edit)
	struct FRawDistributionFloat                       Strength;                                                 // 0x00D8(0x0030) (Edit)
};


// Class Engine.ParticleModuleBeamNoise
// size:0x0160 (0x0030 - 0x0190)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	unsigned char                                      bLowFreq_Enabled;                                         // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	int                                                Frequency;                                                // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Frequency_LowRange;                                       // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      NoiseRange;                                               // 0x0040(0x0048) (Edit)
	struct FRawDistributionFloat                       NoiseRangeScale;                                          // 0x0088(0x0030) (Edit)
	unsigned char                                      bNRScaleEmitterTime;                                      // 0x00B8(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00B9(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      NoiseSpeed;                                               // 0x00C0(0x0048) (Edit)
	unsigned char                                      bSmooth;                                                  // 0x0108(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0109(0x0003) MISSED OFFSET
	float                                              NoiseLockRadius;                                          // 0x010C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bNoiseLock;                                               // 0x0110(0x0001)
	unsigned char                                      bOscillate;                                               // 0x0110(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	float                                              NoiseLockTime;                                            // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoiseTension;                                             // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseNoiseTangents;                                        // 0x011C(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x011D(0x0003) MISSED OFFSET
	struct FRawDistributionFloat                       NoiseTangentStrength;                                     // 0x0120(0x0030) (Edit)
	int                                                NoiseTessellation;                                        // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTargetNoise;                                             // 0x0154(0x0001) (Edit)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0155(0x0003) MISSED OFFSET
	float                                              FrequencyDistance;                                        // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bApplyNoiseScale;                                         // 0x015C(0x0001) (Edit)
	unsigned char                                      UnknownData07[0x3];                                       // 0x015D(0x0003) MISSED OFFSET
	struct FRawDistributionFloat                       NoiseScale;                                               // 0x0160(0x0030) (Edit)
};


// Class Engine.ParticleModuleBeamSource
// size:0x00E8 (0x0030 - 0x0118)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeam2SourceTargetMethod>              SourceMethod;                                             // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FName                                       SourceName;                                               // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSourceAbsolute;                                          // 0x003C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	struct FRawDistributionVector                      Source;                                                   // 0x0040(0x0048) (Edit)
	unsigned char                                      bLockSource;                                              // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	TEnumAsByte<EBeam2SourceTargetTangentMethod>       SourceTangentMethod;                                      // 0x008C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	struct FRawDistributionVector                      SourceTangent;                                            // 0x0090(0x0048) (Edit)
	unsigned char                                      bLockSourceTangent;                                       // 0x00D8(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x7];                                       // 0x00D9(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       SourceStrength;                                           // 0x00E0(0x0030) (Edit)
	unsigned char                                      bLockSourceStength;                                       // 0x0110(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0111(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleBeamTarget
// size:0x00F0 (0x0030 - 0x0120)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeam2SourceTargetMethod>              TargetMethod;                                             // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FName                                       TargetName;                                               // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      Target;                                                   // 0x0040(0x0048) (Edit)
	unsigned char                                      bTargetAbsolute;                                          // 0x0088(0x0001) (Edit)
	unsigned char                                      bLockTarget;                                              // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	TEnumAsByte<EBeam2SourceTargetTangentMethod>       TargetTangentMethod;                                      // 0x008C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	struct FRawDistributionVector                      TargetTangent;                                            // 0x0090(0x0048) (Edit)
	unsigned char                                      bLockTargetTangent;                                       // 0x00D8(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x7];                                       // 0x00D9(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       TargetStrength;                                           // 0x00E0(0x0030) (Edit)
	unsigned char                                      bLockTargetStength;                                       // 0x0110(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	float                                              LockRadius;                                               // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0118(0x0008) MISSED OFFSET
};


// Class Engine.ParticleModuleCameraBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleCameraBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleCameraOffset
// size:0x0038 (0x0030 - 0x0068)
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{
public:
	struct FRawDistributionFloat                       CameraOffset;                                             // 0x0030(0x0030) (Edit)
	unsigned char                                      bSpawnTimeOnly;                                           // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	TEnumAsByte<EParticleCameraOffsetUpdateMethod>     UpdateMethod;                                             // 0x0064(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
};


// Class Engine.ParticleModuleCollisionBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleCollisionBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleCollision
// size:0x0160 (0x0030 - 0x0190)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                      DampingFactor;                                            // 0x0030(0x0048) (Edit)
	struct FRawDistributionVector                      DampingFactorRotation;                                    // 0x0078(0x0048) (Edit)
	struct FRawDistributionFloat                       MaxCollisions;                                            // 0x00C0(0x0030) (Edit)
	TEnumAsByte<EParticleCollisionComplete>            CollisionCompletionOption;                                // 0x00F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00F1(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<EObjectTypeQuery>>              CollisionTypes;                                           // 0x00F8(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0108(0x0008) MISSED OFFSET
	unsigned char                                      bApplyPhysics;                                            // 0x0110(0x0001) (Edit)
	unsigned char                                      bIgnoreTriggerVolumes;                                    // 0x0110(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0111(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       ParticleMass;                                             // 0x0118(0x0030) (Edit)
	float                                              DirScalar;                                                // 0x0148(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPawnsDoNotDecrementCount;                                // 0x014C(0x0001) (Edit)
	unsigned char                                      bOnlyVerticalNormalsDecrementCount;                       // 0x014C(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x014D(0x0003) MISSED OFFSET
	float                                              VerticalFudgeFactor;                                      // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0154(0x0004) MISSED OFFSET
	struct FRawDistributionFloat                       DelayAmount;                                              // 0x0158(0x0030) (Edit)
	unsigned char                                      bDropDetail;                                              // 0x0188(0x0001) (Edit)
	unsigned char                                      bCollideOnlyIfVisible;                                    // 0x0188(0x0001) (Edit)
	unsigned char                                      bIgnoreSourceActor;                                       // 0x0188(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0189(0x0003) MISSED OFFSET
	float                                              MaxCollisionDistance;                                     // 0x018C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.ParticleModuleCollisionGPU
// size:0x0078 (0x0030 - 0x00A8)
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionFloat                       Resilience;                                               // 0x0030(0x0030) (Edit)
	struct FRawDistributionFloat                       ResilienceScaleOverLife;                                  // 0x0060(0x0030) (Edit)
	float                                              Friction;                                                 // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomSpread;                                             // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomDistribution;                                       // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RadiusScale;                                              // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RadiusBias;                                               // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleCollisionResponse>            Response;                                                 // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleCollisionMode>                CollisionMode;                                            // 0x00A5(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00A6(0x0002) MISSED OFFSET
};


// Class Engine.ParticleModuleColorBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleColorBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleColor
// size:0x0080 (0x0030 - 0x00B0)
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      StartColor;                                               // 0x0030(0x0048) (Edit)
	struct FRawDistributionFloat                       StartAlpha;                                               // 0x0078(0x0030) (Edit)
	unsigned char                                      bClampAlpha;                                              // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleColor_Seeded
// size:0x0020 (0x00B0 - 0x00D0)
class UParticleModuleColor_Seeded : public UParticleModuleColor
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x00B0(0x0020) (Edit)
};


// Class Engine.ParticleModuleColorOverLife
// size:0x0080 (0x0030 - 0x00B0)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x0030(0x0048) (Edit)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x0078(0x0030) (Edit)
	unsigned char                                      bClampAlpha;                                              // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleColorScaleOverLife
// size:0x0080 (0x0030 - 0x00B0)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverLife;                                       // 0x0030(0x0048) (Edit)
	struct FRawDistributionFloat                       AlphaScaleOverLife;                                       // 0x0078(0x0030) (Edit)
	unsigned char                                      bEmitterTime;                                             // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleEventBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleEventBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleEventGenerator
// size:0x0010 (0x0030 - 0x0040)
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray<struct FParticleEvent_GenerateInfo>         Events;                                                   // 0x0030(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear)
};


// Class Engine.ParticleModuleEventReceiverBase
// size:0x0010 (0x0030 - 0x0040)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	TEnumAsByte<EParticleEventType>                    EventGeneratorType;                                       // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FName                                       EventName;                                                // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
};


// Class Engine.ParticleModuleEventReceiverKillParticles
// size:0x0008 (0x0040 - 0x0048)
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	unsigned char                                      bStopSpawning;                                            // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleEventReceiverSpawn
// size:0x0098 (0x0040 - 0x00D8)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	struct FRawDistributionFloat                       SpawnCount;                                               // 0x0040(0x0030) (Edit)
	unsigned char                                      bUseParticleTime;                                         // 0x0070(0x0001) (Edit)
	unsigned char                                      bUsePSysLocation;                                         // 0x0070(0x0001) (Edit)
	unsigned char                                      bInheritVelocity;                                         // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      InheritVelocityScale;                                     // 0x0078(0x0048) (Edit)
	TArray<class UPhysicalMaterial*>                   PhysicalMaterials;                                        // 0x00C0(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bBanPhysicalMaterials;                                    // 0x00D0(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleEventSendToGame
// size:0x0000 (0x0028 - 0x0028)
class UParticleModuleEventSendToGame : public UObject
{
public:
};


// Class Engine.ParticleModuleKillBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleKillBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleKillBox
// size:0x0098 (0x0030 - 0x00C8)
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                      LowerLeftCorner;                                          // 0x0030(0x0048) (Edit)
	struct FRawDistributionVector                      UpperRightCorner;                                         // 0x0078(0x0048) (Edit)
	unsigned char                                      bAbsolute;                                                // 0x00C0(0x0001) (Edit)
	unsigned char                                      bKillInside;                                              // 0x00C0(0x0001) (Edit)
	unsigned char                                      bAxisAlignedAndFixedSize;                                 // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleKillHeight
// size:0x0038 (0x0030 - 0x0068)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                                   // 0x0030(0x0030) (Edit)
	unsigned char                                      bAbsolute;                                                // 0x0060(0x0001) (Edit)
	unsigned char                                      bFloor;                                                   // 0x0060(0x0001) (Edit)
	unsigned char                                      bApplyPSysScale;                                          // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleLifetimeBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleLifetimeBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleLifetime
// size:0x0030 (0x0030 - 0x0060)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                       LifeTime;                                                 // 0x0030(0x0030) (Edit)
};


// Class Engine.ParticleModuleLifetime_Seeded
// size:0x0020 (0x0060 - 0x0080)
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0060(0x0020) (Edit)
};


// Class Engine.ParticleModuleLightBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleLightBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleLight
// size:0x00F0 (0x0030 - 0x0120)
class UParticleModuleLight : public UParticleModuleLightBase
{
public:
	bool                                               bUseInverseSquaredFalloff;                                // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAffectsTranslucency;                                     // 0x0031(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPreviewLightRadius;                                      // 0x0032(0x0001) (Edit, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0033(0x0001) MISSED OFFSET
	float                                              SpawnFraction;                                            // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRawDistributionVector                      ColorScaleOverLife;                                       // 0x0038(0x0048) (Edit)
	struct FRawDistributionFloat                       BrightnessOverLife;                                       // 0x0080(0x0030) (Edit)
	struct FRawDistributionFloat                       RadiusScale;                                              // 0x00B0(0x0030) (Edit)
	struct FRawDistributionFloat                       LightExponent;                                            // 0x00E0(0x0030) (Edit)
	struct FLightingChannels                           LightingChannels;                                         // 0x0110(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	float                                              VolumetricScatteringIntensity;                            // 0x0114(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHighQualityLights;                                       // 0x0118(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bShadowCastingLights;                                     // 0x0119(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x011A(0x0006) MISSED OFFSET
};


// Class Engine.ParticleModuleLight_Seeded
// size:0x0020 (0x0120 - 0x0140)
class UParticleModuleLight_Seeded : public UParticleModuleLight
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0120(0x0020) (Edit)
};


// Class Engine.ParticleModuleLocationBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleLocationBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleLocation
// size:0x0050 (0x0030 - 0x0080)
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                            // 0x0030(0x0048) (Edit)
	float                                              DistributeOverNPoints;                                    // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistributeThreshold;                                      // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.ParticleModuleLocation_Seeded
// size:0x0020 (0x0080 - 0x00A0)
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0080(0x0020) (Edit)
};


// Class Engine.ParticleModuleLocationBoneSocket
// size:0x0040 (0x0030 - 0x0070)
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<ELocationBoneSocketSource>             SourceType;                                               // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FVector                                     UniversalOffset;                                          // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FLocationBoneSocketInfo>             SourceLocations;                                          // 0x0040(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<ELocationBoneSocketSelectionMethod>    SelectionMethod;                                          // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	unsigned char                                      bUpdatePositionEachFrame;                                 // 0x0054(0x0001) (Edit)
	unsigned char                                      bOrientMeshEmitters;                                      // 0x0054(0x0001)
	unsigned char                                      bInheritBoneVelocity;                                     // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	float                                              InheritVelocityScale;                                     // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       SkelMeshActorParamName;                                   // 0x005C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                NumPreSelectedIndices;                                    // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0068(0x0008) MISSED OFFSET
};


// Class Engine.ParticleModuleLocationDirect
// size:0x0120 (0x0030 - 0x0150)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      Location;                                                 // 0x0030(0x0048) (Edit)
	struct FRawDistributionVector                      LocationOffset;                                           // 0x0078(0x0048) (Edit)
	struct FRawDistributionVector                      ScaleFactor;                                              // 0x00C0(0x0048) (Edit)
	struct FRawDistributionVector                      Direction;                                                // 0x0108(0x0048) (Edit)
};


// Class Engine.ParticleModuleLocationEmitter
// size:0x0020 (0x0030 - 0x0050)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData)
	TEnumAsByte<ELocationEmitterSelectionMethod>       SelectionMethod;                                          // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	unsigned char                                      InheritSourceVelocity;                                    // 0x003C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	float                                              InheritSourceVelocityScale;                               // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bInheritSourceRotation;                                   // 0x0044(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	float                                              InheritSourceRotationScale;                               // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
};


// Class Engine.ParticleModuleLocationEmitterDirect
// size:0x0008 (0x0030 - 0x0038)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData)
};


// Class Engine.ParticleModuleLocationPrimitiveBase
// size:0x0080 (0x0030 - 0x00B0)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	unsigned char                                      Positive_X;                                               // 0x0030(0x0001) (Edit)
	unsigned char                                      Positive_Y;                                               // 0x0030(0x0001) (Edit)
	unsigned char                                      Positive_Z;                                               // 0x0030(0x0001) (Edit)
	unsigned char                                      Negative_X;                                               // 0x0030(0x0001) (Edit)
	unsigned char                                      Negative_Y;                                               // 0x0030(0x0001) (Edit)
	unsigned char                                      Negative_Z;                                               // 0x0030(0x0001) (Edit)
	unsigned char                                      SurfaceOnly;                                              // 0x0030(0x0001) (Edit)
	unsigned char                                      Velocity;                                                 // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       VelocityScale;                                            // 0x0038(0x0030) (Edit)
	struct FRawDistributionVector                      StartLocation;                                            // 0x0068(0x0048) (Edit)
};


// Class Engine.ParticleModuleLocationPrimitiveCylinder
// size:0x0070 (0x00B0 - 0x0120)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned char                                      RadialVelocity;                                           // 0x00B0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       StartRadius;                                              // 0x00B8(0x0030) (Edit)
	struct FRawDistributionFloat                       StartHeight;                                              // 0x00E8(0x0030) (Edit)
	TEnumAsByte<ECylinderHeightAxis>                   HeightAxis;                                               // 0x0118(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0119(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// size:0x0020 (0x0120 - 0x0140)
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0120(0x0020) (Edit)
};


// Class Engine.ParticleModuleLocationPrimitiveSphere
// size:0x0030 (0x00B0 - 0x00E0)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                              // 0x00B0(0x0030) (Edit)
};


// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// size:0x0020 (0x00E0 - 0x0100)
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x00E0(0x0020) (Edit)
};


// Class Engine.ParticleModuleLocationPrimitiveTriangle
// size:0x00D8 (0x0030 - 0x0108)
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartOffset;                                              // 0x0030(0x0048) (Edit)
	struct FRawDistributionFloat                       Height;                                                   // 0x0078(0x0030) (Edit)
	struct FRawDistributionFloat                       Angle;                                                    // 0x00A8(0x0030) (Edit)
	struct FRawDistributionFloat                       Thickness;                                                // 0x00D8(0x0030) (Edit)
};


// Class Engine.ParticleModuleLocationSkelVertSurface
// size:0x0060 (0x0030 - 0x0090)
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<ELocationSkelVertSurfaceSource>        SourceType;                                               // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FVector                                     UniversalOffset;                                          // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUpdatePositionEachFrame;                                 // 0x0040(0x0001) (Edit)
	unsigned char                                      bOrientMeshEmitters;                                      // 0x0040(0x0001) (Edit)
	unsigned char                                      bInheritBoneVelocity;                                     // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              InheritVelocityScale;                                     // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       SkelMeshActorParamName;                                   // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               ValidAssociatedBones;                                     // 0x0050(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bEnforceNormalCheck;                                      // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	struct FVector                                     NormalToCompare;                                          // 0x0064(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NormalCheckToleranceDegrees;                              // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NormalCheckTolerance;                                     // 0x0074(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<int>                                        ValidMaterialIndices;                                     // 0x0078(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bInheritVertexColor;                                      // 0x0088(0x0001) (Edit)
	unsigned char                                      bInheritUV;                                               // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	uint32_t                                           InheritUVChannel;                                         // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.ParticleModuleLocationWorldOffset
// size:0x0000 (0x0080 - 0x0080)
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{
public:
};


// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// size:0x0020 (0x0080 - 0x00A0)
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0080(0x0020) (Edit)
};


// Class Engine.ParticleModuleMaterialBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleMaterialBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleMeshMaterial
// size:0x0010 (0x0030 - 0x0040)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray<class UMaterialInterface*>                  MeshMaterials;                                            // 0x0030(0x0010) (Edit, ZeroConstructor)
};


// Class Engine.ParticleModuleRotationBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleRotationBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleMeshRotation
// size:0x0050 (0x0030 - 0x0080)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                      StartRotation;                                            // 0x0030(0x0048) (Edit)
	unsigned char                                      bInheritParent;                                           // 0x0078(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleMeshRotation_Seeded
// size:0x0020 (0x0080 - 0x00A0)
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0080(0x0020) (Edit)
};


// Class Engine.ParticleModuleRotationRateBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleRotationRateBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleMeshRotationRate
// size:0x0048 (0x0030 - 0x0078)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      StartRotationRate;                                        // 0x0030(0x0048) (Edit)
};


// Class Engine.ParticleModuleMeshRotationRate_Seeded
// size:0x0020 (0x0078 - 0x0098)
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0078(0x0020) (Edit)
};


// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// size:0x0048 (0x0030 - 0x0078)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x0030(0x0048) (Edit)
};


// Class Engine.ParticleModuleMeshRotationRateOverLife
// size:0x0050 (0x0030 - 0x0080)
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      RotRate;                                                  // 0x0030(0x0048) (Edit)
	unsigned char                                      bScaleRotRate;                                            // 0x0078(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleOrbitBase
// size:0x0008 (0x0030 - 0x0038)
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned char                                      bUseEmitterTime;                                          // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleOrbit
// size:0x00F8 (0x0038 - 0x0130)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	TEnumAsByte<EOrbitChainMode>                       ChainMode;                                                // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      OffsetAmount;                                             // 0x0040(0x0048) (Edit)
	struct FOrbitOptions                               OffsetOptions;                                            // 0x0088(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      RotationAmount;                                           // 0x0090(0x0048) (Edit)
	struct FOrbitOptions                               RotationOptions;                                          // 0x00D8(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      RotationRateAmount;                                       // 0x00E0(0x0048) (Edit)
	struct FOrbitOptions                               RotationRateOptions;                                      // 0x0128(0x0004) (Edit)
	unsigned char                                      UnknownData03[0x4];                                       // 0x012C(0x0004) MISSED OFFSET
};


// Class Engine.ParticleModuleOrientationBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleOrientationBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleOrientationAxisLock
// size:0x0008 (0x0030 - 0x0038)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	TEnumAsByte<EParticleAxisLock>                     LockAxisFlags;                                            // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleParameterBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleParameterBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleParameterDynamic
// size:0x0018 (0x0030 - 0x0048)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray<struct FEmitterDynamicParameter>            DynamicParams;                                            // 0x0030(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	int                                                UpdateFlags;                                              // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUsesVelocity;                                            // 0x0044(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
};


// Class Engine.ParticleModuleParameterDynamic_Seeded
// size:0x0020 (0x0048 - 0x0068)
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0048(0x0020) (Edit)
};


// Class Engine.ParticleModulePivotOffset
// size:0x0008 (0x0030 - 0x0038)
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{
public:
	struct FVector2D                                   PivotOffset;                                              // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.ParticleModuleRequired
// size:0x0110 (0x0030 - 0x0140)
class UParticleModuleRequired : public UParticleModule
{
public:
	class UMaterialInterface*                          Material;                                                 // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinFacingCameraBlendDistance;                             // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxFacingCameraBlendDistance;                             // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     EmitterOrigin;                                            // 0x0040(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    EmitterRotation;                                          // 0x004C(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleScreenAlignment>              ScreenAlignment;                                          // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseLocalSpace;                                           // 0x0059(0x0001) (Edit)
	unsigned char                                      bKillOnDeactivate;                                        // 0x0059(0x0001) (Edit)
	unsigned char                                      bKillOnCompleted;                                         // 0x0059(0x0001) (Edit)
	TEnumAsByte<EParticleSortMode>                     SortMode;                                                 // 0x005A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseLegacyEmitterTime;                                    // 0x005B(0x0001) (Edit)
	unsigned char                                      bRemoveHMDRoll;                                           // 0x005B(0x0001) (Edit)
	unsigned char                                      bEmitterDurationUseRange;                                 // 0x005B(0x0001) (Edit)
	float                                              EmitterDuration;                                          // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRawDistributionFloat                       SpawnRate;                                                // 0x0060(0x0030)
	TArray<struct FParticleBurst>                      BurstList;                                                // 0x0090(0x0010) (ExportObject, ZeroConstructor, NoClear)
	float                                              EmitterDelay;                                             // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EmitterDelayLow;                                          // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDelayFirstLoopOnly;                                      // 0x00A8(0x0001) (Edit)
	TEnumAsByte<EParticleSubUVInterpMethod>            InterpolationMethod;                                      // 0x00A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bScaleUV;                                                 // 0x00AA(0x0001) (Edit)
	unsigned char                                      bEmitterDelayUseRange;                                    // 0x00AA(0x0001) (Edit)
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                      // 0x00AB(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOverrideSystemMacroUV;                                   // 0x00AC(0x0001) (Edit)
	unsigned char                                      bUseMaxDrawCount;                                         // 0x00AC(0x0001) (Edit)
	TEnumAsByte<EOpacitySourceMode>                    OpacitySourceMode;                                        // 0x00AD(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEmitterNormalsMode>                   EmitterNormalsMode;                                       // 0x00AE(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOrbitModuleAffectsVelocityAlignment;                     // 0x00AF(0x0001) (Edit)
	int                                                SubImages_Horizontal;                                     // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImages_Vertical;                                       // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomImageTime;                                          // 0x00B8(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                RandomImageChanges;                                       // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MacroUVPosition;                                          // 0x00C0(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MacroUVRadius;                                            // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	EParticleUVFlipMode                                UVFlippingMode;                                           // 0x00D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESubUVBoundingVertexCount>             BoundingMode;                                             // 0x00D1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDurationRecalcEachLoop;                                  // 0x00D2(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00D3(0x0001) MISSED OFFSET
	struct FVector                                     NormalsSphereCenter;                                      // 0x00D4(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AlphaThreshold;                                           // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                EmitterLoops;                                             // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  CutoutTexture;                                            // 0x00E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxDrawCount;                                             // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EmitterDurationLow;                                       // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     NormalsCylinderDirection;                                 // 0x00F8(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	TArray<struct FName>                               NamedMaterialOverrides;                                   // 0x0108(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0118(0x0028) MISSED OFFSET
};


// Class Engine.ParticleModuleRotation
// size:0x0030 (0x0030 - 0x0060)
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       StartRotation;                                            // 0x0030(0x0030) (Edit)
};


// Class Engine.ParticleModuleRotation_Seeded
// size:0x0020 (0x0060 - 0x0080)
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0060(0x0020) (Edit)
};


// Class Engine.ParticleModuleRotationOverLifetime
// size:0x0038 (0x0030 - 0x0068)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                                         // 0x0030(0x0030) (Edit)
	unsigned char                                      Scale;                                                    // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleRotationRate
// size:0x0030 (0x0030 - 0x0060)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       StartRotationRate;                                        // 0x0030(0x0030) (Edit)
};


// Class Engine.ParticleModuleRotationRate_Seeded
// size:0x0020 (0x0060 - 0x0080)
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0060(0x0020) (Edit)
};


// Class Engine.ParticleModuleRotationRateMultiplyLife
// size:0x0030 (0x0030 - 0x0060)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                           // 0x0030(0x0030) (Edit)
};


// Class Engine.ParticleModuleSizeBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleSizeBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleSize
// size:0x0048 (0x0030 - 0x0078)
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      StartSize;                                                // 0x0030(0x0048) (Edit)
};


// Class Engine.ParticleModuleSize_Seeded
// size:0x0020 (0x0078 - 0x0098)
class UParticleModuleSize_Seeded : public UParticleModuleSize
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0078(0x0020) (Edit)
};


// Class Engine.ParticleModuleSizeMultiplyLife
// size:0x0050 (0x0030 - 0x0080)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x0030(0x0048) (Edit)
	unsigned char                                      MultiplyX;                                                // 0x0078(0x0001) (Edit)
	unsigned char                                      MultiplyY;                                                // 0x0078(0x0001) (Edit)
	unsigned char                                      MultiplyZ;                                                // 0x0078(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleSizeScale
// size:0x0050 (0x0030 - 0x0080)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScale;                                                // 0x0030(0x0048) (Edit)
	unsigned char                                      EnableX;                                                  // 0x0078(0x0001) (Edit)
	unsigned char                                      EnableY;                                                  // 0x0078(0x0001) (Edit)
	unsigned char                                      EnableZ;                                                  // 0x0078(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleSizeScaleBySpeed
// size:0x0010 (0x0030 - 0x0040)
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{
public:
	struct FVector2D                                   SpeedScale;                                               // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   MaxScale;                                                 // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.ParticleModuleSourceMovement
// size:0x0048 (0x0030 - 0x0078)
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      SourceMovementScale;                                      // 0x0030(0x0048) (Edit)
};


// Class Engine.ParticleModuleSpawnBase
// size:0x0008 (0x0030 - 0x0038)
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned char                                      bProcessSpawnRate;                                        // 0x0030(0x0001) (Edit)
	unsigned char                                      bProcessBurstList;                                        // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleSpawn
// size:0x00B0 (0x0038 - 0x00E8)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       Rate;                                                     // 0x0038(0x0030) (Edit)
	struct FRawDistributionFloat                       RateScale;                                                // 0x0068(0x0030) (Edit)
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                      // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET
	TArray<struct FParticleBurst>                      BurstList;                                                // 0x00A0(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear)
	struct FRawDistributionFloat                       BurstScale;                                               // 0x00B0(0x0030) (Edit)
	unsigned char                                      bApplyGlobalSpawnRateScale;                               // 0x00E0(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00E1(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleSpawnPerUnit
// size:0x0040 (0x0038 - 0x0078)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                              UnitScalar;                                               // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MovementTolerance;                                        // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRawDistributionFloat                       SpawnPerUnit;                                             // 0x0040(0x0030) (Edit)
	float                                              MaxFrameDistance;                                         // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIgnoreSpawnRateWhenMoving;                               // 0x0074(0x0001) (Edit)
	unsigned char                                      bIgnoreMovementAlongX;                                    // 0x0074(0x0001) (Edit)
	unsigned char                                      bIgnoreMovementAlongY;                                    // 0x0074(0x0001) (Edit)
	unsigned char                                      bIgnoreMovementAlongZ;                                    // 0x0074(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
};


// Class Engine.ParticleModuleSubUVBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleSubUVBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleSubUV
// size:0x0040 (0x0030 - 0x0070)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	class USubUVAnimation*                             Animation;                                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FRawDistributionFloat                       SubImageIndex;                                            // 0x0038(0x0030) (Edit)
	unsigned char                                      bUseRealTime;                                             // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleSubUVMovie
// size:0x0040 (0x0070 - 0x00B0)
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	unsigned char                                      bUseEmitterTime;                                          // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       FrameRate;                                                // 0x0078(0x0030) (Edit)
	int                                                StartingFrame;                                            // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
};


// Class Engine.ParticleModuleTrailBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleTrailBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleTrailSource
// size:0x0060 (0x0030 - 0x0090)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	TEnumAsByte<ETrail2SourceMethod>                   SourceMethod;                                             // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FName                                       SourceName;                                               // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FRawDistributionFloat                       SourceStrength;                                           // 0x0040(0x0030) (Edit)
	unsigned char                                      bLockSourceStength;                                       // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	int                                                SourceOffsetCount;                                        // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FVector>                             SourceOffsetDefaults;                                     // 0x0078(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TEnumAsByte<EParticleSourceSelectionMethod>        SelectionMethod;                                          // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	unsigned char                                      bInheritRotation;                                         // 0x008C(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
};


// Class Engine.ParticleModuleTypeDataBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleTypeDataBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleTypeDataAnimTrail
// size:0x0018 (0x0030 - 0x0048)
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      bDeadTrailsOnDeactivate;                                  // 0x0030(0x0001) (Edit)
	unsigned char                                      bEnablePreviousTangentRecalculation;                      // 0x0030(0x0001) (Edit)
	unsigned char                                      bTangentRecalculationEveryFrame;                          // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              TilingDistance;                                           // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceTessellationStepSize;                             // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TangentTessellationStepSize;                              // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WidthTessellationStepSize;                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
};


// Class Engine.ParticleModuleTypeDataBeam2
// size:0x0120 (0x0030 - 0x0150)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	TEnumAsByte<EBeam2Method>                          BeamMethod;                                               // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	int                                                TextureTile;                                              // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TextureTileDistance;                                      // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Sheets;                                                   // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxBeamCount;                                             // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Speed;                                                    // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                InterpolationPoints;                                      // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAlwaysOn;                                                // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	int                                                UpVectorStepSize;                                         // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       BranchParentName;                                         // 0x0054(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	struct FRawDistributionFloat                       Distance;                                                 // 0x0060(0x0030) (Edit)
	TEnumAsByte<EBeamTaperMethod>                      TaperMethod;                                              // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0091(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       TaperFactor;                                              // 0x0098(0x0030) (Edit)
	struct FRawDistributionFloat                       TaperScale;                                               // 0x00C8(0x0030) (Edit)
	unsigned char                                      RenderGeometry;                                           // 0x00F8(0x0001) (Edit)
	unsigned char                                      RenderDirectLine;                                         // 0x00F8(0x0001) (Edit)
	unsigned char                                      RenderLines;                                              // 0x00F8(0x0001) (Edit)
	unsigned char                                      RenderTessellation;                                       // 0x00F8(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x57];                                      // 0x00F9(0x0057) MISSED OFFSET
};


// Class Engine.ParticleModuleTypeDataGpu
// size:0x03F0 (0x0030 - 0x0420)
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{
public:
	struct FGPUSpriteEmitterInfo                       EmitterInfo;                                              // 0x0030(0x0280)
	struct FGPUSpriteResourceData                      ResourceData;                                             // 0x02B0(0x0160)
	float                                              CameraMotionBlurAmount;                                   // 0x0410(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bClearExistingParticlesOnInit;                            // 0x0414(0x0001) (Edit)
	unsigned char                                      UnknownData00[0xB];                                       // 0x0415(0x000B) MISSED OFFSET
};


// Class Engine.ParticleModuleTypeDataMesh
// size:0x0068 (0x0030 - 0x0098)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 Mesh;                                                     // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	float                                              LODSizeScale;                                             // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseStaticMeshLODs;                                       // 0x0044(0x0001) (Edit)
	unsigned char                                      CastShadows;                                              // 0x0044(0x0001)
	unsigned char                                      DoCollisions;                                             // 0x0044(0x0001)
	TEnumAsByte<EMeshScreenAlignment>                  MeshAlignment;                                            // 0x0045(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOverrideMaterial;                                        // 0x0046(0x0001) (Edit)
	unsigned char                                      bOverrideDefaultMotionBlurSettings;                       // 0x0046(0x0001) (Edit)
	unsigned char                                      bEnableMotionBlur;                                        // 0x0046(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0047(0x0001) MISSED OFFSET
	struct FRawDistributionVector                      RollPitchYawRange;                                        // 0x0048(0x0048) (Edit)
	TEnumAsByte<EParticleAxisLock>                     AxisLockOption;                                           // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCameraFacing;                                            // 0x0091(0x0001) (Edit)
	TEnumAsByte<EMeshCameraFacingUpAxis>               CameraFacingUpAxisOption;                                 // 0x0092(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	TEnumAsByte<EMeshCameraFacingOptions>              CameraFacingOption;                                       // 0x0093(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bApplyParticleRotationAsSpin;                             // 0x0094(0x0001) (Edit)
	unsigned char                                      bFaceCameraDirectionRatherThanPosition;                   // 0x0094(0x0001) (Edit)
	unsigned char                                      bCollisionsConsiderPartilceSize;                          // 0x0094(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0095(0x0003) MISSED OFFSET
};


// Class Engine.ParticleModuleTypeDataRibbon
// size:0x0030 (0x0030 - 0x0060)
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int                                                MaxTessellationBetweenParticles;                          // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                SheetsPerTrail;                                           // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxTrailCount;                                            // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxParticleInTrailCount;                                  // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDeadTrailsOnDeactivate;                                  // 0x0040(0x0001) (Edit)
	unsigned char                                      bDeadTrailsOnSourceLoss;                                  // 0x0040(0x0001) (Edit)
	unsigned char                                      bClipSourceSegement;                                      // 0x0040(0x0001) (Edit)
	unsigned char                                      bEnablePreviousTangentRecalculation;                      // 0x0040(0x0001) (Edit)
	unsigned char                                      bTangentRecalculationEveryFrame;                          // 0x0040(0x0001) (Edit)
	unsigned char                                      bSpawnInitialParticle;                                    // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	TEnumAsByte<ETrailsRenderAxisOption>               RenderAxis;                                               // 0x0044(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	float                                              TangentSpawningScalar;                                    // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRenderGeometry;                                          // 0x004C(0x0001) (Edit)
	unsigned char                                      bRenderSpawnPoints;                                       // 0x004C(0x0001) (Edit)
	unsigned char                                      bRenderTangents;                                          // 0x004C(0x0001) (Edit)
	unsigned char                                      bRenderTessellation;                                      // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              TilingDistance;                                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceTessellationStepSize;                             // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableTangentDiffInterpScale;                            // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	float                                              TangentTessellationScalar;                                // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.ParticleModuleVectorFieldBase
// size:0x0000 (0x0030 - 0x0030)
class UParticleModuleVectorFieldBase : public UParticleModule
{
public:
};


// Class Engine.ParticleModuleVectorFieldGlobal
// size:0x0010 (0x0030 - 0x0040)
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{
public:
	unsigned char                                      bOverrideGlobalVectorFieldTightness;                      // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              GlobalVectorFieldScale;                                   // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GlobalVectorFieldTightness;                               // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
};


// Class Engine.ParticleModuleVectorFieldLocal
// size:0x0038 (0x0030 - 0x0068)
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{
public:
	class UVectorField*                                VectorField;                                              // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeTranslation;                                      // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x0044(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeScale3D;                                          // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Intensity;                                                // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Tightness;                                                // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIgnoreComponentTransform;                                // 0x0064(0x0001) (Edit)
	unsigned char                                      bTileX;                                                   // 0x0064(0x0001) (Edit)
	unsigned char                                      bTileY;                                                   // 0x0064(0x0001) (Edit)
	unsigned char                                      bTileZ;                                                   // 0x0064(0x0001) (Edit)
	unsigned char                                      bUseFixDT;                                                // 0x0064(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
};


// Class Engine.ParticleModuleVectorFieldRotation
// size:0x0018 (0x0030 - 0x0048)
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                                     MinInitialRotation;                                       // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MaxInitialRotation;                                       // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.ParticleModuleVectorFieldRotationRate
// size:0x0010 (0x0030 - 0x0040)
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                                     RotationRate;                                             // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
};


// Class Engine.ParticleModuleVectorFieldScale
// size:0x0038 (0x0030 - 0x0068)
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                          VectorFieldScale;                                         // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FRawDistributionFloat                       VectorFieldScaleRaw;                                      // 0x0038(0x0030) (Edit)
};


// Class Engine.ParticleModuleVectorFieldScaleOverLife
// size:0x0038 (0x0030 - 0x0068)
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                          VectorFieldScaleOverLife;                                 // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FRawDistributionFloat                       VectorFieldScaleOverLifeRaw;                              // 0x0038(0x0030) (Edit)
};


// Class Engine.ParticleModuleVelocityBase
// size:0x0008 (0x0030 - 0x0038)
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	unsigned char                                      bInWorldSpace;                                            // 0x0030(0x0001) (Edit)
	unsigned char                                      bApplyOwnerScale;                                         // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
};


// Class Engine.ParticleModuleVelocity
// size:0x0078 (0x0038 - 0x00B0)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      StartVelocity;                                            // 0x0038(0x0048) (Edit)
	struct FRawDistributionFloat                       StartVelocityRadial;                                      // 0x0080(0x0030) (Edit)
};


// Class Engine.ParticleModuleVelocity_Seeded
// size:0x0020 (0x00B0 - 0x00D0)
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x00B0(0x0020) (Edit)
};


// Class Engine.ParticleModuleVelocityCone
// size:0x0070 (0x0038 - 0x00A8)
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                       Angle;                                                    // 0x0038(0x0030) (Edit)
	struct FRawDistributionFloat                       Velocity;                                                 // 0x0068(0x0030) (Edit)
	struct FVector                                     Direction;                                                // 0x0098(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
};


// Class Engine.ParticleModuleVelocityInheritParent
// size:0x0048 (0x0038 - 0x0080)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      Scale;                                                    // 0x0038(0x0048) (Edit)
};


// Class Engine.ParticleModuleVelocityOverLifetime
// size:0x0050 (0x0038 - 0x0088)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      VelOverLife;                                              // 0x0038(0x0048) (Edit)
	unsigned char                                      Absolute;                                                 // 0x0080(0x0001) (Edit, ExportObject)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
};


// Class Engine.ParticleSpriteEmitter
// size:0x0000 (0x01B8 - 0x01B8)
class UParticleSpriteEmitter : public UParticleEmitter
{
public:
};


// Class Engine.ParticleSystem
// size:0x00E0 (0x0030 - 0x0110)
class UParticleSystem : public UFXSystemAsset
{
public:
	float                                              UpdateTime_FPS;                                           // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UpdateTime_Delta;                                         // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              WarmupTime;                                               // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WarmupTickRate;                                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class UParticleEmitter*>                    Emitters;                                                 // 0x0040(0x0010) (ExportObject, ZeroConstructor)
	class UParticleSystemComponent*                    PreviewComponent;                                         // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                             // 0x0058(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	float                                              LODDistanceCheckTime;                                     // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MacroUVRadius;                                            // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<float>                                      LODDistances;                                             // 0x0068(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TArray<struct FParticleSystemLOD>                  LODSettings;                                              // 0x0078(0x0010) (Edit, ZeroConstructor)
	struct FBox                                        FixedRelativeBoundingBox;                                 // 0x0088(0x001C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SecondsBeforeInactive;                                    // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Delay;                                                    // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DelayLow;                                                 // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOrientZAxisTowardCamera;                                 // 0x00B0(0x0001) (Edit)
	unsigned char                                      bUseFixedRelativeBoundingBox;                             // 0x00B0(0x0001) (Edit)
	unsigned char                                      bShouldResetPeakCounts;                                   // 0x00B0(0x0001)
	unsigned char                                      bHasPhysics;                                              // 0x00B0(0x0001) (Transient)
	unsigned char                                      bUseRealtimeThumbnail;                                    // 0x00B0(0x0001) (Edit)
	unsigned char                                      ThumbnailImageOutOfDate;                                  // 0x00B0(0x0001)
	unsigned char                                      bUseDelayRange;                                           // 0x00B1(0x0001) (Edit)
	unsigned char                                      bAllowManagedTicking;                                     // 0x00B1(0x0001) (Edit)
	unsigned char                                      bAutoDeactivate;                                          // 0x00B1(0x0001) (Edit)
	unsigned char                                      bRegenerateLODDuplicate;                                  // 0x00B1(0x0001)
	TEnumAsByte<EParticleSystemUpdateMode>             SystemUpdateMode;                                         // 0x00B2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleSystemLODMethod>              LODMethod;                                                // 0x00B3(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EParticleSystemInsignificanceReaction              InsignificantReaction;                                    // 0x00B4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleSystemOcclusionBoundsMethod>  OcclusionBoundsMethod;                                    // 0x00B5(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00B6(0x0001) MISSED OFFSET
	EParticleSignificanceLevel                         MaxSignificanceLevel;                                     // 0x00B7(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           MinTimeBetweenTicks;                                      // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InsignificanceDelay;                                      // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MacroUVPosition;                                          // 0x00C0(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBox                                        CustomOcclusionBounds;                                    // 0x00CC(0x001C) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FLODSoloTrack>                       SoloTracking;                                             // 0x00E8(0x0010) (ZeroConstructor, Transient)
	TArray<struct FNamedEmitterMaterial>               NamedMaterialSlots;                                       // 0x00F8(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0108(0x0008) MISSED OFFSET

	bool ContainsEmitterType(class UObject* TypeData)//offset:0x2E97950;
};


// Class Engine.ParticleSystemComponent
// size:0x0260 (0x0450 - 0x06B0)
class UParticleSystemComponent : public UFXSystemComponent
{
public:
	class UParticleSystem*                             Template;                                                 // 0x0450(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UMaterialInterface*>                  EmitterMaterials;                                         // 0x0458(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class USkeletalMeshComponent*>              SkelMeshComponents;                                       // 0x0468(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0478(0x0001) MISSED OFFSET
	unsigned char                                      bResetOnDetach;                                           // 0x0479(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUpdateOnDedicatedServer;                                 // 0x0479(0x0001)
	unsigned char                                      bAllowRecycling;                                          // 0x0479(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAutoManageAttachment;                                    // 0x0479(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAutoAttachWeldSimulatedBodies;                           // 0x0479(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bWarmingUp;                                               // 0x047A(0x0001)
	unsigned char                                      bOverrideLODMethod;                                       // 0x047A(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSkipUpdateDynamicDataDuringTick;                         // 0x047A(0x0001)
	unsigned char                                      UnknownData01[0xA];                                       // 0x047B(0x000A) MISSED OFFSET
	TEnumAsByte<EParticleSystemLODMethod>              LODMethod;                                                // 0x0485(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EParticleSignificanceLevel                         RequiredSignificance;                                     // 0x0486(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0487(0x0001) MISSED OFFSET
	TArray<struct FParticleSysParam>                   InstanceParameters;                                       // 0x0488(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct UEMulticastInlineDelegate                   OnParticleSpawn;                                          // 0x0498(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnParticleBurst;                                          // 0x04A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnParticleDeath;                                          // 0x04B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   OnParticleCollide;                                        // 0x04C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bOldPositionValid;                                        // 0x04D8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x04D9(0x0003) MISSED OFFSET
	struct FVector                                     OldPosition;                                              // 0x04DC(0x000C) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     PartSysVelocity;                                          // 0x04E8(0x000C) (ZeroConstructor, IsPlainOldData)
	float                                              WarmupTime;                                               // 0x04F4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              WarmupTickRate;                                           // 0x04F8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x04FC(0x0004) MISSED OFFSET
	float                                              SecondsBeforeInactive;                                    // 0x0500(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0504(0x0004) MISSED OFFSET
	float                                              MaxTimeBeforeForceUpdateTransform;                        // 0x0508(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x1C];                                      // 0x050C(0x001C) MISSED OFFSET
	TArray<class UParticleSystemReplay*>               ReplayClips;                                              // 0x0528(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0538(0x0008) MISSED OFFSET
	float                                              CustomTimeDilation;                                       // 0x0540(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x54];                                      // 0x0544(0x0054) MISSED OFFSET
	TWeakObjectPtr<class USceneComponent>              AutoAttachParent;                                         // 0x0598(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	struct FName                                       AutoAttachSocketName;                                     // 0x05A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EAttachmentRule                                    AutoAttachLocationRule;                                   // 0x05A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EAttachmentRule                                    AutoAttachRotationRule;                                   // 0x05A9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EAttachmentRule                                    AutoAttachScaleRule;                                      // 0x05AA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2D];                                      // 0x05AB(0x002D) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnSystemFinished;                                         // 0x05D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData10[0xC8];                                      // 0x05E8(0x00C8) MISSED OFFSET

	void SetTrailSourceData(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth)//offset:0x2E99620;
	void SetTemplate(class UParticleSystem* NewTemplate)//offset:0x2E99590;
	void SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param)//offset:0x2E994C0;
	void SetBeamTargetTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int TargetIndex)//offset:0x2E98F70;
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex)//offset:0x2E98E60;
	void SetBeamTargetPoint(int EmitterIndex, const struct FVector& NewTargetPoint, int TargetIndex)//offset:0x2E98D40;
	void SetBeamSourceTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int SourceIndex)//offset:0x2E98C20;
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex)//offset:0x2E98B10;
	void SetBeamSourcePoint(int EmitterIndex, const struct FVector& NewSourcePoint, int SourceIndex)//offset:0x2E989F0;
	void SetBeamEndPoint(int EmitterIndex, const struct FVector& NewEndPoint)//offset:0x2E98910;
	void SetAutoAttachParams(class USceneComponent* Parent, const struct FName& SocketName, TEnumAsByte<EAttachLocation> LocationType)//offset:0x2E98640;
	int GetNumActiveParticles()//offset:0x2E98520;
	class UMaterialInterface* GetNamedMaterial(const struct FName& InName)//offset:0x2E98480;
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, struct FVector* OutTangentPoint)//offset:0x2E98330;
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, float* OutTargetStrength)//offset:0x2E98210;
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, struct FVector* OutTargetPoint)//offset:0x2E980F0;
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, struct FVector* OutTangentPoint)//offset:0x2E97FD0;
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, float* OutSourceStrength)//offset:0x2E97EB0;
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, struct FVector* OutSourcePoint)//offset:0x2E97D90;
	bool GetBeamEndPoint(int EmitterIndex, struct FVector* OutEndPoint)//offset:0x2E97CA0;
	void GenerateParticleEvent(const struct FName& InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity)//offset:0x2E97AE0;
	void EndTrails()//offset:0x2E97AC0;
	class UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(const struct FName& InName, class UMaterialInterface* SourceMaterial)//offset:0x2E979F0;
	void BeginTrails(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth)//offset:0x2E977F0;
};


// Class Engine.ParticleSystemReplay
// size:0x0018 (0x0028 - 0x0040)
class UParticleSystemReplay : public UObject
{
public:
	int                                                ClipIDNumber;                                             // 0x0028(0x0004) (Edit, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x002C(0x0014) MISSED OFFSET
};


// Class Engine.PathFollowingAgentInterface
// size:0x0000 (0x0028 - 0x0028)
class UPathFollowingAgentInterface : public UInterface
{
public:
};


// Class Engine.PawnNoiseEmitterComponent
// size:0x0028 (0x00B0 - 0x00D8)
class UPawnNoiseEmitterComponent : public UActorComponent
{
public:
	unsigned char                                      bAIPerceptionSystemCompatibilityMode;                     // 0x00B0(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	struct FVector                                     LastRemoteNoisePosition;                                  // 0x00B4(0x000C) (ZeroConstructor, IsPlainOldData)
	float                                              NoiseLifetime;                                            // 0x00C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LastRemoteNoiseVolume;                                    // 0x00C4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastRemoteNoiseTime;                                      // 0x00C8(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastLocalNoiseVolume;                                     // 0x00CC(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastLocalNoiseTime;                                       // 0x00D0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET

	void MakeNoise(class AActor* NoiseMaker, float Loudness, const struct FVector& NoiseLocation)//offset:0x2E9D560;
};


// Class Engine.PhysicalAnimationComponent
// size:0x0040 (0x00B0 - 0x00F0)
class UPhysicalAnimationComponent : public UActorComponent
{
public:
	float                                              StrengthMultiplyer;                                       // 0x00B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                    // 0x00B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x00C0(0x0030) MISSED OFFSET

	void SetStrengthMultiplyer(float InStrengthMultiplyer)//offset:0x2E9F0E0;
	void SetSkeletalMeshComponent(class USkeletalMeshComponent* InSkeletalMeshComponent)//offset:0x2E9F050;
	struct FTransform GetBodyTargetTransform(const struct FName& BodyName)//offset:0x2E9CE50;
	void ApplyPhysicalAnimationSettingsBelow(const struct FName& BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf)//offset:0x2E9CC10;
	void ApplyPhysicalAnimationSettings(const struct FName& BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData)//offset:0x2E9CB20;
	void ApplyPhysicalAnimationProfileBelow(const struct FName& BodyName, const struct FName& ProfileName, bool bIncludeSelf, bool bClearNotFound)//offset:0x2E9C9C0;
};


// Class Engine.PhysicalMaterialMask
// size:0x0008 (0x0028 - 0x0030)
class UPhysicalMaterialMask : public UObject
{
public:
	int                                                UVChannelIndex;                                           // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x002C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x002D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002E(0x0002) MISSED OFFSET
};


// Class Engine.PhysicsAsset
// size:0x0110 (0x0028 - 0x0138)
class UPhysicsAsset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<int>                                        BoundsBodies;                                             // 0x0030(0x0010) (ZeroConstructor)
	TArray<class USkeletalBodySetup*>                  SkeletalBodySetups;                                       // 0x0040(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UPhysicsConstraintTemplate*>          ConstraintSetup;                                          // 0x0050(0x0010) (ExportObject, ZeroConstructor)
	struct FSolverIterations                           SolverIterations;                                         // 0x0060(0x001C) (Edit)
	unsigned char                                      bNotForDedicatedServer;                                   // 0x007C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0xA3];                                      // 0x007D(0x00A3) MISSED OFFSET
	class UThumbnailInfo*                              ThumbnailInfo;                                            // 0x0120(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<class UBodySetup*>                          BodySetup;                                                // 0x0128(0x0010) (ExportObject, ZeroConstructor, Deprecated)
};


// Class Engine.SkeletalBodySetup
// size:0x0018 (0x02A0 - 0x02B8)
class USkeletalBodySetup : public UBodySetup
{
public:
	bool                                               bSkipScaleFromAnimation;                                  // 0x02A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02A1(0x0007) MISSED OFFSET
	TArray<struct FPhysicalAnimationProfile>           PhysicalAnimationData;                                    // 0x02A8(0x0010) (ZeroConstructor)
};


// Class Engine.PhysicsCollisionHandler
// size:0x0018 (0x0028 - 0x0040)
class UPhysicsCollisionHandler : public UObject
{
public:
	float                                              ImpactThreshold;                                          // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ImpactReFireDelay;                                        // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  DefaultImpactSound;                                       // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LastImpactSoundTime;                                      // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
};


// Class Engine.RigidBodyBase
// size:0x0000 (0x0220 - 0x0220)
class ARigidBodyBase : public AActor
{
public:
};


// Class Engine.PhysicsConstraintActor
// size:0x0020 (0x0220 - 0x0240)
class APhysicsConstraintActor : public ARigidBodyBase
{
public:
	class UPhysicsConstraintComponent*                 ConstraintComp;                                           // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class AActor*                                      ConstraintActor1;                                         // 0x0228(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	class AActor*                                      ConstraintActor2;                                         // 0x0230(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      bDisableCollision;                                        // 0x0238(0x0001) (Deprecated)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0239(0x0007) MISSED OFFSET
};


// Class Engine.PhysicsConstraintComponent
// size:0x0200 (0x0200 - 0x0400)
class UPhysicsConstraintComponent : public USceneComponent
{
public:
	struct FConstrainComponentPropName                 ComponentName1;                                           // 0x0200(0x0008) (Edit)
	class AActor*                                      ConstraintActor2;                                         // 0x0208(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	struct FConstrainComponentPropName                 ComponentName2;                                           // 0x0210(0x0008) (Edit)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0218(0x0010) MISSED OFFSET
	class UPhysicsConstraintTemplate*                  ConstraintSetup;                                          // 0x0228(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct UEMulticastInlineDelegate                   OnConstraintBroken;                                       // 0x0230(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FConstraintInstance                         ConstraintInstance;                                       // 0x0240(0x01C0) (Edit)

	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive)//offset:0x2E9EF80;
	void SetOrientationDriveSLERP(bool bEnableSLERP)//offset:0x2E9EEF0;
	void SetLinearZLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize)//offset:0x2E9EE20;
	void SetLinearYLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize)//offset:0x2E9ED50;
	void SetLinearXLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize)//offset:0x2E9EC80;
	void SetLinearVelocityTarget(const struct FVector& InVelTarget)//offset:0x2E9EBF0;
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)//offset:0x2E9EAC0;
	void SetLinearPositionTarget(const struct FVector& InPosTarget)//offset:0x2E9EA30;
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)//offset:0x2E9E900;
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit)//offset:0x2E9E7E0;
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold)//offset:0x2E9E710;
	void SetDisableCollision(bool bDisableCollision)//offset:0x2E9E680;
	void SetConstraintReferencePosition(TEnumAsByte<EConstraintFrame> Frame, const struct FVector& RefPosition)//offset:0x2E9E5B0;
	void SetConstraintReferenceOrientation(TEnumAsByte<EConstraintFrame> Frame, const struct FVector& PriAxis, const struct FVector& SecAxis)//offset:0x2E9E480;
	void SetConstraintReferenceFrame(TEnumAsByte<EConstraintFrame> Frame, const struct FTransform& RefFrame)//offset:0x2E9E360;
	void SetConstrainedComponents(class UPrimitiveComponent* Component1, const struct FName& BoneName1, class UPrimitiveComponent* Component2, const struct FName& BoneName2)//offset:0x2E9E200;
	void SetAngularVelocityTarget(const struct FVector& InVelTarget)//offset:0x2E9E0A0;
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive)//offset:0x2E9DFD0;
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP)//offset:0x2E9DF40;
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)//offset:0x2E9DE70;
	void SetAngularTwistLimit(TEnumAsByte<EAngularConstraintMotion> ConstraintType, float TwistLimitAngle)//offset:0x2E9DDA0;
	void SetAngularSwing2Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing2LimitAngle)//offset:0x2E9DCD0;
	void SetAngularSwing1Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing1LimitAngle)//offset:0x2E9DC00;
	void SetAngularOrientationTarget(const struct FRotator& InPosTarget)//offset:0x2E9DB70;
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)//offset:0x2E9DAA0;
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit)//offset:0x2E9D980;
	void SetAngularDriveMode(TEnumAsByte<EAngularDriveMode> DriveMode)//offset:0x2E9D900;
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold)//offset:0x2E9D830;
	bool IsBroken()//offset:0x2E9D320;
	float GetCurrentTwist()//offset:0x2E9D0B0;
	float GetCurrentSwing2()//offset:0x2E9D080;
	float GetCurrentSwing1()//offset:0x2E9D050;
	void GetConstraintForce(struct FVector* OutLinearForce, struct FVector* OutAngularForce)//offset:0x2E9CF10;
	void BreakConstraint()//offset:0x2E9CD50;
};


// Class Engine.PhysicsConstraintTemplate
// size:0x02E0 (0x0028 - 0x0308)
class UPhysicsConstraintTemplate : public UObject
{
public:
	struct FConstraintInstance                         DefaultInstance;                                          // 0x0028(0x01C0) (Edit)
	TArray<struct FPhysicsConstraintProfileHandle>     ProfileHandles;                                           // 0x01E8(0x0010) (ZeroConstructor)
	struct FConstraintProfileProperties                DefaultProfile;                                           // 0x01F8(0x010C) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0304(0x0004) MISSED OFFSET
};


// Class Engine.PhysicsHandleComponent
// size:0x00B0 (0x00B0 - 0x0160)
class UPhysicsHandleComponent : public UActorComponent
{
public:
	class UPrimitiveComponent*                         GrabbedComponent;                                         // 0x00B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B8(0x0008) MISSED OFFSET
	unsigned char                                      bSoftAngularConstraint;                                   // 0x00C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSoftLinearConstraint;                                    // 0x00C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bInterpolateTarget;                                       // 0x00C0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	float                                              LinearDamping;                                            // 0x00C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LinearStiffness;                                          // 0x00C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AngularDamping;                                           // 0x00CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AngularStiffness;                                         // 0x00D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6C];                                      // 0x00D4(0x006C) MISSED OFFSET
	float                                              InterpolationSpeed;                                       // 0x0140(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1C];                                      // 0x0144(0x001C) MISSED OFFSET

	void SetTargetRotation(const struct FRotator& NewRotation)//offset:0x2EA1F70;
	void SetTargetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation)//offset:0x2EA1E90;
	void SetTargetLocation(const struct FVector& NewLocation)//offset:0x2EA1E00;
	void SetLinearStiffness(float NewLinearStiffness)//offset:0x2EA1D80;
	void SetLinearDamping(float NewLinearDamping)//offset:0x2EA1D00;
	void SetInterpolationSpeed(float NewInterpolationSpeed)//offset:0x2EA1C80;
	void SetAngularStiffness(float NewAngularStiffness)//offset:0x2EA1C00;
	void SetAngularDamping(float NewAngularDamping)//offset:0x2EA1B80;
	void ReleaseComponent()//offset:0xF4EE00;
	void GrabComponentAtLocationWithRotation(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& Location, const struct FRotator& Rotation)//offset:0x2EA1900;
	void GrabComponentAtLocation(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation)//offset:0x2EA17E0;
	void GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation)//offset:0x2EA1670;
	void GetTargetLocationAndRotation(struct FVector* TargetLocation, struct FRotator* TargetRotation)//offset:0x2EA1590;
	class UPrimitiveComponent* GetGrabbedComponent()//offset:0x1F81210;
};


// Class Engine.PhysicsSettings
// size:0x00C0 (0x00E0 - 0x01A0)
class UPhysicsSettings : public UPhysicsSettingsCore
{
public:
	struct FRigidBodyErrorCorrection                   PhysicErrorCorrection;                                    // 0x00E0(0x0034) (Edit, Config)
	TEnumAsByte<ESettingsLockedAxis>                   LockedAxis;                                               // 0x0114(0x0001) (ZeroConstructor, Config, Deprecated, IsPlainOldData)
	TEnumAsByte<ESettingsDOF>                          DefaultDegreesOfFreedom;                                  // 0x0115(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSuppressFaceRemapTable;                                  // 0x0116(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSupportUVFromHitResults;                                 // 0x0117(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDisableActiveActors;                                     // 0x0118(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDisableKinematicStaticPairs;                             // 0x0119(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDisableKinematicKinematicPairs;                          // 0x011A(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDisableCCD;                                              // 0x011B(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableEnhancedDeterminism;                               // 0x011C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x011D(0x0003) MISSED OFFSET
	float                                              AnimPhysicsMinDeltaTime;                                  // 0x0120(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSimulateAnimPhysicsAfterReset;                           // 0x0124(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0125(0x0003) MISSED OFFSET
	float                                              MaxPhysicsDeltaTime;                                      // 0x0128(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSubstepping;                                             // 0x012C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSubsteppingAsync;                                        // 0x012D(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x012E(0x0002) MISSED OFFSET
	float                                              MaxSubstepDeltaTime;                                      // 0x0130(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxSubsteps;                                              // 0x0134(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              SyncSceneSmoothingFactor;                                 // 0x0138(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              InitialAverageFrameRate;                                  // 0x013C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                PhysXTreeRebuildRate;                                     // 0x0140(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
	TArray<struct FPhysicalSurfaceName>                PhysicalSurfaces;                                         // 0x0148(0x0010) (Edit, ZeroConstructor, Config)
	struct FBroadphaseSettings                         DefaultBroadphaseSettings;                                // 0x0158(0x0040) (Edit, Config)
	float                                              MinDeltaVelocityForHitEvents;                             // 0x0198(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FChaosPhysicsSettings                       ChaosSettings;                                            // 0x019C(0x0003) (Edit, Config)
	unsigned char                                      UnknownData04[0x1];                                       // 0x019F(0x0001) MISSED OFFSET
};


// Class Engine.PhysicsSpringComponent
// size:0x0020 (0x0200 - 0x0220)
class UPhysicsSpringComponent : public USceneComponent
{
public:
	float                                              SpringLengthAtRest;                                       // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpringRadius;                                             // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     SpringChannel;                                            // 0x0208(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreSelf;                                              // 0x0209(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x020A(0x0002) MISSED OFFSET
	float                                              SpringCompression;                                        // 0x020C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0210(0x0010) MISSED OFFSET

	struct FVector GetSpringRestingPoint()//offset:0x2EA1550;
	struct FVector GetSpringDirection()//offset:0x2EA1510;
	struct FVector GetSpringCurrentEndPoint()//offset:0x2EA14D0;
	float GetNormalizedCompressionScalar()//offset:0x2EA14A0;
};


// Class Engine.PhysicsThruster
// size:0x0008 (0x0220 - 0x0228)
class APhysicsThruster : public ARigidBodyBase
{
public:
	class UPhysicsThrusterComponent*                   ThrusterComponent;                                        // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
};


// Class Engine.PhysicsThrusterComponent
// size:0x0000 (0x0200 - 0x0200)
class UPhysicsThrusterComponent : public USceneComponent
{
public:
};


// Class Engine.SceneCapture
// size:0x0010 (0x0220 - 0x0230)
class ASceneCapture : public AActor
{
public:
	class UStaticMeshComponent*                        MeshComp;                                                 // 0x0220(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	class USceneComponent*                             SceneComponent;                                           // 0x0228(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
};


// Class Engine.PlanarReflection
// size:0x0010 (0x0230 - 0x0240)
class APlanarReflection : public ASceneCapture
{
public:
	class UPlanarReflectionComponent*                  PlanarReflectionComponent;                                // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bShowPreviewPlane;                                        // 0x0238(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0239(0x0007) MISSED OFFSET

	void OnInterpToggle(bool bEnable)//offset:0x2EA1AF0;
};


// Class Engine.PlanarReflectionComponent
// size:0x00F0 (0x02B0 - 0x03A0)
class UPlanarReflectionComponent : public USceneCaptureComponent
{
public:
	class UBoxComponent*                               PreviewBox;                                               // 0x02B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              NormalDistortionStrength;                                 // 0x02B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrefilterRoughness;                                       // 0x02BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrefilterRoughnessDistance;                               // 0x02C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ScreenPercentage;                                         // 0x02C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ExtraFOV;                                                 // 0x02C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFromPlaneFadeStart;                               // 0x02CC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DistanceFromPlaneFadeEnd;                                 // 0x02D0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DistanceFromPlaneFadeoutStart;                            // 0x02D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFromPlaneFadeoutEnd;                              // 0x02D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngleFromPlaneFadeStart;                                  // 0x02DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngleFromPlaneFadeEnd;                                    // 0x02E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bShowPreviewPlane;                                        // 0x02E4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRenderSceneTwoSided;                                     // 0x02E5(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xBA];                                      // 0x02E6(0x00BA) MISSED OFFSET
};


// Class Engine.PlaneReflectionCapture
// size:0x0000 (0x0228 - 0x0228)
class APlaneReflectionCapture : public AReflectionCapture
{
public:
};


// Class Engine.PlaneReflectionCaptureComponent
// size:0x0020 (0x0270 - 0x0290)
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              InfluenceRadiusScale;                                     // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0274(0x0004) MISSED OFFSET
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                   // 0x0278(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               PreviewCaptureBox;                                        // 0x0280(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0288(0x0008) MISSED OFFSET
};


// Class Engine.PlatformEventsComponent
// size:0x0020 (0x00B0 - 0x00D0)
class UPlatformEventsComponent : public UActorComponent
{
public:
	struct UEMulticastInlineDelegate                   PlatformChangedToLaptopModeDelegate;                      // 0x00B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct UEMulticastInlineDelegate                   PlatformChangedToTabletModeDelegate;                      // 0x00C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	bool SupportsConvertibleLaptops()//offset:0x2EA2000;
	void PlatformEventDelegate__DelegateSignature()//offset:0x13CEB30;
	bool IsInTabletMode()//offset:0x2EA1AC0;
	bool IsInLaptopMode()//offset:0x2EA1A90;
};


// Class Engine.PlatformInterfaceWebResponse
// size:0x0088 (0x0028 - 0x00B0)
class UPlatformInterfaceWebResponse : public UObject
{
public:
	class FString                                      OriginalURL;                                              // 0x0028(0x0010) (ZeroConstructor)
	int                                                ResponseCode;                                             // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                Tag;                                                      // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData)
	class FString                                      StringResponse;                                           // 0x0040(0x0010) (ZeroConstructor)
	TArray<unsigned char>                              BinaryResponse;                                           // 0x0050(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0060(0x0050) MISSED OFFSET

	int GetNumHeaders()//offset:0xCD1920;
	class FString GetHeaderValue(const class FString& HeaderName)//offset:0x2EA13B0;
	void GetHeader(int HeaderIndex, class FString* Header, class FString* Value)//offset:0x2EA1250;
};


// Class Engine.PlayerCameraManager
// size:0x2590 (0x0220 - 0x27B0)
class APlayerCameraManager : public AActor
{
public:
	class APlayerController*                           PCOwner;                                                  // 0x0220(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class USceneComponent*                             TransformComponent;                                       // 0x0228(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0230(0x0008) MISSED OFFSET
	float                                              DefaultFOV;                                               // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x023C(0x0004) MISSED OFFSET
	float                                              DefaultOrthoWidth;                                        // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0244(0x0004) MISSED OFFSET
	float                                              DefaultAspectRatio;                                       // 0x0248(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x44];                                      // 0x024C(0x0044) MISSED OFFSET
	struct FCameraCacheEntry                           CameraCache;                                              // 0x0290(0x05F0) (Transient)
	struct FCameraCacheEntry                           LastFrameCameraCache;                                     // 0x0880(0x05F0) (Transient)
	struct FTViewTarget                                ViewTarget;                                               // 0x0E70(0x0600) (Transient)
	struct FTViewTarget                                PendingViewTarget;                                        // 0x1470(0x0600) (Transient)
	unsigned char                                      UnknownData04[0x30];                                      // 0x1A70(0x0030) MISSED OFFSET
	struct FCameraCacheEntry                           CameraCachePrivate;                                       // 0x1AA0(0x05F0) (Transient)
	struct FCameraCacheEntry                           LastFrameCameraCachePrivate;                              // 0x2090(0x05F0) (Transient)
	TArray<class UCameraModifier*>                     ModifierList;                                             // 0x2680(0x0010) (ZeroConstructor, Transient)
	TArray<class UCameraModifier*>                     DefaultModifiers;                                         // 0x2690(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              FreeCamDistance;                                          // 0x26A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     FreeCamOffset;                                            // 0x26A4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ViewTargetOffset;                                         // 0x26B0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x26BC(0x0004) MISSED OFFSET
	struct UEMulticastInlineDelegate                   OnAudioFadeChangeEvent;                                   // 0x26C0(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData06[0x10];                                      // 0x26D0(0x0010) MISSED OFFSET
	TArray<class AEmitterCameraLensEffectBase*>        CameraLensEffects;                                        // 0x26E0(0x0010) (ZeroConstructor, Transient)
	class UCameraModifier_CameraShake*                 CachedCameraShakeMod;                                     // 0x26F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCameraAnimInst*                             AnimInstPool[0x8];                                        // 0x26F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FPostProcessSettings>                PostProcessBlendCache;                                    // 0x2738(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData07[0x10];                                      // 0x2748(0x0010) MISSED OFFSET
	TArray<class UCameraAnimInst*>                     ActiveAnims;                                              // 0x2758(0x0010) (ZeroConstructor, Transient)
	TArray<class UCameraAnimInst*>                     FreeAnims;                                                // 0x2768(0x0010) (ZeroConstructor, Transient)
	class ACameraActor*                                AnimCameraActor;                                          // 0x2778(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bIsOrthographic;                                          // 0x2780(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDefaultConstrainAspectRatio;                             // 0x2780(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bClientSimulatingViewTarget;                              // 0x2780(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseClientSideCameraUpdates;                              // 0x2780(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bGameCameraCutThisFrame;                                  // 0x2781(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData08[0x2];                                       // 0x2782(0x0002) MISSED OFFSET
	float                                              ViewPitchMin;                                             // 0x2784(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewPitchMax;                                             // 0x2788(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewYawMin;                                               // 0x278C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewYawMax;                                               // 0x2790(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewRollMin;                                              // 0x2794(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewRollMax;                                              // 0x2798(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x279C(0x0004) MISSED OFFSET
	float                                              ServerUpdateCameraTimeout;                                // 0x27A0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData10[0xC];                                       // 0x27A4(0x000C) MISSED OFFSET

	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates()//offset:0x2EAE4A0;
	void StopCameraShake(class UCameraShakeBase* ShakeInstance, bool bImmediately)//offset:0x2EAE350;
	void StopCameraFade()//offset:0x2EAE330;
	void StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate)//offset:0x2EAE260;
	void StopAllInstancesOfCameraShakeFromSource(class UCameraShakeBase* Shake, class UCameraShakeSourceComponent* SourceComponent, bool bImmediately)//offset:0x2EAE150;
	void StopAllInstancesOfCameraShake(class UCameraShakeBase* Shake, bool bImmediately)//offset:0x2EAE080;
	void StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate)//offset:0x2EADFB0;
	void StopAllCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately)//offset:0x2EADEE0;
	void StopAllCameraShakes(bool bImmediately)//offset:0x2EADE50;
	void StopAllCameraAnims(bool bImmediate)//offset:0x2EADDC0;
	class UMatineeCameraShake* StartMatineeCameraShakeFromSource(class UMatineeCameraShake* ShakeClass, class UCameraShakeSourceComponent* SourceComponent, float Scale, ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot)//offset:0x2EADBE0;
	class UMatineeCameraShake* StartMatineeCameraShake(class UMatineeCameraShake* ShakeClass, float Scale, ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot)//offset:0x2EADA50;
	class UCameraShakeBase* StartCameraShakeFromSource(class UCameraShakeBase* ShakeClass, class UCameraShakeSourceComponent* SourceComponent, float Scale, ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot)//offset:0x2EAD7E0;
	class UCameraShakeBase* StartCameraShake(class UCameraShakeBase* ShakeClass, float Scale, ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot)//offset:0x2EAD660;
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, const struct FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished)//offset:0x2EAD470;
	void SetManualCameraFade(float InFadeAmount, const struct FLinearColor& Color, bool bInFadeAudio)//offset:0x2EACED0;
	void SetGameCameraCutThisFrame()//offset:0x2EACDA0;
	bool RemoveCameraModifier(class UCameraModifier* ModifierToRemove)//offset:0x2EAB830;
	void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter)//offset:0x2EAB7A0;
	class UCameraAnimInst* PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot)//offset:0x2EAAF40;
	void PhotographyCameraModify(const struct FVector& NewCameraLocation, const struct FVector& PreviousCameraLocation, const struct FVector& OriginalCameraLocation, struct FVector* ResultCameraLocation)//offset:0x2EAADB0;
	void OnPhotographySessionStart()//offset:0x2E822C0;
	void OnPhotographySessionEnd()//offset:0xF6E9A0;
	void OnPhotographyMultiPartCaptureStart()//offset:0xF45DD0;
	void OnPhotographyMultiPartCaptureEnd()//offset:0x2DE3C30;
	class APlayerController* GetOwningPlayerController()//offset:0x2EAA880;
	float GetFOVAngle()//offset:0x2DC3D80;
	struct FRotator GetCameraRotation()//offset:0x2EA94A0;
	struct FVector GetCameraLocation()//offset:0x2EA9460;
	class UCameraModifier* FindCameraModifierByClass(class UCameraModifier* ModifierClass)//offset:0x2EA93C0;
	void ClearCameraLensEffects()//offset:0x2EA63F0;
	bool BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV)//offset:0x13CEB30;
	class UCameraModifier* AddNewCameraModifier(class UCameraModifier* ModifierClass)//offset:0x2EA60A0;
	class AEmitterCameraLensEffectBase* AddCameraLensEffect(class AEmitterCameraLensEffectBase* LensEffectEmitterClass)//offset:0x2EA6000;
};


// Class Engine.PlayerInput
// size:0x0380 (0x0028 - 0x03A8)
class UPlayerInput : public UObject
{
public:
	unsigned char                                      UnknownData00[0xF8];                                      // 0x0028(0x00F8) MISSED OFFSET
	TArray<struct FKeyBind>                            DebugExecBindings;                                        // 0x0120(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0130(0x0030) MISSED OFFSET
	TArray<struct FName>                               InvertedAxis;                                             // 0x0160(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData02[0x238];                                     // 0x0170(0x0238) MISSED OFFSET

	void SetMouseSensitivity(float Sensitivity)//offset:0x2EBA4A0;
	void SetBind(const struct FName& BindName, const class FString& Command)//offset:0x2EB8770;
	void InvertAxisKey(const struct FKey& AxisKey)//offset:0x2EB7020;
	void InvertAxis(const struct FName& AxisName)//offset:0x2EB6F90;
	void ClearSmoothing()//offset:0x2EB5990;
};


// Class Engine.PlayerStartPIE
// size:0x0000 (0x0250 - 0x0250)
class APlayerStartPIE : public APlayerStart
{
public:
};


// Class Engine.PluginCommandlet
// size:0x0020 (0x0080 - 0x00A0)
class UPluginCommandlet : public UCommandlet
{
public:
};


// Class Engine.PointLight
// size:0x0008 (0x0230 - 0x0238)
class APointLight : public ALight
{
public:
	class UPointLightComponent*                        PointLightComponent;                                      // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	void SetRadius(float NewRadius)//offset:0x2EBAD60;
	void SetLightFalloffExponent(float NewLightFalloffExponent)//offset:0x2EB9EE0;
};


// Class Engine.PointLightComponent
// size:0x0010 (0x0360 - 0x0370)
class UPointLightComponent : public ULocalLightComponent
{
public:
	float                                              SourceRadius;                                             // 0x0360(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SoftSourceRadius;                                         // 0x0364(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceLength;                                             // 0x0368(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x036C(0x0004) MISSED OFFSET

	void SetSourceRadius(float bNewValue)//offset:0x2EBB1B0;
	void SetSourceLength(float NewValue)//offset:0x2EBB130;
	void SetSoftSourceRadius(float bNewValue)//offset:0x2EBB0B0;
	void SetLightFalloffExponent(float NewLightFalloffExponent)//offset:0x2EB9F60;
};


// Class Engine.Polys
// size:0x0010 (0x0028 - 0x0038)
class UPolys : public UObject
{
public:
};


// Class Engine.PoseableMeshComponent
// size:0x0160 (0x06B0 - 0x0810)
class UPoseableMeshComponent : public USkinnedMeshComponent
{
public:

	void SetBoneTransformByName(const struct FName& BoneName, const struct FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace)//offset:0x2EB8BB0;
	void SetBoneScaleByName(const struct FName& BoneName, const struct FVector& InScale3D, TEnumAsByte<EBoneSpaces> BoneSpace)//offset:0x2EB8A90;
	void SetBoneRotationByName(const struct FName& BoneName, const struct FRotator& InRotation, TEnumAsByte<EBoneSpaces> BoneSpace)//offset:0x2EB8970;
	void SetBoneLocationByName(const struct FName& BoneName, const struct FVector& InLocation, TEnumAsByte<EBoneSpaces> BoneSpace)//offset:0x2EB8850;
	void ResetBoneTransformByName(const struct FName& BoneName)//offset:0x2EB81D0;
	struct FTransform GetBoneTransformByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)//offset:0x2EB60B0;
	struct FVector GetBoneScaleByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)//offset:0x2EB5FD0;
	struct FRotator GetBoneRotationByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)//offset:0x2EB5EF0;
	struct FVector GetBoneLocationByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)//offset:0x2EB5E10;
	void CopyPoseFromSkeletalComponent(class USkeletalMeshComponent* InComponentToCopy)//offset:0x2EB5AB0;
};


// Class Engine.PoseAsset
// size:0x00A0 (0x0080 - 0x0120)
class UPoseAsset : public UAnimationAsset
{
public:
	struct FPoseDataContainer                          PoseContainer;                                            // 0x0080(0x0090)
	bool                                               bAdditivePose;                                            // 0x0110(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	int                                                BasePoseIndex;                                            // 0x0114(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FName                                       RetargetSource;                                           // 0x0118(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.PoseWatch
// size:0x0010 (0x0028 - 0x0038)
class UPoseWatch : public UObject
{
public:
	class UEdGraphNode*                                Node;                                                     // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      PoseWatchColour;                                          // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
};


// Class Engine.PostProcessComponent
// size:0x0560 (0x0200 - 0x0760)
class UPostProcessComponent : public USceneComponent
{
public:
	struct FPostProcessSettings                        Settings;                                                 // 0x0200(0x0550) (Edit, BlueprintVisible)
	float                                              Priority;                                                 // 0x0750(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendRadius;                                              // 0x0754(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendWeight;                                              // 0x0758(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled;                                                 // 0x075C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUnbound;                                                 // 0x075C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x075D(0x0003) MISSED OFFSET

	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)//offset:0x2EB5100;
};


// Class Engine.PostProcessVolume
// size:0x0568 (0x0258 - 0x07C0)
class APostProcessVolume : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0258(0x0008) MISSED OFFSET
	struct FPostProcessSettings                        Settings;                                                 // 0x0260(0x0550) (Edit, BlueprintVisible)
	float                                              Priority;                                                 // 0x07B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendRadius;                                              // 0x07B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendWeight;                                              // 0x07B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled;                                                 // 0x07BC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUnbound;                                                 // 0x07BC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x07BD(0x0003) MISSED OFFSET

	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)//offset:0x2EB4FA0;
};


// Class Engine.PrecomputedVisibilityOverrideVolume
// size:0x0030 (0x0258 - 0x0288)
class APrecomputedVisibilityOverrideVolume : public AVolume
{
public:
	TArray<class AActor*>                              OverrideVisibleActors;                                    // 0x0258(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class AActor*>                              OverrideInvisibleActors;                                  // 0x0268(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               OverrideInvisibleLevels;                                  // 0x0278(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};


// Class Engine.PrecomputedVisibilityVolume
// size:0x0000 (0x0258 - 0x0258)
class APrecomputedVisibilityVolume : public AVolume
{
public:
};


// Class Engine.PreviewCollectionInterface
// size:0x0000 (0x0028 - 0x0028)
class UPreviewCollectionInterface : public UInterface
{
public:
};


// Class Engine.PreviewMeshCollection
// size:0x0020 (0x0030 - 0x0050)
class UPreviewMeshCollection : public UDataAsset
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	class USkeleton*                                   Skeleton;                                                 // 0x0038(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<struct FPreviewMeshCollectionEntry>         SkeletalMeshes;                                           // 0x0040(0x0010) (Edit, ZeroConstructor)
};


// Class Engine.PrimaryAssetLabel
// size:0x0038 (0x0030 - 0x0068)
class UPrimaryAssetLabel : public UPrimaryDataAsset
{
public:
	struct FPrimaryAssetRules                          Rules;                                                    // 0x0030(0x000C) (Edit)
	unsigned char                                      bLabelAssetsInMyDirectory;                                // 0x003C(0x0001) (Edit)
	unsigned char                                      bIsRuntimeLabel;                                          // 0x003C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData01[0x10];                                      // 0x003D(0x0010) UNKNOWN PROPERTY: 
	unsigned char                                      UnknownData02[0x10];                                      // 0x0050(0x0010) UNKNOWN PROPERTY: 
	struct FCollectionReference                        AssetCollection;                                          // 0x0060(0x0008) (Edit)
};


// Class Engine.ProxyLODMeshSimplificationSettings
// size:0x0008 (0x0038 - 0x0040)
class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
{
public:
	struct FName                                       ProxyLODMeshReductionModuleName;                          // 0x0038(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
};


// Class Engine.RadialForceActor
// size:0x0008 (0x0220 - 0x0228)
class ARadialForceActor : public ARigidBodyBase
{
public:
	class URadialForceComponent*                       ForceComponent;                                           // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	void ToggleForce()//offset:0x2E822C0;
	void FireImpulse()//offset:0x2DE3C30;
	void EnableForce()//offset:0xF45DD0;
	void DisableForce()//offset:0xF6E9A0;
};


// Class Engine.RadialForceComponent
// size:0x0030 (0x0200 - 0x0230)
class URadialForceComponent : public USceneComponent
{
public:
	float                                              ImpulseStrength;                                          // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bImpulseVelChange;                                        // 0x0204(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreOwningActor;                                       // 0x0204(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0205(0x0003) MISSED OFFSET
	float                                              ForceStrength;                                            // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DestructibleDamage;                                       // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<TEnumAsByte<EObjectTypeQuery>>              ObjectTypesToAffect;                                      // 0x0210(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0220(0x0010) MISSED OFFSET

	void RemoveObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType)//offset:0x2EBDAA0;
	void FireImpulse()//offset:0x1F79270;
	void AddObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType)//offset:0x2EBD7F0;
};


// Class Engine.RectLight
// size:0x0008 (0x0230 - 0x0238)
class ARectLight : public ALight
{
public:
	class URectLightComponent*                         RectLightComponent;                                       // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
};


// Class Engine.RectLightComponent
// size:0x0020 (0x0360 - 0x0380)
class URectLightComponent : public ULocalLightComponent
{
public:
	float                                              BarnDoorAngle;                                            // 0x0360(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BarnDoorLength;                                           // 0x0364(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    SourceTexture;                                            // 0x0368(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0370(0x0010) MISSED OFFSET

	void SetSourceWidth(float bNewValue)//offset:0x2EBDD40;
	void SetSourceTexture(class UTexture* bNewValue)//offset:0x2EBDCB0;
	void SetSourceHeight(float NewValue)//offset:0x2EB9F60;
	void SetBarnDoorLength(float NewValue)//offset:0x2EBDBA0;
	void SetBarnDoorAngle(float NewValue)//offset:0x2EBDB20;
};


// Class Engine.RendererSettings
// size:0x0110 (0x0038 - 0x0148)
class URendererSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bMobileDisableVertexFog;                                  // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                MaxMobileCascades;                                        // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EMobileMSAASampleCount>                MobileMSAASampleCount;                                    // 0x0040(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	unsigned char                                      bMobileAllowDitheredLODTransition;                        // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      bMobileAllowSoftwareOcclusionCulling;                     // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      bMobileVirtualTextures;                                   // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      bDiscardUnusedQualityLevels;                              // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      bOcclusionCulling;                                        // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	float                                              MinScreenRadiusForLights;                                 // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinScreenRadiusForEarlyZPass;                             // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinScreenRadiusForCSMdepth;                               // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bPrecomputedVisibilityWarning;                            // 0x0054(0x0001) (Edit, Config)
	unsigned char                                      bTextureStreaming;                                        // 0x0054(0x0001) (Edit, Config)
	unsigned char                                      bUseDXT5NormalMaps;                                       // 0x0054(0x0001) (Edit, Config)
	unsigned char                                      bVirtualTextures;                                         // 0x0054(0x0001) (Edit, Config)
	unsigned char                                      bVirtualTexturedLightmaps;                                // 0x0054(0x0001) (Edit, Config)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	uint32_t                                           VirtualTextureTileSize;                                   // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           VirtualTextureTileBorderSize;                             // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           VirtualTextureFeedbackFactor;                             // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bVirtualTextureEnableCompressZlib;                        // 0x0064(0x0001) (Edit, Config)
	unsigned char                                      bVirtualTextureEnableCompressCrunch;                      // 0x0064(0x0001) (Edit, Config)
	unsigned char                                      bClearCoatEnableSecondNormal;                             // 0x0064(0x0001) (Edit, Config)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
	int                                                ReflectionCaptureResolution;                              // 0x0068(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bReflectionCaptureCompression;                            // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      ReflectionEnvironmentLightmapMixBasedOnRoughness;         // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      bForwardShading;                                          // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      bVertexFoggingForOpaque;                                  // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      bAllowStaticLighting;                                     // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      bUseNormalMapsForStaticLighting;                          // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      bGenerateMeshDistanceFields;                              // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      bEightBitMeshDistanceFields;                              // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      bGenerateLandscapeGIData;                                 // 0x006D(0x0001) (Edit, Config)
	unsigned char                                      bCompressMeshDistanceFields;                              // 0x006D(0x0001) (Edit, Config)
	unsigned char                                      UnknownData05[0x2];                                       // 0x006E(0x0002) MISSED OFFSET
	float                                              TessellationAdaptivePixelsPerTriangle;                    // 0x0070(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bSeparateTranslucency;                                    // 0x0074(0x0001) (Edit, Config)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	TEnumAsByte<ETranslucentSortPolicy>                TranslucentSortPolicy;                                    // 0x0078(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	struct FVector                                     TranslucentSortAxis;                                      // 0x007C(0x000C) (Edit, ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           CustomMaskColor0;                                         // 0x0088(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           CustomMaskColor1;                                         // 0x008C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<ECustomDepthStencil>                   CustomDepthStencil;                                       // 0x0090(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	unsigned char                                      bCustomDepthTaaJitter;                                    // 0x0094(0x0001) (Edit, Config)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0095(0x0003) MISSED OFFSET
	TEnumAsByte<EAlphaChannelMode>                     bEnableAlphaChannelInPostProcessing;                      // 0x0098(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	unsigned char                                      bDefaultFeatureBloom;                                     // 0x009C(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureAmbientOcclusion;                          // 0x009C(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureAmbientOcclusionStaticFraction;            // 0x009C(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureAutoExposure;                              // 0x009C(0x0001) (Edit, Config)
	unsigned char                                      UnknownData11[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	TEnumAsByte<EAutoExposureMethodUI>                 DefaultFeatureAutoExposure;                               // 0x00A0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	float                                              DefaultFeatureAutoExposureBias;                           // 0x00A4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bExtendDefaultLuminanceRangeInAutoExposureSettings;       // 0x00A8(0x0001) (Edit, Config)
	unsigned char                                      bUsePreExposure;                                          // 0x00A8(0x0001) (Edit, Config)
	unsigned char                                      bEnablePreExposureOnlyInTheEditor;                        // 0x00A8(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureMotionBlur;                                // 0x00A8(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureLensFlare;                                 // 0x00A8(0x0001) (Edit, Config)
	unsigned char                                      bTemporalUpsampling;                                      // 0x00A8(0x0001) (Edit, Config)
	unsigned char                                      bSSGI;                                                    // 0x00A8(0x0001) (Edit, Config)
	unsigned char                                      UnknownData13[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	TEnumAsByte<EAntiAliasingMethod>                   DefaultFeatureAntiAliasing;                               // 0x00AC(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	ELightUnits                                        DefaultLightUnits;                                        // 0x00AD(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EDefaultBackBufferPixelFormat>         DefaultBackBufferPixelFormat;                             // 0x00AE(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData14[0x1];                                       // 0x00AF(0x0001) MISSED OFFSET
	unsigned char                                      bRenderUnbuiltPreviewShadowsInGame;                       // 0x00B0(0x0001) (Edit, Config)
	unsigned char                                      bStencilForLODDither;                                     // 0x00B0(0x0001) (Edit, Config)
	unsigned char                                      UnknownData15[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	TEnumAsByte<EEarlyZPass>                           EarlyZPass;                                               // 0x00B4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData16[0x3];                                       // 0x00B5(0x0003) MISSED OFFSET
	unsigned char                                      bEarlyZPassOnlyMaterialMasking;                           // 0x00B8(0x0001) (Edit, Config)
	unsigned char                                      bDBuffer;                                                 // 0x00B8(0x0001) (Edit, Config)
	unsigned char                                      UnknownData17[0x3];                                       // 0x00B9(0x0003) MISSED OFFSET
	TEnumAsByte<EClearSceneOptions>                    ClearSceneMethod;                                         // 0x00BC(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData18[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	unsigned char                                      bBasePassOutputsVelocity;                                 // 0x00C0(0x0001) (Edit, Config)
	unsigned char                                      bVertexDeformationOutputsVelocity;                        // 0x00C0(0x0001) (Edit, Config)
	unsigned char                                      bSelectiveBasePassOutputs;                                // 0x00C0(0x0001) (Edit, Config)
	unsigned char                                      bDefaultParticleCutouts;                                  // 0x00C0(0x0001) (Edit, Config)
	unsigned char                                      UnknownData19[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	int                                                GPUSimulationTextureSizeX;                                // 0x00C4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                GPUSimulationTextureSizeY;                                // 0x00C8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bGlobalClipPlane;                                         // 0x00CC(0x0001) (Edit, Config)
	unsigned char                                      UnknownData20[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET
	TEnumAsByte<EGBufferFormat>                        GBufferFormat;                                            // 0x00D0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData21[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	unsigned char                                      bUseGPUMorphTargets;                                      // 0x00D4(0x0001) (Edit, Config)
	unsigned char                                      bNvidiaAftermathEnabled;                                  // 0x00D4(0x0001) (Edit, Config)
	unsigned char                                      bMultiView;                                               // 0x00D4(0x0001) (Edit, Config)
	unsigned char                                      bMobilePostProcessing;                                    // 0x00D4(0x0001) (Edit, Config)
	unsigned char                                      bMobileMultiView;                                         // 0x00D4(0x0001) (Edit, Config)
	unsigned char                                      bMobileUseHWsRGBEncoding;                                 // 0x00D4(0x0001) (Config)
	unsigned char                                      bRoundRobinOcclusion;                                     // 0x00D4(0x0001) (Edit, Config)
	unsigned char                                      bODSCapture;                                              // 0x00D4(0x0001) (Edit, Config)
	unsigned char                                      bMeshStreaming;                                           // 0x00D5(0x0001) (Edit, Config)
	unsigned char                                      UnknownData22[0x2];                                       // 0x00D6(0x0002) MISSED OFFSET
	float                                              WireframeCullThreshold;                                   // 0x00D8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bEnableRayTracing;                                        // 0x00DC(0x0001) (Edit, Config)
	unsigned char                                      bEnableRayTracingTextureLOD;                              // 0x00DC(0x0001) (Edit, Config)
	unsigned char                                      bSupportStationarySkylight;                               // 0x00DC(0x0001) (Edit, Config)
	unsigned char                                      bSupportLowQualityLightmaps;                              // 0x00DC(0x0001) (Edit, Config)
	unsigned char                                      bSupportPointLightWholeSceneShadows;                      // 0x00DC(0x0001) (Edit, Config)
	unsigned char                                      bSupportAtmosphericFog;                                   // 0x00DC(0x0001) (Edit, Config)
	unsigned char                                      bSupportSkyAtmosphere;                                    // 0x00DC(0x0001) (Edit, Config)
	unsigned char                                      bSupportSkyAtmosphereAffectsHeightFog;                    // 0x00DC(0x0001) (Edit, Config)
	unsigned char                                      bSupportSkinCacheShaders;                                 // 0x00DD(0x0001) (Edit, Config)
	unsigned char                                      UnknownData23[0x2];                                       // 0x00DE(0x0002) MISSED OFFSET
	ESkinCacheDefaultBehavior                          DefaultSkinCacheBehavior;                                 // 0x00E0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData24[0x3];                                       // 0x00E1(0x0003) MISSED OFFSET
	float                                              SkinCacheSceneMemoryLimitInMB;                            // 0x00E4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bMobileEnableStaticAndCSMShadowReceivers;                 // 0x00E8(0x0001) (Edit, Config)
	unsigned char                                      bMobileEnableMovableLightCSMShaderCulling;                // 0x00E8(0x0001) (Edit, Config)
	unsigned char                                      bMobileAllowDistanceFieldShadows;                         // 0x00E8(0x0001) (Edit, Config)
	unsigned char                                      bMobileAllowMovableDirectionalLights;                     // 0x00E8(0x0001) (Edit, Config)
	unsigned char                                      UnknownData25[0x3];                                       // 0x00E9(0x0003) MISSED OFFSET
	uint32_t                                           MobileNumDynamicPointLights;                              // 0x00EC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bMobileDynamicPointLightsUseStaticBranch;                 // 0x00F0(0x0001) (Edit, Config)
	unsigned char                                      bMobileAllowMovableSpotlights;                            // 0x00F0(0x0001) (Edit, Config)
	unsigned char                                      bMobileAllowMovableSpotlightShadows;                      // 0x00F0(0x0001) (Edit, Config)
	unsigned char                                      bSupport16BitBoneIndex;                                   // 0x00F0(0x0001) (Edit, Config)
	unsigned char                                      bGPUSkinLimit2BoneInfluences;                             // 0x00F0(0x0001) (Edit, Config)
	unsigned char                                      bSupportDepthOnlyIndexBuffers;                            // 0x00F0(0x0001) (Edit, Config)
	unsigned char                                      bSupportReversedIndexBuffers;                             // 0x00F0(0x0001) (Edit, Config)
	unsigned char                                      bLPV;                                                     // 0x00F0(0x0001) (Edit, Config)
	unsigned char                                      bMobileAmbientOcclusion;                                  // 0x00F1(0x0001) (Edit, Config)
	unsigned char                                      bUseUnlimitedBoneInfluences;                              // 0x00F1(0x0001) (Edit, Config)
	unsigned char                                      UnknownData26[0x2];                                       // 0x00F2(0x0002) MISSED OFFSET
	int                                                UnlimitedBonInfluencesThreshold;                          // 0x00F4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EMobilePlanarReflectionMode>           MobilePlanarReflectionMode;                               // 0x00F8(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FPerPlatformBool                            bStreamSkeletalMeshLODs;                                  // 0x00F9(0x0001) (Edit, Config)
	struct FPerPlatformBool                            bDiscardSkeletalMeshOptionalLODs;                         // 0x00FA(0x0001) (Edit, Config)
	unsigned char                                      UnknownData27[0x5];                                       // 0x00FB(0x0005) MISSED OFFSET
	struct FSoftObjectPath                             VisualizeCalibrationColorMaterialPath;                    // 0x0100(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             VisualizeCalibrationCustomMaterialPath;                   // 0x0118(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             VisualizeCalibrationGrayscaleMaterialPath;                // 0x0130(0x0018) (Edit, ZeroConstructor, Config)
};


// Class Engine.RendererOverrideSettings
// size:0x0008 (0x0038 - 0x0040)
class URendererOverrideSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bSupportAllShaderPermutations;                            // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bForceRecomputeTangents;                                  // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
};


// Class Engine.ReplayNetConnection
// size:0x0800 (0x1B58 - 0x2358)
class UReplayNetConnection : public UNetConnection
{
public:
};


// Class Engine.ReplaySubsystem
// size:0x0008 (0x0030 - 0x0038)
class UReplaySubsystem : public UGameInstanceSubsystem
{
public:
};


// Class Engine.ReplicationDriver
// size:0x0000 (0x0028 - 0x0028)
class UReplicationDriver : public UObject
{
public:
};


// Class Engine.ReplicationConnectionDriver
// size:0x0000 (0x0028 - 0x0028)
class UReplicationConnectionDriver : public UObject
{
public:
};


// Class Engine.ReporterBase
// size:0x0008 (0x0028 - 0x0030)
class UReporterBase : public UObject
{
public:
};


// Class Engine.ReporterGraph
// size:0x0078 (0x0030 - 0x00A8)
class UReporterGraph : public UReporterBase
{
public:
};


// Class Engine.ReverbEffect
// size:0x0038 (0x0028 - 0x0060)
class UReverbEffect : public UObject
{
public:
	bool                                               bBypassEarlyReflections;                                  // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              ReflectionsDelay;                                         // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GainHF;                                                   // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ReflectionsGain;                                          // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bBypassLateReflections;                                   // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	float                                              LateDelay;                                                // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DecayTime;                                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Density;                                                  // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Diffusion;                                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AirAbsorptionGainHF;                                      // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DecayHFRatio;                                             // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LateGain;                                                 // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Gain;                                                     // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RoomRolloffFactor;                                        // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.Rig
// size:0x0028 (0x0028 - 0x0050)
class URig : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<struct FTransformBase>                      TransformBases;                                           // 0x0030(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TArray<struct FNode>                               Nodes;                                                    // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor)
};


// Class Engine.RotatingMovementComponent
// size:0x0020 (0x00F0 - 0x0110)
class URotatingMovementComponent : public UMovementComponent
{
public:
	struct FRotator                                    RotationRate;                                             // 0x00F0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PivotTranslation;                                         // 0x00FC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRotationInLocalSpace;                                    // 0x0108(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0109(0x0007) MISSED OFFSET
};


// Class Engine.RuntimeOptionsBase
// size:0x0010 (0x0028 - 0x0038)
class URuntimeOptionsBase : public UObject
{
public:
};


// Class Engine.RuntimeVirtualTexture
// size:0x0078 (0x0028 - 0x00A0)
class URuntimeVirtualTexture : public UObject
{
public:
	int                                                TileCount;                                                // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                TileSize;                                                 // 0x002C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                TileBorderSize;                                           // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	ERuntimeVirtualTextureMaterialType                 MaterialType;                                             // 0x0034(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCompressTextures;                                        // 0x0035(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bClearTextures;                                           // 0x0036(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSinglePhysicalSpace;                                     // 0x0037(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPrivateSpace;                                            // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAdaptive;                                                // 0x0039(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bContinuousUpdate;                                        // 0x003A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x003B(0x0001) MISSED OFFSET
	int                                                RemoveLowMips;                                            // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureGroup>                         LODGroup;                                                 // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	int                                                Size;                                                     // 0x0044(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	class URuntimeVirtualTextureStreamingProxy*        StreamingTexture;                                         // 0x0048(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData02[0x50];                                      // 0x0050(0x0050) MISSED OFFSET

	int GetTileSize()//offset:0x2EC16F0;
	int GetTileCount()//offset:0x2EC1690;
	int GetTileBorderSize()//offset:0x2EC1650;
	int GetSize()//offset:0x2EC15C0;
	int GetPageTableSize()//offset:0x2EC1590;
};


// Class Engine.RuntimeVirtualTextureComponent
// size:0x0070 (0x0200 - 0x0270)
class URuntimeVirtualTextureComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0200(0x0020) MISSED OFFSET
	bool                                               bSetBoundsButton;                                         // 0x0220(0x0001) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bSnapBoundsToLandscape;                                   // 0x0221(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0222(0x0006) MISSED OFFSET
	class URuntimeVirtualTexture*                      VirtualTexture;                                           // 0x0228(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableScalability;                                       // 0x0230(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0231(0x0003) MISSED OFFSET
	uint32_t                                           ScalabilityGroup;                                         // 0x0234(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHidePrimitives;                                          // 0x0238(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0239(0x0007) MISSED OFFSET
	class UVirtualTextureBuilder*                      StreamingTexture;                                         // 0x0240(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                StreamLowMips;                                            // 0x0248(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bBuildStreamingMipsButton;                                // 0x024C(0x0001) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bEnableCompressCrunch;                                    // 0x024D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseStreamingLowMipsInEditor;                             // 0x024E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bBuildDebugStreamingMips;                                 // 0x024F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x20];                                      // 0x0250(0x0020) MISSED OFFSET

	void Invalidate(const struct FBoxSphereBounds& WorldBounds)//offset:0x2EC1740;
};


// Class Engine.RuntimeVirtualTextureVolume
// size:0x0008 (0x0220 - 0x0228)
class ARuntimeVirtualTextureVolume : public AActor
{
public:
	class URuntimeVirtualTextureComponent*             VirtualTextureComponent;                                  // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
};


// Class Engine.RVOAvoidanceInterface
// size:0x0000 (0x0028 - 0x0028)
class URVOAvoidanceInterface : public UInterface
{
public:
};


// Class Engine.Scene
// size:0x0000 (0x0028 - 0x0028)
class UScene : public UObject
{
public:
};


// Class Engine.SceneCapture2D
// size:0x0008 (0x0230 - 0x0238)
class ASceneCapture2D : public ASceneCapture
{
public:
	class USceneCaptureComponent2D*                    CaptureComponent2D;                                       // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	void OnInterpToggle(bool bEnable)//offset:0x2EA1AF0;
};


// Class Engine.SceneCaptureComponentCube
// size:0x0030 (0x02B0 - 0x02E0)
class USceneCaptureComponentCube : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                            // 0x02B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCaptureRotation;                                         // 0x02B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02B9(0x0007) MISSED OFFSET
	class UTextureRenderTargetCube*                    TextureTargetLeft;                                        // 0x02C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTextureRenderTargetCube*                    TextureTargetRight;                                       // 0x02C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTextureRenderTarget2D*                      TextureTargetODS;                                         // 0x02D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              IPD;                                                      // 0x02D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02DC(0x0004) MISSED OFFSET

	void CaptureScene()//offset:0x2EC5E90;
};


// Class Engine.SceneCaptureCube
// size:0x0008 (0x0230 - 0x0238)
class ASceneCaptureCube : public ASceneCapture
{
public:
	class USceneCaptureComponentCube*                  CaptureComponentCube;                                     // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	void OnInterpToggle(bool bEnable)//offset:0x2EA1AF0;
};


// Class Engine.SCS_Node
// size:0x00B0 (0x0028 - 0x00D8)
class USCS_Node : public UObject
{
public:
	class UObject*                                     ComponentClass;                                           // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class UActorComponent*                             ComponentTemplate;                                        // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FBlueprintCookedComponentInstancingData     CookedComponentInstancingData;                            // 0x0038(0x0048)
	struct FName                                       AttachToName;                                             // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ParentComponentOrVariableName;                            // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ParentComponentOwnerClassName;                            // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsParentComponentNative;                                 // 0x0098(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET
	TArray<class USCS_Node*>                           ChildNodes;                                               // 0x00A0(0x0010) (ZeroConstructor)
	TArray<struct FBPVariableMetaDataEntry>            MetaDataArray;                                            // 0x00B0(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       VariableGuid;                                             // 0x00C0(0x0010) (ZeroConstructor, IsPlainOldData)
	struct FName                                       InternalVariableName;                                     // 0x00D0(0x0008) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.Selection
// size:0x0078 (0x0028 - 0x00A0)
class USelection : public UObject
{
public:
};


// Class Engine.ServerStatReplicator
// size:0x00C8 (0x0220 - 0x02E8)
class AServerStatReplicator : public AInfo
{
public:
	bool                                               bUpdateStatNet;                                           // 0x0220(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bOverwriteClientStats;                                    // 0x0221(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0222(0x0002) MISSED OFFSET
	uint32_t                                           Channels;                                                 // 0x0224(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InRate;                                                   // 0x0228(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutRate;                                                  // 0x022C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0230(0x0004) MISSED OFFSET
	uint32_t                                           MaxPacketOverhead;                                        // 0x0234(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InRateClientMax;                                          // 0x0238(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InRateClientMin;                                          // 0x023C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InRateClientAvg;                                          // 0x0240(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InPacketsClientMax;                                       // 0x0244(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InPacketsClientMin;                                       // 0x0248(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InPacketsClientAvg;                                       // 0x024C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutRateClientMax;                                         // 0x0250(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutRateClientMin;                                         // 0x0254(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutRateClientAvg;                                         // 0x0258(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutPacketsClientMax;                                      // 0x025C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutPacketsClientMin;                                      // 0x0260(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutPacketsClientAvg;                                      // 0x0264(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NetNumClients;                                            // 0x0268(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InPackets;                                                // 0x026C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutPackets;                                               // 0x0270(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InBunches;                                                // 0x0274(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutBunches;                                               // 0x0278(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutLoss;                                                  // 0x027C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InLoss;                                                   // 0x0280(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           VoiceBytesSent;                                           // 0x0284(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           VoiceBytesRecv;                                           // 0x0288(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           VoicePacketsSent;                                         // 0x028C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           VoicePacketsRecv;                                         // 0x0290(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           PercentInVoice;                                           // 0x0294(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           PercentOutVoice;                                          // 0x0298(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumActorChannels;                                         // 0x029C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumConsideredActors;                                      // 0x02A0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           PrioritizedActors;                                        // 0x02A4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumRelevantActors;                                        // 0x02A8(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumRelevantDeletedActors;                                 // 0x02AC(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumReplicatedActorAttempts;                               // 0x02B0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumReplicatedActors;                                      // 0x02B4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumActors;                                                // 0x02B8(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumNetActors;                                             // 0x02BC(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumDormantActors;                                         // 0x02C0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumInitiallyDormantActors;                                // 0x02C4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumNetGUIDsAckd;                                          // 0x02C8(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumNetGUIDsPending;                                       // 0x02CC(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumNetGUIDsUnAckd;                                        // 0x02D0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ObjPathBytes;                                             // 0x02D4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NetGUIDOutRate;                                           // 0x02D8(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NetGUIDInRate;                                            // 0x02DC(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NetSaturated;                                             // 0x02E0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x02E4(0x0004) MISSED OFFSET
};


// Class Engine.ShadowMapTexture2D
// size:0x0008 (0x0100 - 0x0108)
class UShadowMapTexture2D : public UTexture2D
{
public:
	TEnumAsByte<EShadowMapFlags>                       ShadowmapFlags;                                           // 0x0100(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0101(0x0007) MISSED OFFSET
};


// Class Engine.SimpleConstructionScript
// size:0x0078 (0x0028 - 0x00A0)
class USimpleConstructionScript : public UObject
{
public:
	TArray<class USCS_Node*>                           RootNodes;                                                // 0x0028(0x0010) (ZeroConstructor)
	TArray<class USCS_Node*>                           AllNodes;                                                 // 0x0038(0x0010) (ZeroConstructor)
	class USCS_Node*                                   DefaultSceneRootNode;                                     // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0050(0x0050) MISSED OFFSET
};


// Class Engine.SkeletalMeshActor
// size:0x0088 (0x0220 - 0x02A8)
class ASkeletalMeshActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0220(0x0008) MISSED OFFSET
	unsigned char                                      bShouldDoAnimNotifies;                                    // 0x0228(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bWakeOnLevelStart;                                        // 0x0228(0x0001) (Deprecated)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0229(0x0007) MISSED OFFSET
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                    // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USkeletalMesh*                               ReplicatedMesh;                                           // 0x0238(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	class UPhysicsAsset*                               ReplicatedPhysAsset;                                      // 0x0240(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInterface*                          ReplicatedMaterial0;                                      // 0x0248(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          ReplicatedMaterial1;                                      // 0x0250(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x50];                                      // 0x0258(0x0050) MISSED OFFSET

	void OnRep_ReplicatedPhysAsset()//offset:0xF45DD0;
	void OnRep_ReplicatedMesh()//offset:0x2DE3C30;
	void OnRep_ReplicatedMaterial1()//offset:0x2E822C0;
	void OnRep_ReplicatedMaterial0()//offset:0xF6E9A0;
};


// Class Engine.SkeletalMeshEditorData
// size:0x0000 (0x0028 - 0x0028)
class USkeletalMeshEditorData : public UObject
{
public:
};


// Class Engine.SkeletalMeshLODSettings
// size:0x0020 (0x0030 - 0x0050)
class USkeletalMeshLODSettings : public UDataAsset
{
public:
	struct FPerPlatformInt                             MinLOD;                                                   // 0x0030(0x0004) (Edit, Config, GlobalConfig)
	struct FPerPlatformBool                            DisableBelowMinLodStripping;                              // 0x0034(0x0001) (Edit, Config, GlobalConfig)
	bool                                               bOverrideLODStreamingSettings;                            // 0x0035(0x0001) (Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	struct FPerPlatformBool                            bSupportLODStreaming;                                     // 0x0036(0x0001) (Edit, Config, GlobalConfig)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0037(0x0001) MISSED OFFSET
	struct FPerPlatformInt                             MaxNumStreamedLODs;                                       // 0x0038(0x0004) (Edit, Config, GlobalConfig)
	struct FPerPlatformInt                             MaxNumOptionalLODs;                                       // 0x003C(0x0004) (Edit, Config, GlobalConfig)
	TArray<struct FSkeletalMeshLODGroupSettings>       LODGroups;                                                // 0x0040(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
};


// Class Engine.SkeletalMeshSimplificationSettings
// size:0x0008 (0x0038 - 0x0040)
class USkeletalMeshSimplificationSettings : public UDeveloperSettings
{
public:
	struct FName                                       SkeletalMeshReductionModuleName;                          // 0x0038(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
};


// Class Engine.SkeletalMeshSocket
// size:0x0038 (0x0028 - 0x0060)
class USkeletalMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                               // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       BoneName;                                                 // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FVector                                     RelativeLocation;                                         // 0x0038(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x0044(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeScale;                                            // 0x0050(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bForceAlwaysAnimated;                                     // 0x005C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x005D(0x0003) MISSED OFFSET

	void InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, const struct FVector& WorldLocation, const struct FVector& WorldNormal)//offset:0x2ED7430;
	struct FVector GetSocketLocation(class USkeletalMeshComponent* SkelComp)//offset:0x2ED70F0;
};


// Class Engine.SkyAtmosphereComponent
// size:0x00D0 (0x0200 - 0x02D0)
class USkyAtmosphereComponent : public USceneComponent
{
public:
	struct FColor                                      GroundAlbedo;                                             // 0x0200(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AtmosphereHeight;                                         // 0x0204(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MultiScatteringFactor;                                    // 0x0208(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TraceSampleCountScale;                                    // 0x020C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RayleighScatteringScale;                                  // 0x0210(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                RayleighScattering;                                       // 0x0214(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RayleighExponentialDistribution;                          // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MieScatteringScale;                                       // 0x0228(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                MieScattering;                                            // 0x022C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MieAbsorptionScale;                                       // 0x023C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                MieAbsorption;                                            // 0x0240(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MieAnisotropy;                                            // 0x0250(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MieExponentialDistribution;                               // 0x0254(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OtherAbsorptionScale;                                     // 0x0258(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                OtherAbsorption;                                          // 0x025C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FTentDistribution                           OtherTentDistribution;                                    // 0x026C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                SkyLuminanceFactor;                                       // 0x0278(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AerialPespectiveViewDistanceScale;                        // 0x0288(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HeightFogContribution;                                    // 0x028C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TransmittanceMinLightElevationAngle;                      // 0x0290(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AerialPerspectiveStartDepth;                              // 0x0294(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x24];                                      // 0x0298(0x0024) MISSED OFFSET
	struct FGuid                                       bStaticLightingBuiltGUID;                                 // 0x02BC(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02CC(0x0004) MISSED OFFSET

	void SetSkyLuminanceFactor(const struct FLinearColor& NewValue)//offset:0x2EDC100;
	void SetRayleighScatteringScale(float NewValue)//offset:0x2EDC080;
	void SetRayleighScattering(const struct FLinearColor& NewValue)//offset:0x2EDBFF0;
	void SetRayleighExponentialDistribution(float NewValue)//offset:0x2EDBF70;
	void SetOtherAbsorptionScale(float NewValue)//offset:0x2EDBEF0;
	void SetOtherAbsorption(const struct FLinearColor& NewValue)//offset:0x2EDBE60;
	void SetMieScatteringScale(float NewValue)//offset:0x2EDBBD0;
	void SetMieScattering(const struct FLinearColor& NewValue)//offset:0x2EDBB40;
	void SetMieExponentialDistribution(float NewValue)//offset:0x2EDBAC0;
	void SetMieAnisotropy(float NewValue)//offset:0x2E6AF30;
	void SetMieAbsorptionScale(float NewValue)//offset:0x2EDBA40;
	void SetMieAbsorption(const struct FLinearColor& NewValue)//offset:0x2EDB9B0;
	void SetHeightFogContribution(float NewValue)//offset:0x2EDB710;
	void SetAerialPespectiveViewDistanceScale(float NewValue)//offset:0x2EDB4E0;
	void OverrideAtmosphereLightDirection(int AtmosphereLightIndex, const struct FVector& LightDirection)//offset:0x2EDB3F0;
};


// Class Engine.SkyAtmosphere
// size:0x0008 (0x0220 - 0x0228)
class ASkyAtmosphere : public AInfo
{
public:
	class USkyAtmosphereComponent*                     SkyAtmosphereComponent;                                   // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
};


// Class Engine.SkyLightComponent
// size:0x01E0 (0x0230 - 0x0410)
class USkyLightComponent : public ULightComponentBase
{
public:
	class UTextureCube*                                Cubemap;                                                  // 0x0230(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceCubemapAngle;                                       // 0x0238(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CubemapResolution;                                        // 0x023C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SkyDistanceThreshold;                                     // 0x0240(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCaptureEmissiveOnly;                                     // 0x0244(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLowerHemisphereIsBlack;                                  // 0x0245(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0246(0x0002) MISSED OFFSET
	struct FLinearColor                                LowerHemisphereColor;                                     // 0x0248(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OcclusionMaxDistance;                                     // 0x0258(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Contrast;                                                 // 0x025C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OcclusionExponent;                                        // 0x0260(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinOcclusion;                                             // 0x0264(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      OcclusionTint;                                            // 0x0268(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCloudAmbientOcclusion;                                   // 0x026C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x026D(0x0003) MISSED OFFSET
	float                                              CloudAmbientOcclusionStrength;                            // 0x0270(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudAmbientOcclusionExtent;                              // 0x0274(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudAmbientOcclusionMapResolutionScale;                  // 0x0278(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudAmbientOcclusionApertureScale;                       // 0x027C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EOcclusionCombineMode>                 OcclusionCombineMode;                                     // 0x0280(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xB7];                                      // 0x0281(0x00B7) MISSED OFFSET
	class UTextureCube*                                BlendDestinationCubemap;                                  // 0x0338(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0xD0];                                      // 0x0340(0x00D0) MISSED OFFSET

	void SetVolumetricScatteringIntensity(float NewIntensity)//offset:0x2EDC190;
	void SetOcclusionTint(const struct FColor& InTint)//offset:0x2EDBDD0;
	void SetOcclusionExponent(float InOcclusionExponent)//offset:0x2EDBD50;
	void SetOcclusionContrast(float InOcclusionContrast)//offset:0x2EDBCD0;
	void SetMinOcclusion(float InMinOcclusion)//offset:0x2EDBC50;
	void SetLowerHemisphereColor(const struct FLinearColor& InLowerHemisphereColor)//offset:0x2EDB920;
	void SetLightColor(const struct FLinearColor& NewLightColor)//offset:0x2EDB890;
	void SetIntensity(float NewIntensity)//offset:0x2EDB810;
	void SetIndirectLightingIntensity(float NewIntensity)//offset:0x2EDB790;
	void SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction)//offset:0x2EDB5F0;
	void SetCubemap(class UTextureCube* NewCubemap)//offset:0x2EDB560;
	void RecaptureSky()//offset:0x2EDB4C0;
};


// Class Engine.SlateBrushAsset
// size:0x0088 (0x0028 - 0x00B0)
class USlateBrushAsset : public UObject
{
public:
	struct FSlateBrush                                 Brush;                                                    // 0x0028(0x0088) (Edit)
};


// Class Engine.SlateTextureAtlasInterface
// size:0x0000 (0x0028 - 0x0028)
class USlateTextureAtlasInterface : public UInterface
{
public:
};


// Class Engine.SmokeTestCommandlet
// size:0x0000 (0x0080 - 0x0080)
class USmokeTestCommandlet : public UCommandlet
{
public:
};


// Class Engine.SoundAttenuation
// size:0x03A0 (0x0028 - 0x03C8)
class USoundAttenuation : public UObject
{
public:
	struct FSoundAttenuationSettings                   Attenuation;                                              // 0x0028(0x03A0) (Edit, BlueprintVisible, BlueprintReadOnly)
};


// Class Engine.SoundClass
// size:0x00A8 (0x0028 - 0x00D0)
class USoundClass : public UObject
{
public:
	struct FSoundClassProperties                       Properties;                                               // 0x0028(0x0080) (Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<class USoundClass*>                         ChildClasses;                                             // 0x00A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FPassiveSoundMixModifier>            PassiveSoundMixModifiers;                                 // 0x00B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class USoundClass*                                 ParentClass;                                              // 0x00C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};


// Class Engine.SoundConcurrency
// size:0x0028 (0x0028 - 0x0050)
class USoundConcurrency : public UObject
{
public:
	struct FSoundConcurrencySettings                   Concurrency;                                              // 0x0028(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
};


// Class Engine.SoundCue
// size:0x03D8 (0x01B8 - 0x0590)
class USoundCue : public USoundBase
{
public:
	unsigned char                                      bPrimeOnLoad;                                             // 0x01B8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01B9(0x0007) MISSED OFFSET
	class USoundNode*                                  FirstNode;                                                // 0x01C0(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              VolumeMultiplier;                                         // 0x01C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PitchMultiplier;                                          // 0x01CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FSoundAttenuationSettings                   AttenuationOverrides;                                     // 0x01D0(0x03A0) (Edit)
	float                                              SubtitlePriority;                                         // 0x0570(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0574(0x0004) MISSED OFFSET
	unsigned char                                      bOverrideAttenuation;                                     // 0x0578(0x0001) (Edit)
	unsigned char                                      bExcludeFromRandomNodeBranchCulling;                      // 0x0578(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0579(0x0003) MISSED OFFSET
	int                                                CookedQualityIndex;                                       // 0x057C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHasPlayWhenSilent;                                       // 0x0580(0x0001)
	unsigned char                                      UnknownData03[0xF];                                       // 0x0581(0x000F) MISSED OFFSET
};


// Class Engine.SoundEffectSourcePresetChain
// size:0x0018 (0x0028 - 0x0040)
class USoundEffectSourcePresetChain : public UObject
{
public:
	TArray<struct FSourceEffectChainEntry>             Chain;                                                    // 0x0028(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bPlayEffectChainTails;                                    // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
};


// Class Engine.SoundGroups
// size:0x0060 (0x0028 - 0x0088)
class USoundGroups : public UObject
{
public:
	TArray<struct FSoundGroup>                         SoundGroupProfiles;                                       // 0x0028(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0038(0x0050) MISSED OFFSET
};


// Class Engine.SoundMix
// size:0x0068 (0x0028 - 0x0090)
class USoundMix : public UObject
{
public:
	unsigned char                                      bApplyEQ;                                                 // 0x0028(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              EQPriority;                                               // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FAudioEQEffect                              EQSettings;                                               // 0x0030(0x0040) (Edit)
	TArray<struct FSoundClassAdjuster>                 SoundClassEffects;                                        // 0x0070(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              InitialDelay;                                             // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FadeInTime;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Duration;                                                 // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FadeOutTime;                                              // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.SoundNodeAssetReferencer
// size:0x0000 (0x0048 - 0x0048)
class USoundNodeAssetReferencer : public USoundNode
{
public:
};


// Class Engine.SoundNodeAttenuation
// size:0x03B0 (0x0048 - 0x03F8)
class USoundNodeAttenuation : public USoundNode
{
public:
	class USoundAttenuation*                           AttenuationSettings;                                      // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FSoundAttenuationSettings                   AttenuationOverrides;                                     // 0x0050(0x03A0) (Edit)
	unsigned char                                      bOverrideAttenuation;                                     // 0x03F0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET
};


// Class Engine.SoundNodeBranch
// size:0x0008 (0x0048 - 0x0050)
class USoundNodeBranch : public USoundNode
{
public:
	struct FName                                       BoolParameterName;                                        // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.SoundNodeConcatenator
// size:0x0010 (0x0048 - 0x0058)
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                              // 0x0048(0x0010) (Edit, EditFixedSize, ZeroConstructor)
};


// Class Engine.SoundNodeDelay
// size:0x0008 (0x0048 - 0x0050)
class USoundNodeDelay : public USoundNode
{
public:
	float                                              DelayMin;                                                 // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DelayMax;                                                 // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.SoundNodeDialoguePlayer
// size:0x0028 (0x0048 - 0x0070)
class USoundNodeDialoguePlayer : public USoundNode
{
public:
	struct FDialogueWaveParameter                      DialogueWaveParameter;                                    // 0x0048(0x0020) (Edit)
	unsigned char                                      bLooping;                                                 // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
};


// Class Engine.SoundNodeDistanceCrossFade
// size:0x0010 (0x0048 - 0x0058)
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray<struct FDistanceDatum>                      CrossFadeInput;                                           // 0x0048(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor)
};


// Class Engine.SoundNodeDoppler
// size:0x0010 (0x0048 - 0x0058)
class USoundNodeDoppler : public USoundNode
{
public:
	float                                              DopplerIntensity;                                         // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseSmoothing;                                            // 0x004C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              SmoothingInterpSpeed;                                     // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
};


// Class Engine.SoundNodeEnveloper
// size:0x0148 (0x0048 - 0x0190)
class USoundNodeEnveloper : public USoundNode
{
public:
	float                                              LoopStart;                                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LoopEnd;                                                  // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DurationAfterLoop;                                        // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                LoopCount;                                                // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLoopIndefinitely;                                        // 0x0058(0x0001) (Edit)
	unsigned char                                      bLoop;                                                    // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
	class UDistributionFloatConstantCurve*             VolumeInterpCurve;                                        // 0x0060(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	class UDistributionFloatConstantCurve*             PitchInterpCurve;                                         // 0x0068(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FRuntimeFloatCurve                          VolumeCurve;                                              // 0x0070(0x0088) (Edit)
	struct FRuntimeFloatCurve                          PitchCurve;                                               // 0x00F8(0x0088) (Edit)
	float                                              PitchMin;                                                 // 0x0180(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PitchMax;                                                 // 0x0184(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMin;                                                // 0x0188(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMax;                                                // 0x018C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.SoundNodeGroupControl
// size:0x0010 (0x0048 - 0x0058)
class USoundNodeGroupControl : public USoundNode
{
public:
	TArray<int>                                        GroupSizes;                                               // 0x0048(0x0010) (Edit, EditFixedSize, ZeroConstructor)
};


// Class Engine.SoundNodeLooping
// size:0x0008 (0x0048 - 0x0050)
class USoundNodeLooping : public USoundNode
{
public:
	int                                                LoopCount;                                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLoopIndefinitely;                                        // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
};


// Class Engine.SoundNodeMature
// size:0x0000 (0x0048 - 0x0048)
class USoundNodeMature : public USoundNode
{
public:
};


// Class Engine.SoundNodeMixer
// size:0x0010 (0x0048 - 0x0058)
class USoundNodeMixer : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                              // 0x0048(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor)
};


// Class Engine.SoundNodeModulator
// size:0x0010 (0x0048 - 0x0058)
class USoundNodeModulator : public USoundNode
{
public:
	float                                              PitchMin;                                                 // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PitchMax;                                                 // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMin;                                                // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMax;                                                // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.SoundNodeModulatorContinuous
// size:0x0040 (0x0048 - 0x0088)
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FModulatorContinuousParams                  PitchModulationParams;                                    // 0x0048(0x0020) (Edit)
	struct FModulatorContinuousParams                  VolumeModulationParams;                                   // 0x0068(0x0020) (Edit)
};


// Class Engine.SoundNodeOscillator
// size:0x0028 (0x0048 - 0x0070)
class USoundNodeOscillator : public USoundNode
{
public:
	unsigned char                                      bModulateVolume;                                          // 0x0048(0x0001) (Edit)
	unsigned char                                      bModulatePitch;                                           // 0x0048(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	float                                              AmplitudeMin;                                             // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AmplitudeMax;                                             // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FrequencyMin;                                             // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FrequencyMax;                                             // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OffsetMin;                                                // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OffsetMax;                                                // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenterMin;                                                // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenterMax;                                                // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
};


// Class Engine.SoundNodeParamCrossFade
// size:0x0008 (0x0058 - 0x0060)
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{
public:
	struct FName                                       ParamName;                                                // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.SoundNodeQualityLevel
// size:0x0008 (0x0048 - 0x0050)
class USoundNodeQualityLevel : public USoundNode
{
public:
	int                                                CookedQualityLevelIndex;                                  // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
};


// Class Engine.SoundNodeRandom
// size:0x0030 (0x0048 - 0x0078)
class USoundNodeRandom : public USoundNode
{
public:
	TArray<float>                                      Weights;                                                  // 0x0048(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TArray<bool>                                       HasBeenUsed;                                              // 0x0058(0x0010) (ZeroConstructor, Transient)
	int                                                NumRandomUsed;                                            // 0x0068(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                PreselectAtLevelLoad;                                     // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bShouldExcludeFromBranchCulling;                          // 0x0070(0x0001) (Edit)
	unsigned char                                      bSoundCueExcludedFromBranchCulling;                       // 0x0070(0x0001)
	unsigned char                                      bRandomizeWithoutReplacement;                             // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
};


// Class Engine.SoundNodeSoundClass
// size:0x0010 (0x0048 - 0x0058)
class USoundNodeSoundClass : public USoundNode
{
public:
	class USoundClass*                                 SoundClassOverride;                                       // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
};


// Class Engine.SoundNodeSwitch
// size:0x0008 (0x0048 - 0x0050)
class USoundNodeSwitch : public USoundNode
{
public:
	struct FName                                       IntParameterName;                                         // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.SoundNodeWaveParam
// size:0x0008 (0x0048 - 0x0050)
class USoundNodeWaveParam : public USoundNode
{
public:
	struct FName                                       WaveParameterName;                                        // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.SoundNodeWavePlayer
// size:0x0040 (0x0048 - 0x0088)
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0048(0x0028) UNKNOWN PROPERTY: 
	class USoundWave*                                  SoundWave;                                                // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0078(0x0008) MISSED OFFSET
	unsigned char                                      bLooping;                                                 // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
};


// Class Engine.SoundSourceBus
// size:0x0018 (0x0370 - 0x0388)
class USoundSourceBus : public USoundWave
{
public:
	ESourceBusChannels                                 SourceBusChannels;                                        // 0x0370(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0371(0x0003) MISSED OFFSET
	float                                              SourceBusDuration;                                        // 0x0374(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UAudioBus*                                   AudioBus;                                                 // 0x0378(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoDeactivateWhenSilent;                                // 0x0380(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0381(0x0007) MISSED OFFSET
};


// Class Engine.SoundSubmixBase
// size:0x0010 (0x0028 - 0x0038)
class USoundSubmixBase : public UObject
{
public:
	TArray<class USoundSubmixBase*>                    ChildSubmixes;                                            // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
};


// Class Engine.SoundSubmixWithParentBase
// size:0x0008 (0x0038 - 0x0040)
class USoundSubmixWithParentBase : public USoundSubmixBase
{
public:
	class USoundSubmixBase*                            ParentSubmix;                                             // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
};


// Class Engine.SoundSubmix
// size:0x0050 (0x0040 - 0x0090)
class USoundSubmix : public USoundSubmixWithParentBase
{
public:
	unsigned char                                      bMuteWhenBackgrounded;                                    // 0x0040(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	TArray<class USoundEffectSubmixPreset*>            SubmixEffectChain;                                        // 0x0048(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class USoundfieldEncodingSettingsBase*             AmbisonicsPluginSettings;                                 // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                EnvelopeFollowerAttackTime;                               // 0x0060(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                EnvelopeFollowerReleaseTime;                              // 0x0064(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EGainParamMode                                     GainMode;                                                 // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	float                                              OutputVolume;                                             // 0x006C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WetLevel;                                                 // 0x0070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DryLevel;                                                 // 0x0074(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct UEMulticastInlineDelegate                   OnSubmixRecordedFileDone;                                 // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0088(0x0008) MISSED OFFSET

	void StopSpectralAnalysis(class UObject* WorldContextObject)//offset:0x2EE28B0;
	void StopRecordingOutput(class UObject* WorldContextObject, EAudioRecordingExportType ExportType, const class FString& Name, const class FString& Path, class USoundWave* ExistingSoundWaveToOverwrite)//offset:0x2EE26B0;
	void StopEnvelopeFollowing(class UObject* WorldContextObject)//offset:0x2EE2620;
	void StartSpectralAnalysis(class UObject* WorldContextObject, EFFTSize FFTSize, EFFTPeakInterpolationMethod InterpolationMethod, EFFTWindowType WindowType, float HopSize, EAudioSpectrumType SpectrumType)//offset:0x2EE2440;
	void StartRecordingOutput(class UObject* WorldContextObject, float ExpectedDuration)//offset:0x2EE2370;
	void StartEnvelopeFollowing(class UObject* WorldContextObject)//offset:0x2EE22E0;
	void SetSubmixOutputVolume(class UObject* WorldContextObject, float InOutputVolume)//offset:0x2EE2210;
	void RemoveSpectralAnalysisDelegate(class UObject* WorldContextObject, const struct FScriptDelegate& OnSubmixSpectralAnalysisBP)//offset:0x2EE2120;
	void AddSpectralAnalysisDelegate(class UObject* WorldContextObject, TArray<struct FSoundSubmixSpectralAnalysisBandSettings> InBandSettings, const struct FScriptDelegate& OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime)//offset:0x2EE1E20;
	void AddEnvelopeFollowerDelegate(class UObject* WorldContextObject, const struct FScriptDelegate& OnSubmixEnvelopeBP)//offset:0x2EE1D30;
};


// Class Engine.SoundfieldSubmix
// size:0x0028 (0x0040 - 0x0068)
class USoundfieldSubmix : public USoundSubmixWithParentBase
{
public:
	struct FName                                       SoundfieldEncodingFormat;                                 // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class USoundfieldEncodingSettingsBase*             EncodingSettings;                                         // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class USoundfieldEffectBase*>               SoundfieldEffectChain;                                    // 0x0050(0x0010) (Edit, ZeroConstructor)
	class USoundfieldEncodingSettingsBase*             EncodingSettingsClass;                                    // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.EndpointSubmix
// size:0x0018 (0x0038 - 0x0050)
class UEndpointSubmix : public USoundSubmixBase
{
public:
	struct FName                                       EndpointType;                                             // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAudioEndpointSettingsBase*                  EndpointSettingsClass;                                    // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	class UAudioEndpointSettingsBase*                  EndpointSettings;                                         // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.SoundfieldEndpointSubmix
// size:0x0038 (0x0038 - 0x0070)
class USoundfieldEndpointSubmix : public USoundSubmixBase
{
public:
	struct FName                                       SoundfieldEndpointType;                                   // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAudioEndpointSettingsBase*                  EndpointSettingsClass;                                    // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	class USoundfieldEndpointSettingsBase*             EndpointSettings;                                         // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class USoundfieldEncodingSettingsBase*             EncodingSettingsClass;                                    // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	class USoundfieldEncodingSettingsBase*             EncodingSettings;                                         // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class USoundfieldEffectBase*>               SoundfieldEffectChain;                                    // 0x0060(0x0010) (Edit, ZeroConstructor)
};


// Class Engine.SpectatorPawn
// size:0x0000 (0x02A8 - 0x02A8)
class ASpectatorPawn : public ADefaultPawn
{
public:
};


// Class Engine.SpectatorPawnMovement
// size:0x0008 (0x0150 - 0x0158)
class USpectatorPawnMovement : public UFloatingPawnMovement
{
public:
	unsigned char                                      bIgnoreTimeDilation;                                      // 0x0150(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0151(0x0007) MISSED OFFSET
};


// Class Engine.SphereReflectionCapture
// size:0x0008 (0x0228 - 0x0230)
class ASphereReflectionCapture : public AReflectionCapture
{
public:
	class UDrawSphereComponent*                        DrawCaptureRadius;                                        // 0x0228(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
};


// Class Engine.SphereReflectionCaptureComponent
// size:0x0010 (0x0270 - 0x0280)
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              InfluenceRadius;                                          // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CaptureDistanceScale;                                     // 0x0274(0x0004) (ZeroConstructor, IsPlainOldData)
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                   // 0x0278(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
};


// Class Engine.SplineMetadata
// size:0x0000 (0x0028 - 0x0028)
class USplineMetadata : public UObject
{
public:
};


// Class Engine.SplineMeshActor
// size:0x0008 (0x0220 - 0x0228)
class ASplineMeshActor : public AActor
{
public:
	class USplineMeshComponent*                        SplineMeshComponent;                                      // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
};


// Class Engine.SplineMeshComponent
// size:0x0090 (0x04F0 - 0x0580)
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	struct FSplineMeshParams                           SplineParams;                                             // 0x04F0(0x0058) (Edit)
	struct FVector                                     SplineUpDir;                                              // 0x0548(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SplineBoundaryMin;                                        // 0x0554(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       CachedMeshBodySetupGuid;                                  // 0x0558(0x0010) (ZeroConstructor, IsPlainOldData)
	class UBodySetup*                                  BodySetup;                                                // 0x0568(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              SplineBoundaryMax;                                        // 0x0570(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAllowSplineEditingPerInstance;                           // 0x0574(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bSmoothInterpRollScale;                                   // 0x0574(0x0001) (Edit)
	unsigned char                                      bMeshDirty;                                               // 0x0574(0x0001) (Transient)
	TEnumAsByte<ESplineMeshAxis>                       ForwardAxis;                                              // 0x0575(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0576(0x0002) MISSED OFFSET
	float                                              VirtualTextureMainPassMaxDrawDistance;                    // 0x0578(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x057C(0x0004) MISSED OFFSET

	void UpdateMesh()//offset:0x2EEE720;
	void SetStartTangent(const struct FVector& StartTangent, bool bUpdateMesh)//offset:0x2EEE640;
	void SetStartScale(const struct FVector2D& StartScale, bool bUpdateMesh)//offset:0x2EEE570;
	void SetStartRoll(float StartRoll, bool bUpdateMesh)//offset:0x2EEE490;
	void SetStartPosition(const struct FVector& StartPos, bool bUpdateMesh)//offset:0x2EEE3B0;
	void SetStartOffset(const struct FVector2D& StartOffset, bool bUpdateMesh)//offset:0x2EEE2E0;
	void SetStartAndEnd(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent, bool bUpdateMesh)//offset:0x2EEE100;
	void SetSplineUpDir(const struct FVector& InSplineUpDir, bool bUpdateMesh)//offset:0x2EEE020;
	void SetForwardAxis(TEnumAsByte<ESplineMeshAxis> InForwardAxis, bool bUpdateMesh)//offset:0x2EEDD50;
	void SetEndTangent(const struct FVector& EndTangent, bool bUpdateMesh)//offset:0x2EEDC70;
	void SetEndScale(const struct FVector2D& EndScale, bool bUpdateMesh)//offset:0x2EEDBA0;
	void SetEndRoll(float EndRoll, bool bUpdateMesh)//offset:0x2EEDAC0;
	void SetEndPosition(const struct FVector& EndPos, bool bUpdateMesh)//offset:0x2EED9E0;
	void SetEndOffset(const struct FVector2D& EndOffset, bool bUpdateMesh)//offset:0x2EED910;
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh)//offset:0x2EED830;
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh)//offset:0x2EED750;
	struct FVector GetStartTangent()//offset:0x2EED5D0;
	struct FVector2D GetStartScale()//offset:0x2EED590;
	float GetStartRoll()//offset:0x2EED560;
	struct FVector GetStartPosition()//offset:0x2EED520;
	struct FVector2D GetStartOffset()//offset:0x2EED4E0;
	struct FVector GetSplineUpDir()//offset:0x2EED4A0;
	TEnumAsByte<ESplineMeshAxis> GetForwardAxis()//offset:0x2EED0B0;
	struct FVector GetEndTangent()//offset:0x2EED070;
	struct FVector2D GetEndScale()//offset:0x2EED030;
	float GetEndRoll()//offset:0xCC06E0;
	struct FVector GetEndPosition()//offset:0x2EECFF0;
	struct FVector2D GetEndOffset()//offset:0x2EECFB0;
	float GetBoundaryMin()//offset:0x2EECEE0;
	float GetBoundaryMax()//offset:0x2EECEB0;
};


// Class Engine.SpotLightComponent
// size:0x0010 (0x0370 - 0x0380)
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                              InnerConeAngle;                                           // 0x0370(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OuterConeAngle;                                           // 0x0374(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0378(0x0008) MISSED OFFSET

	void SetOuterConeAngle(float NewOuterConeAngle)//offset:0x2EEDFA0;
	void SetInnerConeAngle(float NewInnerConeAngle)//offset:0x2EEDEA0;
};


// Class Engine.SpringArmComponent
// size:0x0080 (0x0200 - 0x0280)
class USpringArmComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0200(0x0008) MISSED OFFSET
	struct FVector                                     TargetOffset;                                             // 0x0208(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ProbeSize;                                                // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     ProbeChannel;                                             // 0x0218(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0219(0x0003) MISSED OFFSET
	unsigned char                                      bDoCollisionTest;                                         // 0x021C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUsePawnControlRotation;                                  // 0x021C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInheritPitch;                                            // 0x021C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInheritYaw;                                              // 0x021C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInheritRoll;                                             // 0x021C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableCameraLag;                                         // 0x021C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableCameraRotationLag;                                 // 0x021C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseCameraLagSubstepping;                                 // 0x021C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDrawDebugLagMarkers;                                     // 0x021D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x2];                                       // 0x021E(0x0002) MISSED OFFSET
	float                                              CameraLagSpeed;                                           // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraRotationLagSpeed;                                   // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraLagMaxTimeStep;                                     // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraLagMaxDistance;                                     // 0x022C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x50];                                      // 0x0230(0x0050) MISSED OFFSET

	bool IsCollisionFixApplied()//offset:0x2EED690;
	struct FVector GetUnfixedCameraPosition()//offset:0x2EED650;
	struct FRotator GetTargetRotation()//offset:0x2EED610;
};


// Class Engine.StaticMesh
// size:0x0110 (0x0060 - 0x0170)
class UStaticMesh : public UStreamableRenderAsset
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0060(0x0020) MISSED OFFSET
	struct FPerPlatformInt                             MinLOD;                                                   // 0x0080(0x0004)
	float                                              LpvBiasMultiplier;                                        // 0x0084(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FStaticMaterial>                     StaticMaterials;                                          // 0x0088(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              LightmapUVDensity;                                        // 0x0098(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                LightMapResolution;                                       // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                LightMapCoordinateIndex;                                  // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFieldSelfShadowBias;                              // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UBodySetup*                                  BodySetup;                                                // 0x00A8(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	int                                                LODForCollision;                                          // 0x00B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bGenerateMeshDistanceField;                               // 0x00B4(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00B5(0x0003) MISSED OFFSET
	int                                                LODForUniqueVertexPositionBuffer;                         // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bBuildUniqueVertexPositionBuffer;                         // 0x00BC(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	TArray<struct FVector>                             UniqueVertexPositionBuffer;                               // 0x00C0(0x0010) (ZeroConstructor)
	unsigned char                                      bStripComplexCollisionForConsole;                         // 0x00D0(0x0001) (Deprecated)
	unsigned char                                      bHasNavigationData;                                       // 0x00D0(0x0001) (Edit)
	unsigned char                                      bSupportUniformlyDistributedSampling;                     // 0x00D0(0x0001) (Edit)
	unsigned char                                      bSupportPhysicalMaterialMasks;                            // 0x00D0(0x0001) (Edit)
	unsigned char                                      bIsBuiltAtRuntime;                                        // 0x00D0(0x0001)
	unsigned char                                      bAllowCPUAccess;                                          // 0x00D0(0x0001) (Edit)
	unsigned char                                      bSupportGpuUniformlyDistributedSampling;                  // 0x00D0(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x27];                                      // 0x00D1(0x0027) MISSED OFFSET
	TArray<class UStaticMeshSocket*>                   Sockets;                                                  // 0x00F8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0108(0x0010) MISSED OFFSET
	struct FVector                                     PositiveBoundsExtension;                                  // 0x0118(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     NegativeBoundsExtension;                                  // 0x0124(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBoxSphereBounds                            ExtendedBounds;                                           // 0x0130(0x001C) (ZeroConstructor, IsPlainOldData)
	int                                                ElementToIgnoreForTexFactor;                              // 0x014C(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0150(0x0010) (Edit, ExportObject, ZeroConstructor)
	class UObject*                                     EditableMesh;                                             // 0x0160(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UNavCollisionBase*                           NavCollision;                                             // 0x0168(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, DuplicateTransient, IsPlainOldData)

	void RemoveSocket(class UStaticMeshSocket* Socket)//offset:0x2EED6C0;
	int GetNumSections(int InLOD)//offset:0x2EED400;
	int GetNumLODs()//offset:0x2EED3D0;
	void GetMinimumLODForPlatforms(TMap<struct FName, int>* PlatformMinimumLODs)//offset:0x2EED2A0;
	int GetMinimumLODForPlatform(const struct FName& PlatformName)//offset:0x2EED220;
	int GetMaterialIndex(const struct FName& MaterialSlotName)//offset:0x2EED180;
	class UMaterialInterface* GetMaterial(int MaterialIndex)//offset:0x2EED0E0;
	struct FBoxSphereBounds GetBounds()//offset:0x2EECF60;
	struct FBox GetBoundingBox()//offset:0x2EECF10;
	class UStaticMeshSocket* FindSocket(const struct FName& InSocketName)//offset:0x2EECE10;
	static class UStaticMeshDescription* CreateStaticMeshDescription(class UObject* Outer)//offset:0x2EECD80;
	void BuildFromStaticMeshDescriptions(TArray<class UStaticMeshDescription*> StaticMeshDescriptions, bool bBuildSimpleCollision)//offset:0x2EECC80;
	void AddSocket(class UStaticMeshSocket* Socket)//offset:0x2EECBF0;
	struct FName AddMaterial(class UMaterialInterface* Material)//offset:0x2EECB60;
};


// Class Engine.StaticMeshSocket
// size:0x0040 (0x0028 - 0x0068)
class UStaticMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                               // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeLocation;                                         // 0x0030(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x003C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeScale;                                            // 0x0048(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	class FString                                      Tag;                                                      // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};


// Class Engine.StereoLayerShape
// size:0x0000 (0x0028 - 0x0028)
class UStereoLayerShape : public UObject
{
public:
};


// Class Engine.StereoLayerShapeQuad
// size:0x0000 (0x0028 - 0x0028)
class UStereoLayerShapeQuad : public UStereoLayerShape
{
public:
};


// Class Engine.StereoLayerShapeCylinder
// size:0x0010 (0x0028 - 0x0038)
class UStereoLayerShapeCylinder : public UStereoLayerShape
{
public:
	float                                              Radius;                                                   // 0x0028(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OverlayArc;                                               // 0x002C(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Height;                                                   // 0x0030(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	void SetRadius(float InRadius)//offset:0x2EF2350;
	void SetOverlayArc(float InOverlayArc)//offset:0x2EF21C0;
	void SetHeight(int InHeight)//offset:0x2EF2020;
};


// Class Engine.StereoLayerShapeCubemap
// size:0x0000 (0x0028 - 0x0028)
class UStereoLayerShapeCubemap : public UStereoLayerShape
{
public:
};


// Class Engine.StereoLayerShapeEquirect
// size:0x0048 (0x0028 - 0x0070)
class UStereoLayerShapeEquirect : public UStereoLayerShape
{
public:
	struct FBox2D                                      LeftUVRect;                                               // 0x0028(0x0014) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FBox2D                                      RightUVRect;                                              // 0x003C(0x0014) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FVector2D                                   LeftScale;                                                // 0x0050(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   RightScale;                                               // 0x0058(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   LeftBias;                                                 // 0x0060(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   RightBias;                                                // 0x0068(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	void SetEquirectProps(const struct FEquirectProps& InScaleBiases)//offset:0x2EF1E00;
};


// Class Engine.StereoLayerComponent
// size:0x00E0 (0x0200 - 0x02E0)
class UStereoLayerComponent : public USceneComponent
{
public:
	class UTexture*                                    Texture;                                                  // 0x0200(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    LeftTexture;                                              // 0x0208(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bQuadPreserveTextureRatio;                                // 0x0210(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0211(0x0003) MISSED OFFSET
	struct FVector2D                                   QuadSize;                                                 // 0x0214(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FBox2D                                      UVRect;                                                   // 0x021C(0x0014) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	float                                              CylinderRadius;                                           // 0x0230(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              CylinderOverlayArc;                                       // 0x0234(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	int                                                CylinderHeight;                                           // 0x0238(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	struct FEquirectProps                              EquirectProps;                                            // 0x023C(0x0048) (Deprecated)
	TEnumAsByte<EStereoLayerType>                      StereoLayerType;                                          // 0x0284(0x0001) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EStereoLayerShape>                     StereoLayerShape;                                         // 0x0285(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0286(0x0002) MISSED OFFSET
	class UStereoLayerShape*                           Shape;                                                    // 0x0288(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData)
	int                                                Priority;                                                 // 0x0290(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4C];                                      // 0x0294(0x004C) MISSED OFFSET

	void SetUVRect(const struct FBox2D& InUVRect)//offset:0x2EF2750;
	void SetTexture(class UTexture* InTexture)//offset:0x2EF26C0;
	void SetQuadSize(const struct FVector2D& InQuadSize)//offset:0x2EF22D0;
	void SetPriority(int InPriority)//offset:0x2EF2240;
	void SetLeftTexture(class UTexture* InTexture)//offset:0x2EF20B0;
	void SetEquirectProps(const struct FEquirectProps& InScaleBiases)//offset:0x2EF1D00;
	void MarkTextureForUpdate()//offset:0x2EF1BD0;
	struct FBox2D GetUVRect()//offset:0x2EF1BA0;
	class UTexture* GetTexture()//offset:0x2EF1B80;
	struct FVector2D GetQuadSize()//offset:0x2EF1B50;
	int GetPriority()//offset:0x2EF1B30;
	class UTexture* GetLeftTexture()//offset:0x2EF1A30;
};


// Class Engine.StereoLayerFunctionLibrary
// size:0x0000 (0x0028 - 0x0028)
class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static void ShowSplashScreen()//offset:0x1F94DF0;
	static void SetSplashScreen(class UTexture* Texture, const struct FVector2D& Scale, const struct FVector& Offset, bool bShowLoadingMovie, bool bShowOnSet)//offset:0x2EF2460;
	static void HideSplashScreen()//offset:0x1F93C90;
	static void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled)//offset:0x2EF19B0;
};


// Class Engine.StringTable
// size:0x0018 (0x0028 - 0x0040)
class UStringTable : public UObject
{
public:
};


// Class Engine.SubsurfaceProfile
// size:0x0090 (0x0028 - 0x00B8)
class USubsurfaceProfile : public UObject
{
public:
	struct FSubsurfaceProfileStruct                    Settings;                                                 // 0x0028(0x008C) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
};


// Class Engine.SubsystemBlueprintLibrary
// size:0x0000 (0x0028 - 0x0028)
class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UWorldSubsystem* GetWorldSubsystem(class UObject* ContextObject, class UWorldSubsystem* Class)//offset:0x2EF4FF0;
	static class ULocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(class APlayerController* PlayerController, class ULocalPlayerSubsystem* Class)//offset:0x2EF4DD0;
	static class ULocalPlayerSubsystem* GetLocalPlayerSubsystem(class UObject* ContextObject, class ULocalPlayerSubsystem* Class)//offset:0x2EF4EA0;
	static class UGameInstanceSubsystem* GetGameInstanceSubsystem(class UObject* ContextObject, class UGameInstanceSubsystem* Class)//offset:0x2EF4D00;
	static class UEngineSubsystem* GetEngineSubsystem(class UEngineSubsystem* Class)//offset:0x2EF4C70;
};


// Class Engine.SubUVAnimation
// size:0x0040 (0x0028 - 0x0068)
class USubUVAnimation : public UObject
{
public:
	class UTexture2D*                                  SubUVTexture;                                             // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImages_Horizontal;                                     // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImages_Vertical;                                       // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESubUVBoundingVertexCount>             BoundingMode;                                             // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EOpacitySourceMode>                    OpacitySourceMode;                                        // 0x0039(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003A(0x0002) MISSED OFFSET
	float                                              AlphaThreshold;                                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0040(0x0028) MISSED OFFSET
};


// Class Engine.SystemTimeTimecodeProvider
// size:0x0010 (0x0030 - 0x0040)
class USystemTimeTimecodeProvider : public UTimecodeProvider
{
public:
	struct FFrameRate                                  FrameRate;                                                // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bGenerateFullFrame;                                       // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseHighPerformanceClock;                                 // 0x0039(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x003A(0x0006) MISSED OFFSET
};


// Class Engine.TargetPoint
// size:0x0000 (0x0220 - 0x0220)
class ATargetPoint : public AActor
{
public:
};


// Class Engine.TextPropertyTestObject
// size:0x0048 (0x0028 - 0x0070)
class UTextPropertyTestObject : public UObject
{
public:
	struct FText                                       DefaultedText;                                            // 0x0028(0x0028)
	struct FText                                       UndefaultedText;                                          // 0x0040(0x0028)
	struct FText                                       TransientText;                                            // 0x0058(0x0028)
};


// Class Engine.TextRenderActor
// size:0x0008 (0x0220 - 0x0228)
class ATextRenderActor : public AActor
{
public:
	class UTextRenderComponent*                        TextRender;                                               // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
};


// Class Engine.TextRenderComponent
// size:0x0050 (0x0450 - 0x04A0)
class UTextRenderComponent : public UPrimitiveComponent
{
public:
	struct FText                                       Text;                                                     // 0x0450(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UMaterialInterface*                          TextMaterial;                                             // 0x0468(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UFont*                                       Font;                                                     // 0x0470(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EHorizTextAligment>                    HorizontalAlignment;                                      // 0x0478(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EVerticalTextAligment>                 VerticalAlignment;                                        // 0x0479(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x047A(0x0002) MISSED OFFSET
	struct FColor                                      TextRenderColor;                                          // 0x047C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              XScale;                                                   // 0x0480(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              YScale;                                                   // 0x0484(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WorldSize;                                                // 0x0488(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              InvDefaultSize;                                           // 0x048C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              HorizSpacingAdjust;                                       // 0x0490(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VertSpacingAdjust;                                        // 0x0494(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAlwaysRenderAsText;                                      // 0x0498(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0499(0x0007) MISSED OFFSET

	void SetYScale(float Value)//offset:0x2EF56D0;
	void SetXScale(float Value)//offset:0x2EF5650;
	void SetWorldSize(float Value)//offset:0x2EF55D0;
	void SetVertSpacingAdjust(float Value)//offset:0x2EF54D0;
	void SetVerticalAlignment(TEnumAsByte<EVerticalTextAligment> Value)//offset:0x2EF5550;
	void SetTextRenderColor(const struct FColor& Value)//offset:0x2EF5450;
	void SetTextMaterial(class UMaterialInterface* Material)//offset:0x2EF53C0;
	void SetText(const class FString& Value)//offset:0x2EF5320;
	void SetHorizSpacingAdjust(float Value)//offset:0x2EF5220;
	void SetHorizontalAlignment(TEnumAsByte<EHorizTextAligment> Value)//offset:0x2EF52A0;
	void SetFont(class UFont* Value)//offset:0x2EF5190;
	void K2_SetText(const struct FText& Value)//offset:0x2EF50C0;
	struct FVector GetTextWorldSize()//offset:0x2EF4FB0;
	struct FVector GetTextLocalSize()//offset:0x2EF4F70;
};


// Class Engine.Texture2DArray
// size:0x0060 (0x00D8 - 0x0138)
class UTexture2DArray : public UTexture
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x00D8(0x0058) MISSED OFFSET
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x0130(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x0131(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressZ;                                                 // 0x0132(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x0133(0x0005) MISSED OFFSET
};


// Class Engine.Texture2DDynamic
// size:0x0018 (0x00D8 - 0x00F0)
class UTexture2DDynamic : public UTexture
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D8(0x0008) MISSED OFFSET
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x00E0(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x00E1(0x000F) MISSED OFFSET
};


// Class Engine.TextureLightProfile
// size:0x0008 (0x0100 - 0x0108)
class UTextureLightProfile : public UTexture2D
{
public:
	float                                              Brightness;                                               // 0x0100(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TextureMultiplier;                                        // 0x0104(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
};


// Class Engine.TextureMipDataProviderFactory
// size:0x0000 (0x0028 - 0x0028)
class UTextureMipDataProviderFactory : public UAssetUserData
{
public:
};


// Class Engine.TextureRenderTarget2DArray
// size:0x0020 (0x00E0 - 0x0100)
class UTextureRenderTarget2DArray : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                    // 0x00E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                SizeY;                                                    // 0x00E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Slices;                                                   // 0x00E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                ClearColor;                                               // 0x00EC(0x0010) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                           // 0x00FC(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHDR;                                                     // 0x00FD(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForceLinearGamma;                                        // 0x00FD(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00FE(0x0002) MISSED OFFSET
};


// Class Engine.TextureRenderTargetCube
// size:0x0018 (0x00E0 - 0x00F8)
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                    // 0x00E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                ClearColor;                                               // 0x00E4(0x0010) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                           // 0x00F4(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHDR;                                                     // 0x00F5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForceLinearGamma;                                        // 0x00F5(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00F6(0x0002) MISSED OFFSET
};


// Class Engine.TextureRenderTargetVolume
// size:0x0020 (0x00E0 - 0x0100)
class UTextureRenderTargetVolume : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                    // 0x00E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                SizeY;                                                    // 0x00E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                SizeZ;                                                    // 0x00E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                ClearColor;                                               // 0x00EC(0x0010) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                           // 0x00FC(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHDR;                                                     // 0x00FD(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForceLinearGamma;                                        // 0x00FD(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00FE(0x0002) MISSED OFFSET
};


// Class Engine.ThumbnailInfo
// size:0x0000 (0x0028 - 0x0028)
class UThumbnailInfo : public UObject
{
public:
};


// Class Engine.TimelineComponent
// size:0x00A0 (0x00B0 - 0x0150)
class UTimelineComponent : public UActorComponent
{
public:
	struct FTimeline                                   TheTimeline;                                              // 0x00B0(0x0098) (Net)
	unsigned char                                      bIgnoreTimeDilation;                                      // 0x0148(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0149(0x0007) MISSED OFFSET

	void Stop()//offset:0x2EF8CC0;
	void SetVectorCurve(class UCurveVector* NewVectorCurve, const struct FName& VectorTrackName)//offset:0x2EF8BF0;
	void SetTimelineLengthMode(TEnumAsByte<ETimelineLengthMode> NewLengthMode)//offset:0x2EF8B70;
	void SetTimelineLength(float NewLength)//offset:0x2EF8AF0;
	void SetPlayRate(float NewRate)//offset:0x2EF8950;
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate)//offset:0x2EF89D0;
	void SetNewTime(float NewTime)//offset:0x2EF88D0;
	void SetLooping(bool bNewLooping)//offset:0x2EF8840;
	void SetLinearColorCurve(class UCurveLinearColor* NewLinearColorCurve, const struct FName& LinearColorTrackName)//offset:0x2EF8770;
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation)//offset:0x2EF86E0;
	void SetFloatCurve(class UCurveFloat* NewFloatCurve, const struct FName& FloatTrackName)//offset:0x2EF8610;
	void ReverseFromEnd()//offset:0x2EF85F0;
	void Reverse()//offset:0x2EF85D0;
	void PlayFromStart()//offset:0x2EF85B0;
	void Play()//offset:0x2EF8590;
	void OnRep_Timeline()//offset:0x2EF8570;
	bool IsReversing()//offset:0x2EF8540;
	bool IsPlaying()//offset:0x2EF8510;
	bool IsLooping()//offset:0x2EF84E0;
	float GetTimelineLength()//offset:0x2EF84B0;
	float GetPlayRate()//offset:0x2EF83A0;
	float GetPlaybackPosition()//offset:0x2EF83D0;
	bool GetIgnoreTimeDilation()//offset:0x2EF8370;
};


// Class Engine.TimelineTemplate
// size:0x0088 (0x0028 - 0x00B0)
class UTimelineTemplate : public UObject
{
public:
	float                                              TimelineLength;                                           // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETimelineLengthMode>                   LengthMode;                                               // 0x002C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoPlay;                                                // 0x002D(0x0001) (Edit)
	unsigned char                                      bLoop;                                                    // 0x002D(0x0001) (Edit)
	unsigned char                                      bReplicated;                                              // 0x002D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreTimeDilation;                                      // 0x002D(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002E(0x0002) MISSED OFFSET
	TArray<struct FTTEventTrack>                       EventTracks;                                              // 0x0030(0x0010) (ZeroConstructor)
	TArray<struct FTTFloatTrack>                       FloatTracks;                                              // 0x0040(0x0010) (ZeroConstructor)
	TArray<struct FTTVectorTrack>                      VectorTracks;                                             // 0x0050(0x0010) (ZeroConstructor)
	TArray<struct FTTLinearColorTrack>                 LinearColorTracks;                                        // 0x0060(0x0010) (ZeroConstructor)
	TArray<struct FBPVariableMetaDataEntry>            MetaDataArray;                                            // 0x0070(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       TimelineGuid;                                             // 0x0080(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	struct FName                                       VariableName;                                             // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       DirectionPropertyName;                                    // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       UpdateFunctionName;                                       // 0x00A0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       FinishedFunctionName;                                     // 0x00A8(0x0008) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.TireType
// size:0x0008 (0x0030 - 0x0038)
class UTireType : public UDataAsset
{
public:
	float                                              FrictionScale;                                            // 0x0030(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
};


// Class Engine.TouchInterface
// size:0x0030 (0x0028 - 0x0058)
class UTouchInterface : public UObject
{
public:
	TArray<struct FTouchInputControl>                  Controls;                                                 // 0x0028(0x0010) (Edit, ZeroConstructor)
	float                                              ActiveOpacity;                                            // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InactiveOpacity;                                          // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeUntilDeactive;                                        // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeUntilReset;                                           // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ActivationDelay;                                          // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPreventRecenter;                                         // 0x004C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              StartupDelay;                                             // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
};


// Class Engine.TriggerBase
// size:0x0008 (0x0220 - 0x0228)
class ATriggerBase : public AActor
{
public:
	class UShapeComponent*                             CollisionComponent;                                       // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
};


// Class Engine.TriggerBox
// size:0x0000 (0x0228 - 0x0228)
class ATriggerBox : public ATriggerBase
{
public:
};


// Class Engine.TriggerCapsule
// size:0x0000 (0x0228 - 0x0228)
class ATriggerCapsule : public ATriggerBase
{
public:
};


// Class Engine.TriggerSphere
// size:0x0000 (0x0228 - 0x0228)
class ATriggerSphere : public ATriggerBase
{
public:
};


// Class Engine.TwitterIntegrationBase
// size:0x0000 (0x0038 - 0x0038)
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{
public:

	bool TwitterRequest(const class FString& URL, TArray<class FString> ParamKeysAndValues, TEnumAsByte<ETwitterRequestMethod> RequestMethod, int AccountIndex)//offset:0x2EFCC00;
	bool ShowTweetUI(const class FString& InitialMessage, const class FString& URL, const class FString& Picture)//offset:0x2EFCAA0;
	void Init()//offset:0x1F58050;
	int GetNumAccounts()//offset:0x25CEBC0;
	class FString GetAccountName(int AccountIndex)//offset:0x2EFBE80;
	bool CanShowTweetUI()//offset:0x1F58020;
	bool AuthorizeAccounts()//offset:0x1F77F00;
};


// Class Engine.UserDefinedEnum
// size:0x0050 (0x0060 - 0x00B0)
class UUserDefinedEnum : public UEnum
{
public:
};


// Class Engine.UserDefinedStruct
// size:0x0048 (0x00C0 - 0x0108)
class UUserDefinedStruct : public UScriptStruct
{
public:
};


// Class Engine.UserInterfaceSettings
// size:0x0238 (0x0038 - 0x0270)
class UUserInterfaceSettings : public UDeveloperSettings
{
public:
	ERenderFocusRule                                   RenderFocusRule;                                          // 0x0038(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	TMap<TEnumAsByte<EMouseCursor>, struct FHardwareCursorReference> HardwareCursors;                                          // 0x0040(0x0050) (Edit, Config)
	TMap<TEnumAsByte<EMouseCursor>, struct FSoftClassPath> SoftwareCursors;                                          // 0x0090(0x0050) (Edit, Config)
	struct FSoftClassPath                              DefaultCursor;                                            // 0x00E0(0x0018) (ZeroConstructor, Config, Deprecated)
	struct FSoftClassPath                              TextEditBeamCursor;                                       // 0x00F8(0x0018) (ZeroConstructor, Config, Deprecated)
	struct FSoftClassPath                              CrosshairsCursor;                                         // 0x0110(0x0018) (ZeroConstructor, Config, Deprecated)
	struct FSoftClassPath                              HandCursor;                                               // 0x0128(0x0018) (ZeroConstructor, Config, Deprecated)
	struct FSoftClassPath                              GrabHandCursor;                                           // 0x0140(0x0018) (ZeroConstructor, Config, Deprecated)
	struct FSoftClassPath                              GrabHandClosedCursor;                                     // 0x0158(0x0018) (ZeroConstructor, Config, Deprecated)
	struct FSoftClassPath                              SlashedCircleCursor;                                      // 0x0170(0x0018) (ZeroConstructor, Config, Deprecated)
	float                                              ApplicationScale;                                         // 0x0188(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	EUIScalingRule                                     UIScaleRule;                                              // 0x018C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x018D(0x0003) MISSED OFFSET
	struct FSoftClassPath                              CustomScalingRuleClass;                                   // 0x0190(0x0018) (Edit, ZeroConstructor, Config)
	struct FRuntimeFloatCurve                          UIScaleCurve;                                             // 0x01A8(0x0088) (Edit, Config)
	bool                                               bAllowHighDPIInGameMode;                                  // 0x0230(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0231(0x0003) MISSED OFFSET
	struct FIntPoint                                   DesignScreenSize;                                         // 0x0234(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bLoadWidgetsOnDedicatedServer;                            // 0x023C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x023D(0x0003) MISSED OFFSET
	TArray<class UObject*>                             CursorClasses;                                            // 0x0240(0x0010) (ZeroConstructor, Transient)
	class UObject*                                     CustomScalingRuleClassInstance;                           // 0x0250(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDPICustomScalingRule*                       CustomScalingRule;                                        // 0x0258(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0260(0x0010) MISSED OFFSET
};


// Class Engine.VectorField
// size:0x0020 (0x0028 - 0x0048)
class UVectorField : public UObject
{
public:
	struct FBox                                        Bounds;                                                   // 0x0028(0x001C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Intensity;                                                // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.VectorFieldAnimated
// size:0x0040 (0x0048 - 0x0088)
class UVectorFieldAnimated : public UVectorField
{
public:
	class UTexture2D*                                  Texture;                                                  // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EVectorFieldConstructionOp>            ConstructionOp;                                           // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	int                                                VolumeSizeX;                                              // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                VolumeSizeY;                                              // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                VolumeSizeZ;                                              // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImagesX;                                               // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImagesY;                                               // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                FrameCount;                                               // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FramesPerSecond;                                          // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLoop;                                                    // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	class UVectorFieldStatic*                          NoiseField;                                               // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoiseScale;                                               // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoiseMax;                                                 // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.VectorFieldComponent
// size:0x0030 (0x0450 - 0x0480)
class UVectorFieldComponent : public UPrimitiveComponent
{
public:
	class UVectorField*                                VectorField;                                              // 0x0450(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Intensity;                                                // 0x0458(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Tightness;                                                // 0x045C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPreviewVectorField;                                      // 0x0460(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0461(0x001F) MISSED OFFSET

	void SetIntensity(float NewIntensity)//offset:0x2EFCA10;
};


// Class Engine.VectorFieldStatic
// size:0x0050 (0x0048 - 0x0098)
class UVectorFieldStatic : public UVectorField
{
public:
	int                                                SizeX;                                                    // 0x0048(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                SizeY;                                                    // 0x004C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                SizeZ;                                                    // 0x0050(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bAllowCPUAccess;                                          // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x43];                                      // 0x0055(0x0043) MISSED OFFSET
};


// Class Engine.VectorFieldVolume
// size:0x0008 (0x0220 - 0x0228)
class AVectorFieldVolume : public AActor
{
public:
	class UVectorFieldComponent*                       VectorFieldComponent;                                     // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
};


// Class Engine.ViewportStatsSubsystem
// size:0x0020 (0x0030 - 0x0050)
class UViewportStatsSubsystem : public UWorldSubsystem
{
public:

	void RemoveDisplayDelegate(int IndexToRemove)//offset:0x2EFC980;
	void AddTimedDisplay(const struct FText& Text, const struct FLinearColor& Color, float Duration)//offset:0x2EFBCF0;
	int AddDisplayDelegate(const struct FScriptDelegate& Delegate)//offset:0x2EFBC30;
};


// Class Engine.VirtualTexture
// size:0x0000 (0x0028 - 0x0028)
class UVirtualTexture : public UObject
{
public:
};


// Class Engine.LightMapVirtualTexture
// size:0x0000 (0x0028 - 0x0028)
class ULightMapVirtualTexture : public UVirtualTexture
{
public:
};


// Class Engine.RuntimeVirtualTextureStreamingProxy
// size:0x0000 (0x0100 - 0x0100)
class URuntimeVirtualTextureStreamingProxy : public UTexture2D
{
public:
};


// Class Engine.VirtualTexture2D
// size:0x0010 (0x0100 - 0x0110)
class UVirtualTexture2D : public UTexture2D
{
public:
	struct FVirtualTextureBuildSettings                Settings;                                                 // 0x0100(0x000C) (ZeroConstructor, IsPlainOldData)
	bool                                               bContinuousUpdate;                                        // 0x010C(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bSinglePhysicalSpace;                                     // 0x010D(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x010E(0x0002) MISSED OFFSET
};


// Class Engine.VirtualTextureBuilder
// size:0x0010 (0x0028 - 0x0038)
class UVirtualTextureBuilder : public UObject
{
public:
	class UVirtualTexture2D*                           Texture;                                                  // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	uint64_t                                           BuildHash;                                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
};


// Class Engine.VirtualTexturePoolConfig
// size:0x0018 (0x0028 - 0x0040)
class UVirtualTexturePoolConfig : public UObject
{
public:
	int                                                DefaultSizeInMegabyte;                                    // 0x0028(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
	TArray<struct FVirtualTextureSpacePoolConfig>      Pools;                                                    // 0x0030(0x0010) (ZeroConstructor, Config)
};


// Class Engine.VisualLoggerAutomationTests
// size:0x0000 (0x0028 - 0x0028)
class UVisualLoggerAutomationTests : public UObject
{
public:
};


// Class Engine.VisualLoggerDebugSnapshotInterface
// size:0x0000 (0x0028 - 0x0028)
class UVisualLoggerDebugSnapshotInterface : public UInterface
{
public:
};


// Class Engine.VisualLoggerKismetLibrary
// size:0x0000 (0x0028 - 0x0028)
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{
public:

	static void RedirectVislog(class UObject* SourceOwner, class UObject* DestinationOwner)//offset:0x2EFC8C0;
	static void LogText(class UObject* WorldContextObject, const class FString& Text, const struct FName& LogCategory, bool bAddToMessageLog)//offset:0x2EFC720;
	static void LogSegment(class UObject* WorldContextObject, const struct FVector& SegmentStart, const struct FVector& SegmentEnd, const class FString& Text, const struct FLinearColor& ObjectColor, float Thickness, const struct FName& CategoryName, bool bAddToMessageLog)//offset:0x2EFC440;
	static void LogLocation(class UObject* WorldContextObject, const struct FVector& Location, const class FString& Text, const struct FLinearColor& ObjectColor, float Radius, const struct FName& LogCategory, bool bAddToMessageLog)//offset:0x2EFC1B0;
	static void LogBox(class UObject* WorldContextObject, const struct FBox& BoxShape, const class FString& Text, const struct FLinearColor& ObjectColor, const struct FName& LogCategory, bool bAddToMessageLog)//offset:0x2EFBF60;
	static void EnableRecording(bool bEnabled)//offset:0x2E525B0;
};


// Class Engine.VoiceChannel
// size:0x0010 (0x0070 - 0x0080)
class UVoiceChannel : public UChannel
{
public:
};


// Class Engine.VOIPTalker
// size:0x0038 (0x00B0 - 0x00E8)
class UVOIPTalker : public UActorComponent
{
public:
	struct FVoiceSettings                              Settings;                                                 // 0x00B0(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x20];                                      // 0x00C8(0x0020) MISSED OFFSET

	void RegisterWithPlayerState(class APlayerState* OwningState)//offset:0x2F00440;
	float GetVoiceLevel()//offset:0x2F003C0;
	static class UVOIPTalker* CreateTalkerForPlayer(class APlayerState* OwningState)//offset:0x2F00330;
	void BPOnTalkingEnd()//offset:0xF46340;
	void BPOnTalkingBegin(class UAudioComponent* AudioComponent)//offset:0xF39EC0;
};


// Class Engine.VOIPStatics
// size:0x0000 (0x0028 - 0x0028)
class UVOIPStatics : public UBlueprintFunctionLibrary
{
public:

	static void SetMicThreshold(float InThreshold)//offset:0x2F00760;
};


// Class Engine.VolumeTexture
// size:0x0058 (0x00D8 - 0x0130)
class UVolumeTexture : public UTexture
{
public:
};


// Class Engine.VolumetricCloudComponent
// size:0x0040 (0x0200 - 0x0240)
class UVolumetricCloudComponent : public USceneComponent
{
public:
	float                                              TracingStartMaxDistance;                                  // 0x0200(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TracingMaxDistance;                                       // 0x0204(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PlanetRadius;                                             // 0x0208(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      GroundAlbedo;                                             // 0x020C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          Material;                                                 // 0x0210(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUsePerSampleAtmosphericLightTransmittance;               // 0x0218(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0219(0x0003) MISSED OFFSET
	float                                              SkyLightCloudBottomOcclusion;                             // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ViewSampleCountScale;                                     // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ReflectionSampleCountScale;                               // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowViewSampleCountScale;                               // 0x0228(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowReflectionSampleCountScale;                         // 0x022C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowTracingDistance;                                    // 0x0230(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0234(0x000C) MISSED OFFSET

	void SetViewSampleCountScale(float NewValue)//offset:0x2F00CE0;
	void SetTracingStartMaxDistance(float NewValue)//offset:0x2F00C60;
	void SetTracingMaxDistance(float NewValue)//offset:0x2F00BE0;
	void SetSkyLightCloudBottomOcclusion(float NewValue)//offset:0x2F00A60;
	void SetShadowViewSampleCountScale(float NewValue)//offset:0x2EDBBD0;
	void SetShadowTracingDistance(float NewValue)//offset:0x2F009E0;
	void SetShadowReflectionSampleCountScale(float NewValue)//offset:0x2F00960;
	void SetReflectionSampleCountScale(float NewValue)//offset:0x2EDBF70;
	void SetPlanetRadius(float NewValue)//offset:0x2F00860;
	void SetMaterial(class UMaterialInterface* NewValue)//offset:0x2F00650;
	void SetLayerHeight(float NewValue)//offset:0x2F005D0;
	void SetLayerBottomAltitude(float NewValue)//offset:0x2F00550;
	void SetGroundAlbedo(const struct FColor& NewValue)//offset:0x2F004D0;
	void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue)//offset:0x2F00DE0;
};


// Class Engine.VolumetricCloud
// size:0x0008 (0x0220 - 0x0228)
class AVolumetricCloud : public AInfo
{
public:
	class UVolumetricCloudComponent*                   VolumetricCloudComponent;                                 // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
};


// Class Engine.VolumetricLightmapDensityVolume
// size:0x0008 (0x0258 - 0x0260)
class AVolumetricLightmapDensityVolume : public AVolume
{
public:
	struct FInt32Interval                              AllowedMipLevelRange;                                     // 0x0258(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};


// Class Engine.WindDirectionalSource
// size:0x0008 (0x0220 - 0x0228)
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*             Component;                                                // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
};


// Class Engine.WindDirectionalSourceComponent
// size:0x0020 (0x0200 - 0x0220)
class UWindDirectionalSourceComponent : public USceneComponent
{
public:
	float                                              MinGustAmount;                                            // 0x0200(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxGustAmount;                                            // 0x0204(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Radius;                                                   // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPointWind;                                               // 0x020C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x13];                                      // 0x020D(0x0013) MISSED OFFSET

	void SetWindType(EWindSourceType InNewType)//offset:0x2F00D60;
	void SetStrength(float InNewStrength)//offset:0x2F00B60;
	void SetSpeed(float InNewSpeed)//offset:0x2F00AE0;
	void SetRadius(float InNewRadius)//offset:0x2F008E0;
	void SetMinimumGustAmount(float InNewMinGust)//offset:0x2F007E0;
	void SetMaximumGustAmount(float InNewMaxGust)//offset:0x2F006E0;
};


// Class Engine.WorldComposition
// size:0x0040 (0x0028 - 0x0068)
class UWorldComposition : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0028(0x0020) MISSED OFFSET
	TArray<class ULevelStreaming*>                     TilesStreaming;                                           // 0x0048(0x0010) (ZeroConstructor, Transient)
	double                                             TilesStreamingTimeThreshold;                              // 0x0058(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bLoadAllTilesDuringCinematic;                             // 0x0060(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bRebaseOriginIn3DSpace;                                   // 0x0061(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0062(0x0002) MISSED OFFSET
	float                                              RebaseOriginDistance;                                     // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData)
};


// Class Engine.HierarchicalLODSetup
// size:0x0038 (0x0028 - 0x0060)
class UHierarchicalLODSetup : public UObject
{
public:
	TArray<struct FHierarchicalSimplification>         HierarchicalLODSetup;                                     // 0x0028(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0038(0x0028) UNKNOWN PROPERTY: 
};


#ifdef _MSC_VER
	#pragma pack(pop)
#endif
